// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAppsByIDUIByIDParams creates a new GetAppsByIDUIByIDParams object
// with the default values initialized.
func NewGetAppsByIDUIByIDParams() *GetAppsByIDUIByIDParams {
	var ()
	return &GetAppsByIDUIByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppsByIDUIByIDParamsWithTimeout creates a new GetAppsByIDUIByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppsByIDUIByIDParamsWithTimeout(timeout time.Duration) *GetAppsByIDUIByIDParams {
	var ()
	return &GetAppsByIDUIByIDParams{

		timeout: timeout,
	}
}

// NewGetAppsByIDUIByIDParamsWithContext creates a new GetAppsByIDUIByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAppsByIDUIByIDParamsWithContext(ctx context.Context) *GetAppsByIDUIByIDParams {
	var ()
	return &GetAppsByIDUIByIDParams{

		Context: ctx,
	}
}

// NewGetAppsByIDUIByIDParamsWithHTTPClient creates a new GetAppsByIDUIByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAppsByIDUIByIDParamsWithHTTPClient(client *http.Client) *GetAppsByIDUIByIDParams {
	var ()
	return &GetAppsByIDUIByIDParams{
		HTTPClient: client,
	}
}

/*GetAppsByIDUIByIDParams contains all the parameters to send to the API endpoint
for the get apps by ID Ui by ID operation typically these are written to a http.Request
*/
type GetAppsByIDUIByIDParams struct {

	/*Application
	  the id of the application

	*/
	Application string
	/*Template
	  the name of the template

	*/
	Template string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) WithTimeout(timeout time.Duration) *GetAppsByIDUIByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) WithContext(ctx context.Context) *GetAppsByIDUIByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) WithHTTPClient(client *http.Client) *GetAppsByIDUIByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplication adds the application to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) WithApplication(application string) *GetAppsByIDUIByIDParams {
	o.SetApplication(application)
	return o
}

// SetApplication adds the application to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) SetApplication(application string) {
	o.Application = application
}

// WithTemplate adds the template to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) WithTemplate(template string) *GetAppsByIDUIByIDParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the get apps by ID Ui by ID params
func (o *GetAppsByIDUIByIDParams) SetTemplate(template string) {
	o.Template = template
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppsByIDUIByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param application
	if err := r.SetPathParam("application", o.Application); err != nil {
		return err
	}

	// path param template
	if err := r.SetPathParam("template", o.Template); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
