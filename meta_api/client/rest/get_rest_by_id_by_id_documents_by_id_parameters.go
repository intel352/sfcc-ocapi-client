// Code generated by go-swagger; DO NOT EDIT.

package rest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRestByIDByIDDocumentsByIDParams creates a new GetRestByIDByIDDocumentsByIDParams object
// with the default values initialized.
func NewGetRestByIDByIDDocumentsByIDParams() *GetRestByIDByIDDocumentsByIDParams {
	var ()
	return &GetRestByIDByIDDocumentsByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRestByIDByIDDocumentsByIDParamsWithTimeout creates a new GetRestByIDByIDDocumentsByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRestByIDByIDDocumentsByIDParamsWithTimeout(timeout time.Duration) *GetRestByIDByIDDocumentsByIDParams {
	var ()
	return &GetRestByIDByIDDocumentsByIDParams{

		timeout: timeout,
	}
}

// NewGetRestByIDByIDDocumentsByIDParamsWithContext creates a new GetRestByIDByIDDocumentsByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRestByIDByIDDocumentsByIDParamsWithContext(ctx context.Context) *GetRestByIDByIDDocumentsByIDParams {
	var ()
	return &GetRestByIDByIDDocumentsByIDParams{

		Context: ctx,
	}
}

// NewGetRestByIDByIDDocumentsByIDParamsWithHTTPClient creates a new GetRestByIDByIDDocumentsByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRestByIDByIDDocumentsByIDParamsWithHTTPClient(client *http.Client) *GetRestByIDByIDDocumentsByIDParams {
	var ()
	return &GetRestByIDByIDDocumentsByIDParams{
		HTTPClient: client,
	}
}

/*GetRestByIDByIDDocumentsByIDParams contains all the parameters to send to the API endpoint
for the get rest by ID by ID documents by ID operation typically these are written to a http.Request
*/
type GetRestByIDByIDDocumentsByIDParams struct {

	/*APIName
	  the name of the API

	*/
	APIName string
	/*Children*/
	Children *string
	/*DocumentID
	  the id of the document to get meta data for

	*/
	DocumentID string
	/*Version
	  the version to get the description for

	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) WithTimeout(timeout time.Duration) *GetRestByIDByIDDocumentsByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) WithContext(ctx context.Context) *GetRestByIDByIDDocumentsByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) WithHTTPClient(client *http.Client) *GetRestByIDByIDDocumentsByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIName adds the aPIName to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) WithAPIName(aPIName string) *GetRestByIDByIDDocumentsByIDParams {
	o.SetAPIName(aPIName)
	return o
}

// SetAPIName adds the apiName to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) SetAPIName(aPIName string) {
	o.APIName = aPIName
}

// WithChildren adds the children to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) WithChildren(children *string) *GetRestByIDByIDDocumentsByIDParams {
	o.SetChildren(children)
	return o
}

// SetChildren adds the children to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) SetChildren(children *string) {
	o.Children = children
}

// WithDocumentID adds the documentID to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) WithDocumentID(documentID string) *GetRestByIDByIDDocumentsByIDParams {
	o.SetDocumentID(documentID)
	return o
}

// SetDocumentID adds the documentId to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) SetDocumentID(documentID string) {
	o.DocumentID = documentID
}

// WithVersion adds the version to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) WithVersion(version string) *GetRestByIDByIDDocumentsByIDParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get rest by ID by ID documents by ID params
func (o *GetRestByIDByIDDocumentsByIDParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetRestByIDByIDDocumentsByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param api_name
	if err := r.SetPathParam("api_name", o.APIName); err != nil {
		return err
	}

	if o.Children != nil {

		// query param children
		var qrChildren string
		if o.Children != nil {
			qrChildren = *o.Children
		}
		qChildren := qrChildren
		if qChildren != "" {
			if err := r.SetQueryParam("children", qChildren); err != nil {
				return err
			}
		}

	}

	// path param document_id
	if err := r.SetPathParam("document_id", o.DocumentID); err != nil {
		return err
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
