// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Response HTTP method response meta data.
// swagger:model response
type Response struct {

	// Response description.
	Description string `json:"description,omitempty"`

	// Response data format.
	// Enum: [int32 int64 float double byte date date-time time text email html password money site-specific localized]
	Format string `json:"format,omitempty"`

	// Array of headers, specific for the response.
	Headers []*Header `json:"headers"`

	// Schema, containing return document.
	Schema *Schema `json:"schema,omitempty"`

	// Response data type.
	// Enum: [integer number string boolean array object]
	Type string `json:"type,omitempty"`
}

// Validate validates this response
func (m *Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var responseTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["int32","int64","float","double","byte","date","date-time","time","text","email","html","password","money","site-specific","localized"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseTypeFormatPropEnum = append(responseTypeFormatPropEnum, v)
	}
}

const (

	// ResponseFormatInt32 captures enum value "int32"
	ResponseFormatInt32 string = "int32"

	// ResponseFormatInt64 captures enum value "int64"
	ResponseFormatInt64 string = "int64"

	// ResponseFormatFloat captures enum value "float"
	ResponseFormatFloat string = "float"

	// ResponseFormatDouble captures enum value "double"
	ResponseFormatDouble string = "double"

	// ResponseFormatByte captures enum value "byte"
	ResponseFormatByte string = "byte"

	// ResponseFormatDate captures enum value "date"
	ResponseFormatDate string = "date"

	// ResponseFormatDateTime captures enum value "date-time"
	ResponseFormatDateTime string = "date-time"

	// ResponseFormatTime captures enum value "time"
	ResponseFormatTime string = "time"

	// ResponseFormatText captures enum value "text"
	ResponseFormatText string = "text"

	// ResponseFormatEmail captures enum value "email"
	ResponseFormatEmail string = "email"

	// ResponseFormatHTML captures enum value "html"
	ResponseFormatHTML string = "html"

	// ResponseFormatPassword captures enum value "password"
	ResponseFormatPassword string = "password"

	// ResponseFormatMoney captures enum value "money"
	ResponseFormatMoney string = "money"

	// ResponseFormatSiteSpecific captures enum value "site-specific"
	ResponseFormatSiteSpecific string = "site-specific"

	// ResponseFormatLocalized captures enum value "localized"
	ResponseFormatLocalized string = "localized"
)

// prop value enum
func (m *Response) validateFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, responseTypeFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Response) validateFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

func (m *Response) validateHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	for i := 0; i < len(m.Headers); i++ {
		if swag.IsZero(m.Headers[i]) { // not required
			continue
		}

		if m.Headers[i] != nil {
			if err := m.Headers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Response) validateSchema(formats strfmt.Registry) error {

	if swag.IsZero(m.Schema) { // not required
		return nil
	}

	if m.Schema != nil {
		if err := m.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

var responseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","number","string","boolean","array","object"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseTypeTypePropEnum = append(responseTypeTypePropEnum, v)
	}
}

const (

	// ResponseTypeInteger captures enum value "integer"
	ResponseTypeInteger string = "integer"

	// ResponseTypeNumber captures enum value "number"
	ResponseTypeNumber string = "number"

	// ResponseTypeString captures enum value "string"
	ResponseTypeString string = "string"

	// ResponseTypeBoolean captures enum value "boolean"
	ResponseTypeBoolean string = "boolean"

	// ResponseTypeArray captures enum value "array"
	ResponseTypeArray string = "array"

	// ResponseTypeObject captures enum value "object"
	ResponseTypeObject string = "object"
)

// prop value enum
func (m *Response) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, responseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Response) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Response) UnmarshalBinary(b []byte) error {
	var res Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
