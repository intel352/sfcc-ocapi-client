// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Swagger Swagger document, for swagger 2.0.
// swagger:model swagger
type Swagger struct {

	// base path
	BasePath string `json:"basePath,omitempty"`

	// Array of consumed content types.
	Consumes []string `json:"consumes"`

	// Map with all document definitions for the API, where the document id
	//  is the key.
	Definitions map[string]Document `json:"definitions,omitempty"`

	// Host name.
	Host string `json:"host,omitempty"`

	// API information.
	Info *Info `json:"info,omitempty"`

	// Map with all resource definitions for the API, where the resource path
	//  is the key.
	Paths map[string]Resource `json:"paths,omitempty"`

	// Array of produced content types.
	Produces []string `json:"produces"`

	// security definitions
	SecurityDefinitions map[string]SecurityDefinition `json:"securityDefinitions,omitempty"`

	// Swagger specification version.
	Swagger string `json:"swagger,omitempty"`

	// x documents
	XDocuments string `json:"x-documents,omitempty"`
}

// Validate validates this swagger
func (m *Swagger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Swagger) validateDefinitions(formats strfmt.Registry) error {

	if swag.IsZero(m.Definitions) { // not required
		return nil
	}

	for k := range m.Definitions {

		if err := validate.Required("definitions"+"."+k, "body", m.Definitions[k]); err != nil {
			return err
		}
		if val, ok := m.Definitions[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Swagger) validateInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.Info) { // not required
		return nil
	}

	if m.Info != nil {
		if err := m.Info.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("info")
			}
			return err
		}
	}

	return nil
}

func (m *Swagger) validatePaths(formats strfmt.Registry) error {

	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	for k := range m.Paths {

		if err := validate.Required("paths"+"."+k, "body", m.Paths[k]); err != nil {
			return err
		}
		if val, ok := m.Paths[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Swagger) validateSecurityDefinitions(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityDefinitions) { // not required
		return nil
	}

	for k := range m.SecurityDefinitions {

		if err := validate.Required("securityDefinitions"+"."+k, "body", m.SecurityDefinitions[k]); err != nil {
			return err
		}
		if val, ok := m.SecurityDefinitions[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Swagger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Swagger) UnmarshalBinary(b []byte) error {
	var res Swagger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
