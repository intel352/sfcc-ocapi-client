// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityDefinition Definition object for describing an authorization mechanism.
// swagger:model security_definition
type SecurityDefinition struct {

	// authorization Url
	AuthorizationURL string `json:"authorizationUrl,omitempty"`

	// A short description for security scheme.
	Description string `json:"description,omitempty"`

	// The flow used by the OAuth2 security scheme (required, if type = oauth2).
	// Enum: [accessCode application password implicit]
	Flow string `json:"flow,omitempty"`

	// The location of the API key (required, if type = apiKey).
	// Enum: [header query]
	In string `json:"in,omitempty"`

	// The name of the header or query parameter to be used (required, if type = apiKey).
	Name string `json:"name,omitempty"`

	// token Url
	TokenURL string `json:"tokenUrl,omitempty"`

	// The type of the security scheme.
	// Required: true
	// Enum: [apiKey basic oauth2]
	Type *string `json:"type"`

	// x authorization Url
	XAuthorizationURL string `json:"x-authorizationUrl,omitempty"`
}

// Validate validates this security definition
func (m *SecurityDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var securityDefinitionTypeFlowPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["accessCode","application","password","implicit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityDefinitionTypeFlowPropEnum = append(securityDefinitionTypeFlowPropEnum, v)
	}
}

const (

	// SecurityDefinitionFlowAccessCode captures enum value "accessCode"
	SecurityDefinitionFlowAccessCode string = "accessCode"

	// SecurityDefinitionFlowApplication captures enum value "application"
	SecurityDefinitionFlowApplication string = "application"

	// SecurityDefinitionFlowPassword captures enum value "password"
	SecurityDefinitionFlowPassword string = "password"

	// SecurityDefinitionFlowImplicit captures enum value "implicit"
	SecurityDefinitionFlowImplicit string = "implicit"
)

// prop value enum
func (m *SecurityDefinition) validateFlowEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityDefinitionTypeFlowPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityDefinition) validateFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.Flow) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlowEnum("flow", "body", m.Flow); err != nil {
		return err
	}

	return nil
}

var securityDefinitionTypeInPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["header","query"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityDefinitionTypeInPropEnum = append(securityDefinitionTypeInPropEnum, v)
	}
}

const (

	// SecurityDefinitionInHeader captures enum value "header"
	SecurityDefinitionInHeader string = "header"

	// SecurityDefinitionInQuery captures enum value "query"
	SecurityDefinitionInQuery string = "query"
)

// prop value enum
func (m *SecurityDefinition) validateInEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityDefinitionTypeInPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityDefinition) validateIn(formats strfmt.Registry) error {

	if swag.IsZero(m.In) { // not required
		return nil
	}

	// value enum
	if err := m.validateInEnum("in", "body", m.In); err != nil {
		return err
	}

	return nil
}

var securityDefinitionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["apiKey","basic","oauth2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityDefinitionTypeTypePropEnum = append(securityDefinitionTypeTypePropEnum, v)
	}
}

const (

	// SecurityDefinitionTypeAPIKey captures enum value "apiKey"
	SecurityDefinitionTypeAPIKey string = "apiKey"

	// SecurityDefinitionTypeBasic captures enum value "basic"
	SecurityDefinitionTypeBasic string = "basic"

	// SecurityDefinitionTypeOauth2 captures enum value "oauth2"
	SecurityDefinitionTypeOauth2 string = "oauth2"
)

// prop value enum
func (m *SecurityDefinition) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, securityDefinitionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SecurityDefinition) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityDefinition) UnmarshalBinary(b []byte) error {
	var res SecurityDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
