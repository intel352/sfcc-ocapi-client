// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Resource Resource meta data
// swagger:model resource
type Resource struct {

	// Delete method description.
	Delete *Method `json:"delete,omitempty"`

	// Get method description.
	Get *Method `json:"get,omitempty"`

	// Patch method description.
	Patch *Method `json:"patch,omitempty"`

	// Post method description.
	Post *Method `json:"post,omitempty"`

	// Put method description.
	Put *Method `json:"put,omitempty"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePut(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validateDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.Delete) { // not required
		return nil
	}

	if m.Delete != nil {
		if err := m.Delete.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete")
			}
			return err
		}
	}

	return nil
}

func (m *Resource) validateGet(formats strfmt.Registry) error {

	if swag.IsZero(m.Get) { // not required
		return nil
	}

	if m.Get != nil {
		if err := m.Get.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("get")
			}
			return err
		}
	}

	return nil
}

func (m *Resource) validatePatch(formats strfmt.Registry) error {

	if swag.IsZero(m.Patch) { // not required
		return nil
	}

	if m.Patch != nil {
		if err := m.Patch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patch")
			}
			return err
		}
	}

	return nil
}

func (m *Resource) validatePost(formats strfmt.Registry) error {

	if swag.IsZero(m.Post) { // not required
		return nil
	}

	if m.Post != nil {
		if err := m.Post.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post")
			}
			return err
		}
	}

	return nil
}

func (m *Resource) validatePut(formats strfmt.Registry) error {

	if swag.IsZero(m.Put) { // not required
		return nil
	}

	if m.Put != nil {
		if err := m.Put.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("put")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
