// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RuleAttribute Document representing a customer group attribute.
// swagger:model rule_attribute
type RuleAttribute struct {

	// The data type of the attribute.
	AttrType string `json:"attr_type,omitempty"`

	// The id of the attribute.
	Attribute string `json:"attribute,omitempty"`

	// The display name of the attribute.
	DisplayName string `json:"display_name,omitempty"`

	// The maximal value, if set for the attribute.
	MaxValue interface{} `json:"max_value,omitempty"`

	// The minimal value, if set for the attribute.
	MinValue interface{} `json:"min_value,omitempty"`

	// The list of possible operators for the attribute.
	Operators []*RuleOperator `json:"operators"`

	// List of possible values for the attribute. Is only returned if attribute values are explicily restricted.
	ValueList []*RuleAttributeValue `json:"value_list"`

	// The value selector, if set for the attribute.
	ValueSelector string `json:"value_selector,omitempty"`
}

// Validate validates this rule attribute
func (m *RuleAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuleAttribute) validateOperators(formats strfmt.Registry) error {

	if swag.IsZero(m.Operators) { // not required
		return nil
	}

	for i := 0; i < len(m.Operators); i++ {
		if swag.IsZero(m.Operators[i]) { // not required
			continue
		}

		if m.Operators[i] != nil {
			if err := m.Operators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RuleAttribute) validateValueList(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueList) { // not required
		return nil
	}

	for i := 0; i < len(m.ValueList); i++ {
		if swag.IsZero(m.ValueList[i]) { // not required
			continue
		}

		if m.ValueList[i] != nil {
			if err := m.ValueList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("value_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuleAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuleAttribute) UnmarshalBinary(b []byte) error {
	var res RuleAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
