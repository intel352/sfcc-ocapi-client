// Code generated by go-swagger; DO NOT EDIT.

package catalog_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalog search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostCatalogSearch Searches for catalogs.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 id - String
 name - String
 description - String
 creation_date - DateTime


 There are two additional fields that can be used as search filters. They are not attributes in CatalogWO object,
 but can be used as filters to query catalogs based on site assignments.

 is_master_catalog - Boolean
 is_storefront_catalog - Boolean


 On using is_master_catalog in the search query, catalogs without any site assignments are returned.
 On using is_storefront_catalog in the search query, catalogs with one or more site assignments are returned.

 The output of the query can also be sorted. These are the list of sortable attributes:

 id - String
 name - String
 description - String
 creation_date - DateTime

*/
func (a *Client) PostCatalogSearch(params *PostCatalogSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCatalogSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCatalogSearch",
		Method:             "POST",
		PathPattern:        "/catalog_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCatalogSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
