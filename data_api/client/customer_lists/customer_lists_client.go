// Code generated by go-swagger; DO NOT EDIT.

package customer_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new customer lists API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for customer lists API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCustomerListsByIDCustomersByID Deletes the customer including all related information like the customer addresses.
*/
func (a *Client) DeleteCustomerListsByIDCustomersByID(params *DeleteCustomerListsByIDCustomersByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomerListsByIDCustomersByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomerListsByIDCustomersByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomerListsByIDCustomersByID",
		Method:             "DELETE",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomerListsByIDCustomersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomerListsByIDCustomersByIDNoContent), nil

}

/*
DeleteCustomerListsByIDCustomersByIDAddressesByID Action which deletes a customer address.
*/
func (a *Client) DeleteCustomerListsByIDCustomersByIDAddressesByID(params *DeleteCustomerListsByIDCustomersByIDAddressesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomerListsByIDCustomersByIDAddressesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomerListsByIDCustomersByIDAddressesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomerListsByIDCustomersByIDAddressesByID",
		Method:             "DELETE",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}/addresses/{address_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomerListsByIDCustomersByIDAddressesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomerListsByIDCustomersByIDAddressesByIDNoContent), nil

}

/*
GetCustomerListsByID Action to read an existing customerlist.
*/
func (a *Client) GetCustomerListsByID(params *GetCustomerListsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerListsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomerListsByID",
		Method:             "GET",
		PathPattern:        "/customer_lists/{list_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerListsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCustomerListsByIDCustomersByID Action to get customer information.
*/
func (a *Client) GetCustomerListsByIDCustomersByID(params *GetCustomerListsByIDCustomersByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerListsByIDCustomersByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomerListsByIDCustomersByID",
		Method:             "GET",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerListsByIDCustomersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCustomerListsByIDCustomersByIDAddresses Action that returns a pageable list of all customer addresses. The
 default page size is 10 customer addresses.
*/
func (a *Client) GetCustomerListsByIDCustomersByIDAddresses(params *GetCustomerListsByIDCustomersByIDAddressesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerListsByIDCustomersByIDAddressesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomerListsByIDCustomersByIDAddresses",
		Method:             "GET",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}/addresses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerListsByIDCustomersByIDAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCustomerListsByIDCustomersByIDAddressesByID Action which returns an address of a customer.
*/
func (a *Client) GetCustomerListsByIDCustomersByIDAddressesByID(params *GetCustomerListsByIDCustomersByIDAddressesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerListsByIDCustomersByIDAddressesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomerListsByIDCustomersByIDAddressesByID",
		Method:             "GET",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}/addresses/{address_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerListsByIDCustomersByIDAddressesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCustomerListsByIDCustomersByID Updates the customer with the specified information. The customer number is allowed to be updated but will result in a
 CustomerNumberAlreadyInUseException if there is already another customer with the same customer number existing.
*/
func (a *Client) PatchCustomerListsByIDCustomersByID(params *PatchCustomerListsByIDCustomersByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCustomerListsByIDCustomersByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCustomerListsByIDCustomersByID",
		Method:             "PATCH",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCustomerListsByIDCustomersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCustomerListsByIDCustomersByIDAddressesByID Action which updates an address of a customer with the given address information.
*/
func (a *Client) PatchCustomerListsByIDCustomersByIDAddressesByID(params *PatchCustomerListsByIDCustomersByIDAddressesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCustomerListsByIDCustomersByIDAddressesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCustomerListsByIDCustomersByIDAddressesByID",
		Method:             "PATCH",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}/addresses/{address_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCustomerListsByIDCustomersByIDAddressesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostCustomerListsByIDCustomerSearch Action to search for customers in a customer list.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 customer_no - String
 first_name - String
 second_name - String
 last_name - String
 suffix - String
 salutation - String
 title - String
 fax - String
 phone_home - String
 phone_business - String
 phone_mobile - String
 email - String
 gender - Integer
 company_name - String
 credentials.login - String
 credentials.enabled - boolean

*/
func (a *Client) PostCustomerListsByIDCustomerSearch(params *PostCustomerListsByIDCustomerSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomerListsByIDCustomerSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCustomerListsByIDCustomerSearch",
		Method:             "POST",
		PathPattern:        "/customer_lists/{customer_list_id}/customer_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCustomerListsByIDCustomerSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostCustomerListsByIDCustomers Action to create a new customer. The customer is created using the specified credentials and customer
 information.This action verifies the following:

 Login acceptance criteria and uniqueness
 Mandatory customer properties

 If the action fails to create the customer, it returns a 400 fault with an appropriate message.
*/
func (a *Client) PostCustomerListsByIDCustomers(params *PostCustomerListsByIDCustomersParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomerListsByIDCustomersParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCustomerListsByIDCustomers",
		Method:             "POST",
		PathPattern:        "/customer_lists/{list_id}/customers",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCustomerListsByIDCustomersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostCustomerListsByIDCustomersByIDAddresses The action creates a new customer address with the given address
 information.
*/
func (a *Client) PostCustomerListsByIDCustomersByIDAddresses(params *PostCustomerListsByIDCustomersByIDAddressesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomerListsByIDCustomersByIDAddressesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCustomerListsByIDCustomersByIDAddresses",
		Method:             "POST",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}/addresses",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCustomerListsByIDCustomersByIDAddressesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCustomerListsByIDCustomersByID Action to create a new customer. The customer is created using the specified customer number, credentials and
 customer information.This action verifies the following:

 Login acceptance criteria and uniqueness
 Mandatory customer properties

 If the action fails to create the customer, it returns a 400 fault with an appropriate message.
*/
func (a *Client) PutCustomerListsByIDCustomersByID(params *PutCustomerListsByIDCustomersByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomerListsByIDCustomersByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCustomerListsByIDCustomersByID",
		Method:             "PUT",
		PathPattern:        "/customer_lists/{list_id}/customers/{customer_no}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCustomerListsByIDCustomersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
