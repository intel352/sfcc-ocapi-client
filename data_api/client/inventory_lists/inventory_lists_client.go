// Code generated by go-swagger; DO NOT EDIT.

package inventory_lists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new inventory lists API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventory lists API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteInventoryListsByID Deletes the inventory list by ID
*/
func (a *Client) DeleteInventoryListsByID(params *DeleteInventoryListsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInventoryListsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryListsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInventoryListsByID",
		Method:             "DELETE",
		PathPattern:        "/inventory_lists/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInventoryListsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInventoryListsByIDNoContent), nil

}

/*
DeleteInventoryListsByIDProductInventoryRecordsByID Deletes a product inventory record by ID.
*/
func (a *Client) DeleteInventoryListsByIDProductInventoryRecordsByID(params *DeleteInventoryListsByIDProductInventoryRecordsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInventoryListsByIDProductInventoryRecordsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryListsByIDProductInventoryRecordsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInventoryListsByIDProductInventoryRecordsByID",
		Method:             "DELETE",
		PathPattern:        "/inventory_lists/{inventory_list_id}/product_inventory_records/{product_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInventoryListsByIDProductInventoryRecordsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInventoryListsByIDProductInventoryRecordsByIDNoContent), nil

}

/*
GetInventoryLists Action to get all the inventory lists with no filtering.
*/
func (a *Client) GetInventoryLists(params *GetInventoryListsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryListsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryLists",
		Method:             "GET",
		PathPattern:        "/inventory_lists",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInventoryListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetInventoryListsByID Action to get inventory list information.
*/
func (a *Client) GetInventoryListsByID(params *GetInventoryListsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryListsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryListsByID",
		Method:             "GET",
		PathPattern:        "/inventory_lists/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInventoryListsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetInventoryListsByIDProductInventoryRecords Gets all product inventory records for an inventory list.
*/
func (a *Client) GetInventoryListsByIDProductInventoryRecords(params *GetInventoryListsByIDProductInventoryRecordsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryListsByIDProductInventoryRecordsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryListsByIDProductInventoryRecords",
		Method:             "GET",
		PathPattern:        "/inventory_lists/{inventory_list_id}/product_inventory_records",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInventoryListsByIDProductInventoryRecordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetInventoryListsByIDProductInventoryRecordsByID Gets a product inventory record.
*/
func (a *Client) GetInventoryListsByIDProductInventoryRecordsByID(params *GetInventoryListsByIDProductInventoryRecordsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryListsByIDProductInventoryRecordsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInventoryListsByIDProductInventoryRecordsByID",
		Method:             "GET",
		PathPattern:        "/inventory_lists/{inventory_list_id}/product_inventory_records/{product_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInventoryListsByIDProductInventoryRecordsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchInventoryListsByID Updates the inventory list with the specified information.
*/
func (a *Client) PatchInventoryListsByID(params *PatchInventoryListsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchInventoryListsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchInventoryListsByID",
		Method:             "PATCH",
		PathPattern:        "/inventory_lists/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchInventoryListsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchInventoryListsByIDProductInventoryRecordsByID Updates the product inventory record with the specified information.
*/
func (a *Client) PatchInventoryListsByIDProductInventoryRecordsByID(params *PatchInventoryListsByIDProductInventoryRecordsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchInventoryListsByIDProductInventoryRecordsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchInventoryListsByIDProductInventoryRecordsByID",
		Method:             "PATCH",
		PathPattern:        "/inventory_lists/{inventory_list_id}/product_inventory_records/{product_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchInventoryListsByIDProductInventoryRecordsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutInventoryListsByID Creates an inventory list using the information provided.
*/
func (a *Client) PutInventoryListsByID(params *PutInventoryListsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInventoryListsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putInventoryListsByID",
		Method:             "PUT",
		PathPattern:        "/inventory_lists/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutInventoryListsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutInventoryListsByIDProductInventoryRecordsByID Creates a product inventory record using the information provided.
*/
func (a *Client) PutInventoryListsByIDProductInventoryRecordsByID(params *PutInventoryListsByIDProductInventoryRecordsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInventoryListsByIDProductInventoryRecordsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putInventoryListsByIDProductInventoryRecordsByID",
		Method:             "PUT",
		PathPattern:        "/inventory_lists/{inventory_list_id}/product_inventory_records/{product_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutInventoryListsByIDProductInventoryRecordsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
