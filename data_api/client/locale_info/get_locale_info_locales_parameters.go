// Code generated by go-swagger; DO NOT EDIT.

package locale_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLocaleInfoLocalesParams creates a new GetLocaleInfoLocalesParams object
// with the default values initialized.
func NewGetLocaleInfoLocalesParams() *GetLocaleInfoLocalesParams {
	var ()
	return &GetLocaleInfoLocalesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLocaleInfoLocalesParamsWithTimeout creates a new GetLocaleInfoLocalesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLocaleInfoLocalesParamsWithTimeout(timeout time.Duration) *GetLocaleInfoLocalesParams {
	var ()
	return &GetLocaleInfoLocalesParams{

		timeout: timeout,
	}
}

// NewGetLocaleInfoLocalesParamsWithContext creates a new GetLocaleInfoLocalesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLocaleInfoLocalesParamsWithContext(ctx context.Context) *GetLocaleInfoLocalesParams {
	var ()
	return &GetLocaleInfoLocalesParams{

		Context: ctx,
	}
}

// NewGetLocaleInfoLocalesParamsWithHTTPClient creates a new GetLocaleInfoLocalesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLocaleInfoLocalesParamsWithHTTPClient(client *http.Client) *GetLocaleInfoLocalesParams {
	var ()
	return &GetLocaleInfoLocalesParams{
		HTTPClient: client,
	}
}

/*GetLocaleInfoLocalesParams contains all the parameters to send to the API endpoint
for the get locale info locales operation typically these are written to a http.Request
*/
type GetLocaleInfoLocalesParams struct {

	/*Count
	  the count of the records to return in this page.  Default is 25.

	*/
	Count *int32
	/*ID
	  optional locale to return by id.  If specified, that locale is looked up and returned, otherwise the
	               list is returned.

	*/
	ID *string
	/*Select
	  the set of fields to return from the request.  Default is only the locale id.

	*/
	Select *string
	/*Start
	  the start index for paging.  Default is 0.

	*/
	Start *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) WithTimeout(timeout time.Duration) *GetLocaleInfoLocalesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) WithContext(ctx context.Context) *GetLocaleInfoLocalesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) WithHTTPClient(client *http.Client) *GetLocaleInfoLocalesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) WithCount(count *int32) *GetLocaleInfoLocalesParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) SetCount(count *int32) {
	o.Count = count
}

// WithID adds the id to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) WithID(id *string) *GetLocaleInfoLocalesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) SetID(id *string) {
	o.ID = id
}

// WithSelect adds the selectVar to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) WithSelect(selectVar *string) *GetLocaleInfoLocalesParams {
	o.SetSelect(selectVar)
	return o
}

// SetSelect adds the select to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) SetSelect(selectVar *string) {
	o.Select = selectVar
}

// WithStart adds the start to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) WithStart(start *int32) *GetLocaleInfoLocalesParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get locale info locales params
func (o *GetLocaleInfoLocalesParams) SetStart(start *int32) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetLocaleInfoLocalesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Select != nil {

		// query param select
		var qrSelect string
		if o.Select != nil {
			qrSelect = *o.Select
		}
		qSelect := qrSelect
		if qSelect != "" {
			if err := r.SetQueryParam("select", qSelect); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart int32
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt32(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
