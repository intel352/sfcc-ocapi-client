// Code generated by go-swagger; DO NOT EDIT.

package code_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchCodeVersionsByIDReader is a Reader for the PatchCodeVersionsByID structure.
type PatchCodeVersionsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCodeVersionsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchCodeVersionsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchCodeVersionsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchCodeVersionsByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchCodeVersionsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchCodeVersionsByIDBadRequest creates a PatchCodeVersionsByIDBadRequest with default headers values
func NewPatchCodeVersionsByIDBadRequest() *PatchCodeVersionsByIDBadRequest {
	return &PatchCodeVersionsByIDBadRequest{}
}

/*PatchCodeVersionsByIDBadRequest handles this case with default header values.

Indicates that a code version with the given id can't be updated (because it is active).
*/
type PatchCodeVersionsByIDBadRequest struct {
}

func (o *PatchCodeVersionsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /code_versions/{code_version_id}][%d] patchCodeVersionsByIdBadRequest ", 400)
}

func (o *PatchCodeVersionsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCodeVersionsByIDNotFound creates a PatchCodeVersionsByIDNotFound with default headers values
func NewPatchCodeVersionsByIDNotFound() *PatchCodeVersionsByIDNotFound {
	return &PatchCodeVersionsByIDNotFound{}
}

/*PatchCodeVersionsByIDNotFound handles this case with default header values.

Indicates that a code version with the given id was not found.
*/
type PatchCodeVersionsByIDNotFound struct {
}

func (o *PatchCodeVersionsByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /code_versions/{code_version_id}][%d] patchCodeVersionsByIdNotFound ", 404)
}

func (o *PatchCodeVersionsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCodeVersionsByIDConflict creates a PatchCodeVersionsByIDConflict with default headers values
func NewPatchCodeVersionsByIDConflict() *PatchCodeVersionsByIDConflict {
	return &PatchCodeVersionsByIDConflict{}
}

/*PatchCodeVersionsByIDConflict handles this case with default header values.

Indicates that a code version with the given id already exists.
*/
type PatchCodeVersionsByIDConflict struct {
}

func (o *PatchCodeVersionsByIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /code_versions/{code_version_id}][%d] patchCodeVersionsByIdConflict ", 409)
}

func (o *PatchCodeVersionsByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCodeVersionsByIDDefault creates a PatchCodeVersionsByIDDefault with default headers values
func NewPatchCodeVersionsByIDDefault(code int) *PatchCodeVersionsByIDDefault {
	return &PatchCodeVersionsByIDDefault{
		_statusCode: code,
	}
}

/*PatchCodeVersionsByIDDefault handles this case with default header values.

PatchCodeVersionsByIDDefault patch code versions by ID default
*/
type PatchCodeVersionsByIDDefault struct {
	_statusCode int

	Payload *models.CodeVersion
}

// Code gets the status code for the patch code versions by ID default response
func (o *PatchCodeVersionsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchCodeVersionsByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /code_versions/{code_version_id}][%d] patchCodeVersionsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchCodeVersionsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CodeVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
