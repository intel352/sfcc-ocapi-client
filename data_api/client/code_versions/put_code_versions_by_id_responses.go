// Code generated by go-swagger; DO NOT EDIT.

package code_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutCodeVersionsByIDReader is a Reader for the PutCodeVersionsByID structure.
type PutCodeVersionsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCodeVersionsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 409:
		result := NewPutCodeVersionsByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutCodeVersionsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutCodeVersionsByIDConflict creates a PutCodeVersionsByIDConflict with default headers values
func NewPutCodeVersionsByIDConflict() *PutCodeVersionsByIDConflict {
	return &PutCodeVersionsByIDConflict{}
}

/*PutCodeVersionsByIDConflict handles this case with default header values.

Indicates that a code version with the given id already exists.
*/
type PutCodeVersionsByIDConflict struct {
}

func (o *PutCodeVersionsByIDConflict) Error() string {
	return fmt.Sprintf("[PUT /code_versions/{code_version_id}][%d] putCodeVersionsByIdConflict ", 409)
}

func (o *PutCodeVersionsByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCodeVersionsByIDDefault creates a PutCodeVersionsByIDDefault with default headers values
func NewPutCodeVersionsByIDDefault(code int) *PutCodeVersionsByIDDefault {
	return &PutCodeVersionsByIDDefault{
		_statusCode: code,
	}
}

/*PutCodeVersionsByIDDefault handles this case with default header values.

PutCodeVersionsByIDDefault put code versions by ID default
*/
type PutCodeVersionsByIDDefault struct {
	_statusCode int

	Payload *models.CodeVersion
}

// Code gets the status code for the put code versions by ID default response
func (o *PutCodeVersionsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutCodeVersionsByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /code_versions/{code_version_id}][%d] putCodeVersionsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutCodeVersionsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CodeVersion)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
