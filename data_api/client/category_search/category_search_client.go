// Code generated by go-swagger; DO NOT EDIT.

package category_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new category search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for category search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostCategorySearch Searches for catalog categories anywhere they appear.
 By default, the server also returns the first level of subcategories,
  but you can specify another level by setting the levels parameter.
  Please note, using a large value for levels may cause performance
  issues in case of a large and deep category tree.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 id - String
 name - String
 description - String
 creation_date - DateTime
 online - Boolean
 catalog_id - String


 The output of the query can also be sorted. These are the list of sortable attributes:

 id - String
 name - String
 description - String
 creation_date - DateTime
 online - Boolean
 position - Double

*/
func (a *Client) PostCategorySearch(params *PostCategorySearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCategorySearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCategorySearch",
		Method:             "POST",
		PathPattern:        "/category_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCategorySearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
