// Code generated by go-swagger; DO NOT EDIT.

package role_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new role search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for role search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostRoleSearch Searches for access roles.
 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 id - String
 description - String

 Optionally, a user ID (the user login) can be specified. When it is supplied, the search for roles is limited to the
 roles assigned to this user. When expanding the permissions for the roles, all effective permissions for this user can be retrieved.

 Optionally, a (single) permission can be specified. When it is supplied, the search for roles is limited to the
 roles having this permission. When expanding the users for the roles, all users having this permission can be retrieved.

 The output of the query can also be sorted. These are the list of sortable attributes:

 id - String
 description - String

*/
func (a *Client) PostRoleSearch(params *PostRoleSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRoleSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRoleSearch",
		Method:             "POST",
		PathPattern:        "/role_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRoleSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
