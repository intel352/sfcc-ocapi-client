// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams creates a new PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams object
// with the default values initialized.
func NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams() *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	var ()
	return &PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParamsWithTimeout creates a new PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParamsWithTimeout(timeout time.Duration) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	var ()
	return &PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams{

		timeout: timeout,
	}
}

// NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParamsWithContext creates a new PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParamsWithContext(ctx context.Context) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	var ()
	return &PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams{

		Context: ctx,
	}
}

// NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParamsWithHTTPClient creates a new PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParamsWithHTTPClient(client *http.Client) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	var ()
	return &PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams{
		HTTPClient: client,
	}
}

/*PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams contains all the parameters to send to the API endpoint
for the patch sites by ID site preferences preference groups by ID by ID operation typically these are written to a http.Request
*/
type PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams struct {

	/*Body*/
	Body *models.SitePreferences
	/*GroupID*/
	GroupID string
	/*InstanceType*/
	InstanceType string
	/*MaskPasswords*/
	MaskPasswords *bool
	/*SiteID*/
	SiteID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WithTimeout(timeout time.Duration) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WithContext(ctx context.Context) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WithHTTPClient(client *http.Client) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WithBody(body *models.SitePreferences) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) SetBody(body *models.SitePreferences) {
	o.Body = body
}

// WithGroupID adds the groupID to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WithGroupID(groupID string) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) SetGroupID(groupID string) {
	o.GroupID = groupID
}

// WithInstanceType adds the instanceType to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WithInstanceType(instanceType string) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	o.SetInstanceType(instanceType)
	return o
}

// SetInstanceType adds the instanceType to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) SetInstanceType(instanceType string) {
	o.InstanceType = instanceType
}

// WithMaskPasswords adds the maskPasswords to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WithMaskPasswords(maskPasswords *bool) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	o.SetMaskPasswords(maskPasswords)
	return o
}

// SetMaskPasswords adds the maskPasswords to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) SetMaskPasswords(maskPasswords *bool) {
	o.MaskPasswords = maskPasswords
}

// WithSiteID adds the siteID to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WithSiteID(siteID string) *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the patch sites by ID site preferences preference groups by ID by ID params
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param group_id
	if err := r.SetPathParam("group_id", o.GroupID); err != nil {
		return err
	}

	// path param instance_type
	if err := r.SetPathParam("instance_type", o.InstanceType); err != nil {
		return err
	}

	if o.MaskPasswords != nil {

		// query param mask_passwords
		var qrMaskPasswords bool
		if o.MaskPasswords != nil {
			qrMaskPasswords = *o.MaskPasswords
		}
		qMaskPasswords := swag.FormatBool(qrMaskPasswords)
		if qMaskPasswords != "" {
			if err := r.SetQueryParam("mask_passwords", qMaskPasswords); err != nil {
				return err
			}
		}

	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
