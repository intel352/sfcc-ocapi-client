// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutSitesByIDCouponsByIDReader is a Reader for the PutSitesByIDCouponsByID structure.
type PutSitesByIDCouponsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSitesByIDCouponsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutSitesByIDCouponsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutSitesByIDCouponsByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutSitesByIDCouponsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutSitesByIDCouponsByIDBadRequest creates a PutSitesByIDCouponsByIDBadRequest with default headers values
func NewPutSitesByIDCouponsByIDBadRequest() *PutSitesByIDCouponsByIDBadRequest {
	return &PutSitesByIDCouponsByIDBadRequest{}
}

/*PutSitesByIDCouponsByIDBadRequest handles this case with default header values.

Thrown if the coupon passed in is not valid (the argument indicates
              the field that was invalid). or Thrown if the code provided is in use by another coupon. or Thrown if a single code coupon does not set the coupon code properly. or if the Id in request is not the same as the ID in document. or Thrown whenever a quota regarding system-generated coupons is violated
*/
type PutSitesByIDCouponsByIDBadRequest struct {
}

func (o *PutSitesByIDCouponsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/coupons/{coupon_id}][%d] putSitesByIdCouponsByIdBadRequest ", 400)
}

func (o *PutSitesByIDCouponsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDCouponsByIDForbidden creates a PutSitesByIDCouponsByIDForbidden with default headers values
func NewPutSitesByIDCouponsByIDForbidden() *PutSitesByIDCouponsByIDForbidden {
	return &PutSitesByIDCouponsByIDForbidden{}
}

/*PutSitesByIDCouponsByIDForbidden handles this case with default header values.

Thrown if the resource requires global instead of site-specific context.
*/
type PutSitesByIDCouponsByIDForbidden struct {
}

func (o *PutSitesByIDCouponsByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/coupons/{coupon_id}][%d] putSitesByIdCouponsByIdForbidden ", 403)
}

func (o *PutSitesByIDCouponsByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDCouponsByIDDefault creates a PutSitesByIDCouponsByIDDefault with default headers values
func NewPutSitesByIDCouponsByIDDefault(code int) *PutSitesByIDCouponsByIDDefault {
	return &PutSitesByIDCouponsByIDDefault{
		_statusCode: code,
	}
}

/*PutSitesByIDCouponsByIDDefault handles this case with default header values.

PutSitesByIDCouponsByIDDefault put sites by ID coupons by ID default
*/
type PutSitesByIDCouponsByIDDefault struct {
	_statusCode int

	Payload *models.Coupon
}

// Code gets the status code for the put sites by ID coupons by ID default response
func (o *PutSitesByIDCouponsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutSitesByIDCouponsByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/coupons/{coupon_id}][%d] putSitesByIDCouponsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutSitesByIDCouponsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Coupon)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
