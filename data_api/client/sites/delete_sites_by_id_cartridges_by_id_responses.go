// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// DeleteSitesByIDCartridgesByIDReader is a Reader for the DeleteSitesByIDCartridgesByID structure.
type DeleteSitesByIDCartridgesByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSitesByIDCartridgesByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewDeleteSitesByIDCartridgesByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteSitesByIDCartridgesByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteSitesByIDCartridgesByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteSitesByIDCartridgesByIDBadRequest creates a DeleteSitesByIDCartridgesByIDBadRequest with default headers values
func NewDeleteSitesByIDCartridgesByIDBadRequest() *DeleteSitesByIDCartridgesByIDBadRequest {
	return &DeleteSitesByIDCartridgesByIDBadRequest{}
}

/*DeleteSitesByIDCartridgesByIDBadRequest handles this case with default header values.

It indicates either the cartridge doesn't exist in cartridge path or the cartridge can not be deleted (e.g. System Cartridge).
*/
type DeleteSitesByIDCartridgesByIDBadRequest struct {
}

func (o *DeleteSitesByIDCartridgesByIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /sites/{site_id}/cartridges/{cartridge_name}][%d] deleteSitesByIdCartridgesByIdBadRequest ", 400)
}

func (o *DeleteSitesByIDCartridgesByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSitesByIDCartridgesByIDNotFound creates a DeleteSitesByIDCartridgesByIDNotFound with default headers values
func NewDeleteSitesByIDCartridgesByIDNotFound() *DeleteSitesByIDCartridgesByIDNotFound {
	return &DeleteSitesByIDCartridgesByIDNotFound{}
}

/*DeleteSitesByIDCartridgesByIDNotFound handles this case with default header values.

Indicates that site specified with the given id is unknown.
*/
type DeleteSitesByIDCartridgesByIDNotFound struct {
}

func (o *DeleteSitesByIDCartridgesByIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /sites/{site_id}/cartridges/{cartridge_name}][%d] deleteSitesByIdCartridgesByIdNotFound ", 404)
}

func (o *DeleteSitesByIDCartridgesByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSitesByIDCartridgesByIDDefault creates a DeleteSitesByIDCartridgesByIDDefault with default headers values
func NewDeleteSitesByIDCartridgesByIDDefault(code int) *DeleteSitesByIDCartridgesByIDDefault {
	return &DeleteSitesByIDCartridgesByIDDefault{
		_statusCode: code,
	}
}

/*DeleteSitesByIDCartridgesByIDDefault handles this case with default header values.

DeleteSitesByIDCartridgesByIDDefault delete sites by ID cartridges by ID default
*/
type DeleteSitesByIDCartridgesByIDDefault struct {
	_statusCode int

	Payload *models.CartridgePathAPIResponse
}

// Code gets the status code for the delete sites by ID cartridges by ID default response
func (o *DeleteSitesByIDCartridgesByIDDefault) Code() int {
	return o._statusCode
}

func (o *DeleteSitesByIDCartridgesByIDDefault) Error() string {
	return fmt.Sprintf("[DELETE /sites/{site_id}/cartridges/{cartridge_name}][%d] deleteSitesByIDCartridgesByID default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteSitesByIDCartridgesByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CartridgePathAPIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
