// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutSitesByIDSourceCodeGroupsByIDReader is a Reader for the PutSitesByIDSourceCodeGroupsByID structure.
type PutSitesByIDSourceCodeGroupsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSitesByIDSourceCodeGroupsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutSitesByIDSourceCodeGroupsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutSitesByIDSourceCodeGroupsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutSitesByIDSourceCodeGroupsByIDBadRequest creates a PutSitesByIDSourceCodeGroupsByIDBadRequest with default headers values
func NewPutSitesByIDSourceCodeGroupsByIDBadRequest() *PutSitesByIDSourceCodeGroupsByIDBadRequest {
	return &PutSitesByIDSourceCodeGroupsByIDBadRequest{}
}

/*PutSitesByIDSourceCodeGroupsByIDBadRequest handles this case with default header values.

if the source code group passed in is not valid (the argument indicates the field that was invalid). or Thrown when the id given in request URL is different from the id provided in the source code group document
*/
type PutSitesByIDSourceCodeGroupsByIDBadRequest struct {
}

func (o *PutSitesByIDSourceCodeGroupsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/source_code_groups/{id}][%d] putSitesByIdSourceCodeGroupsByIdBadRequest ", 400)
}

func (o *PutSitesByIDSourceCodeGroupsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDSourceCodeGroupsByIDDefault creates a PutSitesByIDSourceCodeGroupsByIDDefault with default headers values
func NewPutSitesByIDSourceCodeGroupsByIDDefault(code int) *PutSitesByIDSourceCodeGroupsByIDDefault {
	return &PutSitesByIDSourceCodeGroupsByIDDefault{
		_statusCode: code,
	}
}

/*PutSitesByIDSourceCodeGroupsByIDDefault handles this case with default header values.

PutSitesByIDSourceCodeGroupsByIDDefault put sites by ID source code groups by ID default
*/
type PutSitesByIDSourceCodeGroupsByIDDefault struct {
	_statusCode int

	Payload *models.SourceCodeGroup
}

// Code gets the status code for the put sites by ID source code groups by ID default response
func (o *PutSitesByIDSourceCodeGroupsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutSitesByIDSourceCodeGroupsByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/source_code_groups/{id}][%d] putSitesByIDSourceCodeGroupsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutSitesByIDSourceCodeGroupsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SourceCodeGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
