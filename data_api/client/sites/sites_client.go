// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sites API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sites API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSitesByIDAbTestsByID Deletes the A/B Test by ID
*/
func (a *Client) DeleteSitesByIDAbTestsByID(params *DeleteSitesByIDAbTestsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDAbTestsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDAbTestsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDAbTestsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/ab_tests/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDAbTestsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDAbTestsByIDNoContent), nil

}

/*
DeleteSitesByIDAbTestsByIDSegmentsByID Deletes the A/B Test Segment by ID
*/
func (a *Client) DeleteSitesByIDAbTestsByIDSegmentsByID(params *DeleteSitesByIDAbTestsByIDSegmentsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDAbTestsByIDSegmentsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDAbTestsByIDSegmentsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDAbTestsByIDSegmentsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/ab_tests/{id}/segments/{segment_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDAbTestsByIDSegmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDAbTestsByIDSegmentsByIDNoContent), nil

}

/*
DeleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID delete sites by ID ab tests by ID segments by ID promotions by ID API
*/
func (a *Client) DeleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID(params *DeleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/promotions/{promotion_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDNoContent), nil

}

/*
DeleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID delete sites by ID ab tests by ID segments by ID slot configurations by ID by ID API
*/
func (a *Client) DeleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID(params *DeleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/slot_configurations/{slot_id}/{slot_config_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDNoContent), nil

}

/*
DeleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID delete sites by ID ab tests by ID segments by ID sorting rules by ID by ID API
*/
func (a *Client) DeleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID(params *DeleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/sorting_rules/{sorting_rule_id}/{category_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDNoContent), nil

}

/*
DeleteSitesByIDCampaignsByID Deletes the campaign by ID
*/
func (a *Client) DeleteSitesByIDCampaignsByID(params *DeleteSitesByIDCampaignsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCampaignsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCampaignsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCampaignsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCampaignsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCampaignsByIDNoContent), nil

}

/*
DeleteSitesByIDCampaignsByIDCouponsByID Action to unbind a coupon from a given campaign.
*/
func (a *Client) DeleteSitesByIDCampaignsByIDCouponsByID(params *DeleteSitesByIDCampaignsByIDCouponsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCampaignsByIDCouponsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCampaignsByIDCouponsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCampaignsByIDCouponsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/coupons/{coupon_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCampaignsByIDCouponsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCampaignsByIDCouponsByIDNoContent), nil

}

/*
DeleteSitesByIDCampaignsByIDCustomerGroupsByID Action to unbind a customer group from a given campaign.
*/
func (a *Client) DeleteSitesByIDCampaignsByIDCustomerGroupsByID(params *DeleteSitesByIDCampaignsByIDCustomerGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCampaignsByIDCustomerGroupsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCampaignsByIDCustomerGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCampaignsByIDCustomerGroupsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/customer_groups/{customer_group_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCampaignsByIDCustomerGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCampaignsByIDCustomerGroupsByIDNoContent), nil

}

/*
DeleteSitesByIDCampaignsByIDPromotionsByID Action to unbind a single promotion from a given campaign.
*/
func (a *Client) DeleteSitesByIDCampaignsByIDPromotionsByID(params *DeleteSitesByIDCampaignsByIDPromotionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCampaignsByIDPromotionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCampaignsByIDPromotionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCampaignsByIDPromotionsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/promotions/{promotion_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCampaignsByIDPromotionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCampaignsByIDPromotionsByIDNoContent), nil

}

/*
DeleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID Action to unbind a slot configuration from a given campaign.
*/
func (a *Client) DeleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID(params *DeleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCampaignsByIDSlotConfigurationsByIDByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCampaignsByIDSlotConfigurationsByIDByIDNoContent), nil

}

/*
DeleteSitesByIDCampaignsByIDSortingRulesByIDByID Action to unbind a single sorting rule from a given campaign.
*/
func (a *Client) DeleteSitesByIDCampaignsByIDSortingRulesByIDByID(params *DeleteSitesByIDCampaignsByIDSortingRulesByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCampaignsByIDSortingRulesByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCampaignsByIDSortingRulesByIDByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCampaignsByIDSortingRulesByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent), nil

}

/*
DeleteSitesByIDCampaignsByIDSourceCodeGroupsByID Action to unbind a source code group from a given campaign.
*/
func (a *Client) DeleteSitesByIDCampaignsByIDSourceCodeGroupsByID(params *DeleteSitesByIDCampaignsByIDSourceCodeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCampaignsByIDSourceCodeGroupsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCampaignsByIDSourceCodeGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCampaignsByIDSourceCodeGroupsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/source_code_groups/{source_code_group_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCampaignsByIDSourceCodeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCampaignsByIDSourceCodeGroupsByIDNoContent), nil

}

/*
DeleteSitesByIDCartridgesByID Remove a cartridge from cartridge path.
*/
func (a *Client) DeleteSitesByIDCartridgesByID(params *DeleteSitesByIDCartridgesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCartridgesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCartridgesByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/cartridges/{cartridge_name}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCartridgesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteSitesByIDCouponsByID Delete a coupon by id.
*/
func (a *Client) DeleteSitesByIDCouponsByID(params *DeleteSitesByIDCouponsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCouponsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCouponsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCouponsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCouponsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCouponsByIDNoContent), nil

}

/*
DeleteSitesByIDCustomObjectsByIDByID Deletes a site specific Custom Object. If the Custom Object does not exist, this will do nothing. Note that the customization scripts are only called, if the Custom Object does exist.
*/
func (a *Client) DeleteSitesByIDCustomObjectsByIDByID(params *DeleteSitesByIDCustomObjectsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCustomObjectsByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCustomObjectsByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCustomObjectsByIDByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/custom_objects/{object_type}/{key}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCustomObjectsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCustomObjectsByIDByIDNoContent), nil

}

/*
DeleteSitesByIDCustomerGroupsByID Triggers customer group deletion by ID. Be aware that the deletion happens via asynchronous batch process
 which is the reason the deletion itself is not necessarily finished after the call to this resource returned. The
 customer group that is in deletion will be provided in the response.
*/
func (a *Client) DeleteSitesByIDCustomerGroupsByID(params *DeleteSitesByIDCustomerGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCustomerGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCustomerGroupsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCustomerGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteSitesByIDCustomerGroupsByIDMembersByID Action to remove a customer from a (static) customer group.
*/
func (a *Client) DeleteSitesByIDCustomerGroupsByIDMembersByID(params *DeleteSitesByIDCustomerGroupsByIDMembersByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDCustomerGroupsByIDMembersByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDCustomerGroupsByIDMembersByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDCustomerGroupsByIDMembersByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}/members/{customer_no}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDCustomerGroupsByIDMembersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDCustomerGroupsByIDMembersByIDNoContent), nil

}

/*
DeleteSitesByIDGiftCertificatesByID Deletes the gift certificate by merchant ID
*/
func (a *Client) DeleteSitesByIDGiftCertificatesByID(params *DeleteSitesByIDGiftCertificatesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDGiftCertificatesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDGiftCertificatesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDGiftCertificatesByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/gift_certificates/{merchant_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDGiftCertificatesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDGiftCertificatesByIDNoContent), nil

}

/*
DeleteSitesByIDPromotionsByID Deletes the promotion by ID
*/
func (a *Client) DeleteSitesByIDPromotionsByID(params *DeleteSitesByIDPromotionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDPromotionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDPromotionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDPromotionsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/promotions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDPromotionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDPromotionsByIDNoContent), nil

}

/*
DeleteSitesByIDSlotsByIDSlotConfigurationsByID Removes a configuration for slot in a given context from a site.
*/
func (a *Client) DeleteSitesByIDSlotsByIDSlotConfigurationsByID(params *DeleteSitesByIDSlotsByIDSlotConfigurationsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDSlotsByIDSlotConfigurationsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDSlotsByIDSlotConfigurationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDSlotsByIDSlotConfigurationsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDSlotsByIDSlotConfigurationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDSlotsByIDSlotConfigurationsByIDNoContent), nil

}

/*
DeleteSitesByIDSourceCodeGroupsByID Deletes the source code group by ID
*/
func (a *Client) DeleteSitesByIDSourceCodeGroupsByID(params *DeleteSitesByIDSourceCodeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDSourceCodeGroupsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDSourceCodeGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDSourceCodeGroupsByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/source_code_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDSourceCodeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDSourceCodeGroupsByIDNoContent), nil

}

/*
DeleteSitesByIDStoresByID Deletes the store by ID
*/
func (a *Client) DeleteSitesByIDStoresByID(params *DeleteSitesByIDStoresByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesByIDStoresByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesByIDStoresByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSitesByIDStoresByID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/stores/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSitesByIDStoresByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesByIDStoresByIDNoContent), nil

}

/*
GetSites get sites API
*/
func (a *Client) GetSites(params *GetSitesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSites",
		Method:             "GET",
		PathPattern:        "/sites",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByID get sites by ID API
*/
func (a *Client) GetSitesByID(params *GetSitesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDAbTests Action to get all the A/B tests with searching.
*/
func (a *Client) GetSitesByIDAbTests(params *GetSitesByIDAbTestsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDAbTestsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDAbTests",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/ab_tests",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDAbTestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDAbTestsByID Action to get an A/B Test information.
*/
func (a *Client) GetSitesByIDAbTestsByID(params *GetSitesByIDAbTestsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDAbTestsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDAbTestsByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/ab_tests/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDAbTestsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDAbTestsByIDSegmentsByID Gets an A/B Test segment using the information provided.
*/
func (a *Client) GetSitesByIDAbTestsByIDSegmentsByID(params *GetSitesByIDAbTestsByIDSegmentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDAbTestsByIDSegmentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDAbTestsByIDSegmentsByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/ab_tests/{id}/segments/{segment_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDAbTestsByIDSegmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDAiRecommenderNames Get a list of available AI recommenders. Recommenders are configured in the Einstein configurator and are required with AI recommendation API requests.
*/
func (a *Client) GetSitesByIDAiRecommenderNames(params *GetSitesByIDAiRecommenderNamesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDAiRecommenderNamesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDAiRecommenderNames",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/ai/recommender_names",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDAiRecommenderNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCampaignsByID Action to get campaign information.
*/
func (a *Client) GetSitesByIDCampaignsByID(params *GetSitesByIDCampaignsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCampaignsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCampaignsByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCampaignsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCoupons Action to get all the coupons with no filtering.
*/
func (a *Client) GetSitesByIDCoupons(params *GetSitesByIDCouponsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCouponsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCoupons",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/coupons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCouponsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCouponsByID Action to get coupon information.

 The following fields are returned in the Coupon document when specifying the stats expand:

     exported_code_count
     redemption_count
     total_codes_count



 If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
*/
func (a *Client) GetSitesByIDCouponsByID(params *GetSitesByIDCouponsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCouponsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCouponsByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCouponsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCouponsByIDCampaigns Get the campaigns that have a coupon assigned to them either directly or through promotions
*/
func (a *Client) GetSitesByIDCouponsByIDCampaigns(params *GetSitesByIDCouponsByIDCampaignsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCouponsByIDCampaignsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCouponsByIDCampaigns",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}/campaigns",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCouponsByIDCampaignsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCouponsByIDCampaignsByIDPromotions Get the promotions for a campaign that have a coupon assigned to them either directly or through campaigns.
*/
func (a *Client) GetSitesByIDCouponsByIDCampaignsByIDPromotions(params *GetSitesByIDCouponsByIDCampaignsByIDPromotionsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCouponsByIDCampaignsByIDPromotionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCouponsByIDCampaignsByIDPromotions",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}/campaigns/{campaign_id}/promotions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCouponsByIDCampaignsByIDPromotionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCouponsByIDCodes Get the coupon codes for the given coupon.

 If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
*/
func (a *Client) GetSitesByIDCouponsByIDCodes(params *GetSitesByIDCouponsByIDCodesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCouponsByIDCodesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCouponsByIDCodes",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}/codes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCouponsByIDCodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCouponsByIDPromotions Get the promotions that have a coupon assigned to them either directly or through campaigns.
*/
func (a *Client) GetSitesByIDCouponsByIDPromotions(params *GetSitesByIDCouponsByIDPromotionsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCouponsByIDPromotionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCouponsByIDPromotions",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}/promotions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCouponsByIDPromotionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCustomObjectsByIDByID Reads a site specific Custom Object with a given object type ID and a value for the key attribute of the object which represents its unique identifier.
*/
func (a *Client) GetSitesByIDCustomObjectsByIDByID(params *GetSitesByIDCustomObjectsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCustomObjectsByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCustomObjectsByIDByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/custom_objects/{object_type}/{key}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCustomObjectsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCustomerGroups Action to get all the customer groups with no filtering.
*/
func (a *Client) GetSitesByIDCustomerGroups(params *GetSitesByIDCustomerGroupsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCustomerGroupsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCustomerGroups",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/customer_groups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCustomerGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCustomerGroupsByID Action to get customer group information.
*/
func (a *Client) GetSitesByIDCustomerGroupsByID(params *GetSitesByIDCustomerGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCustomerGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCustomerGroupsByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCustomerGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCustomerGroupsByIDMembers Action to get all the customer group members with no filtering. For dynamic customer groups and the system groups "Everyone" and "Unregistered" no result is returned (Status Code: 204 - No Content).
*/
func (a *Client) GetSitesByIDCustomerGroupsByIDMembers(params *GetSitesByIDCustomerGroupsByIDMembersParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCustomerGroupsByIDMembersParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCustomerGroupsByIDMembers",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}/members",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCustomerGroupsByIDMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDCustomerGroupsByIDMembersByID Action to get customer group member information.
*/
func (a *Client) GetSitesByIDCustomerGroupsByIDMembersByID(params *GetSitesByIDCustomerGroupsByIDMembersByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDCustomerGroupsByIDMembersByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDCustomerGroupsByIDMembersByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}/members/{customer_no}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDCustomerGroupsByIDMembersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDGiftCertificates Action to get all the gift certificates with no filtering.
*/
func (a *Client) GetSitesByIDGiftCertificates(params *GetSitesByIDGiftCertificatesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDGiftCertificatesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDGiftCertificates",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/gift_certificates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDGiftCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDGiftCertificatesByID Action to get gift certificate information using merchant ID.
*/
func (a *Client) GetSitesByIDGiftCertificatesByID(params *GetSitesByIDGiftCertificatesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDGiftCertificatesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDGiftCertificatesByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/gift_certificates/{merchant_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDGiftCertificatesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDLocaleInfoLocales get sites by ID locale info locales API
*/
func (a *Client) GetSitesByIDLocaleInfoLocales(params *GetSitesByIDLocaleInfoLocalesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDLocaleInfoLocalesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDLocaleInfoLocales",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/locale_info/locales",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDLocaleInfoLocalesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDPromotionsByID Action to get promotion information.
*/
func (a *Client) GetSitesByIDPromotionsByID(params *GetSitesByIDPromotionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDPromotionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDPromotionsByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/promotions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDPromotionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDSitePreferencesPreferenceGroupsByIDByID get sites by ID site preferences preference groups by ID by ID API
*/
func (a *Client) GetSitesByIDSitePreferencesPreferenceGroupsByIDByID(params *GetSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDSitePreferencesPreferenceGroupsByIDByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/site_preferences/preference_groups/{group_id}/{instance_type}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDSitePreferencesPreferenceGroupsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDSlotConfigurations get sites by ID slot configurations API
*/
func (a *Client) GetSitesByIDSlotConfigurations(params *GetSitesByIDSlotConfigurationsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDSlotConfigurationsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDSlotConfigurations",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/slot_configurations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDSlotConfigurationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDSlots Action to get all the slots with no filtering.
*/
func (a *Client) GetSitesByIDSlots(params *GetSitesByIDSlotsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDSlotsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDSlots",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/slots",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDSlotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDSlotsByIDByID Action to get slot information.
*/
func (a *Client) GetSitesByIDSlotsByIDByID(params *GetSitesByIDSlotsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDSlotsByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDSlotsByIDByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/slots/{slot_id}/{context_type}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDSlotsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDSlotsByIDSlotConfigurationsByID Action to read an existing slot configuration.
*/
func (a *Client) GetSitesByIDSlotsByIDSlotConfigurationsByID(params *GetSitesByIDSlotsByIDSlotConfigurationsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDSlotsByIDSlotConfigurationsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDSlotsByIDSlotConfigurationsByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDSlotsByIDSlotConfigurationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDSourceCodeGroups Action to get all the source code groups with no filtering.
*/
func (a *Client) GetSitesByIDSourceCodeGroups(params *GetSitesByIDSourceCodeGroupsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDSourceCodeGroupsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDSourceCodeGroups",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/source_code_groups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDSourceCodeGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDSourceCodeGroupsByID Action to retrieve source code group information.
*/
func (a *Client) GetSitesByIDSourceCodeGroupsByID(params *GetSitesByIDSourceCodeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDSourceCodeGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDSourceCodeGroupsByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/source_code_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDSourceCodeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDStores Action to get all the stores with no filtering.
*/
func (a *Client) GetSitesByIDStores(params *GetSitesByIDStoresParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDStoresParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDStores",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/stores",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDStoresReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSitesByIDStoresByID Action to get store information.
*/
func (a *Client) GetSitesByIDStoresByID(params *GetSitesByIDStoresByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesByIDStoresByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitesByIDStoresByID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/stores/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitesByIDStoresByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDAbTestsByID Updates the A/B Test with the specified information.
*/
func (a *Client) PatchSitesByIDAbTestsByID(params *PatchSitesByIDAbTestsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDAbTestsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDAbTestsByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/ab_tests/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDAbTestsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDAbTestsByIDSegmentsByID Updates the A/B Test segment with the specified information.
*/
func (a *Client) PatchSitesByIDAbTestsByIDSegmentsByID(params *PatchSitesByIDAbTestsByIDSegmentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDAbTestsByIDSegmentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDAbTestsByIDSegmentsByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/ab_tests/{id}/segments/{segment_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDAbTestsByIDSegmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDCampaignsByID Updates the campaign with the specified information.
*/
func (a *Client) PatchSitesByIDCampaignsByID(params *PatchSitesByIDCampaignsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDCampaignsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDCampaignsByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDCampaignsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDCampaignsByIDSlotConfigurationsByIDByID Action to update the assignment of slot configuration to a campaign.
*/
func (a *Client) PatchSitesByIDCampaignsByIDSlotConfigurationsByIDByID(params *PatchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDCampaignsByIDSlotConfigurationsByIDByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSitesByIDCampaignsByIDSlotConfigurationsByIDByIDNoContent), nil

}

/*
PatchSitesByIDCouponsByID Updates the coupon with the specified information.
*/
func (a *Client) PatchSitesByIDCouponsByID(params *PatchSitesByIDCouponsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDCouponsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDCouponsByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDCouponsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDCustomObjectsByIDByID Updates a site specific Custom Object with information from request body. Note that only mentioned attributes will be updated and the key attribute is ignored. All other attributes will be left unattended.
*/
func (a *Client) PatchSitesByIDCustomObjectsByIDByID(params *PatchSitesByIDCustomObjectsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDCustomObjectsByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDCustomObjectsByIDByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/custom_objects/{object_type}/{key}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDCustomObjectsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDCustomerGroupsByID Updates the customer group with the specified information.
*/
func (a *Client) PatchSitesByIDCustomerGroupsByID(params *PatchSitesByIDCustomerGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDCustomerGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDCustomerGroupsByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDCustomerGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDGiftCertificatesByID Updates the gift certificate with the specified information using merchant ID.
*/
func (a *Client) PatchSitesByIDGiftCertificatesByID(params *PatchSitesByIDGiftCertificatesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDGiftCertificatesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDGiftCertificatesByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/gift_certificates/{merchant_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDGiftCertificatesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDPromotionsByID Updates the promotion with the specified information.
*/
func (a *Client) PatchSitesByIDPromotionsByID(params *PatchSitesByIDPromotionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDPromotionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDPromotionsByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/promotions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDPromotionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDSitePreferencesPreferenceGroupsByIDByID patch sites by ID site preferences preference groups by ID by ID API
*/
func (a *Client) PatchSitesByIDSitePreferencesPreferenceGroupsByIDByID(params *PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDSitePreferencesPreferenceGroupsByIDByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/site_preferences/preference_groups/{group_id}/{instance_type}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDSitePreferencesPreferenceGroupsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDSlotsByIDSlotConfigurationsByID Updates an existing slot configuration. This action ignores the slot_id and
 the context information in the input document. Note that this operation will
 not touch any relational properties, which means, that e.g. the rank on a specific
 campaign assignment will not be changed, when the rank for the slot configuration
 itself is updated.
*/
func (a *Client) PatchSitesByIDSlotsByIDSlotConfigurationsByID(params *PatchSitesByIDSlotsByIDSlotConfigurationsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDSlotsByIDSlotConfigurationsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDSlotsByIDSlotConfigurationsByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDSlotsByIDSlotConfigurationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDSourceCodeGroupsByID Updates the source code group with the specified information.
*/
func (a *Client) PatchSitesByIDSourceCodeGroupsByID(params *PatchSitesByIDSourceCodeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDSourceCodeGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDSourceCodeGroupsByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/source_code_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDSourceCodeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchSitesByIDStoresByID Updates the store with the specified information.
*/
func (a *Client) PatchSitesByIDStoresByID(params *PatchSitesByIDStoresByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSitesByIDStoresByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSitesByIDStoresByID",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}/stores/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSitesByIDStoresByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDAbTestSearch Searches for A/B Tests. The query attribute specifies a complex query that can be used to narrow down the search. This is the list of searchable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String email_addresses - String tags- String expiration_type - String enum[session, never] start_date - DateTime end_date - DateTime  These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction (OR) an exception will be thrown. The output of the query can also be sorted. These are the list of sortable attributes:  id - String description - String enabled - Boolean paused - Boolean key_metric_id - String
*/
func (a *Client) PostSitesByIDAbTestSearch(params *PostSitesByIDAbTestSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDAbTestSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDAbTestSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/ab_test_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDAbTestSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDCampaignSearch Searches for campaigns.

 The Campaign Search document contains a search object that allows filtering on various attributes.


 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

     campaign_id - String
     description - String
     enabled - Boolean
     coupon_id* - String
     customer_group* - String
     source_code* - String
     start_date - Date
     end_date - Date
     last_modified - Date



 These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction
 (OR) an exception will be thrown.

 Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting
 Additionally start_date, end_date and last_modified cannot be used in sorting.
*/
func (a *Client) PostSitesByIDCampaignSearch(params *PostSitesByIDCampaignSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDCampaignSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDCampaignSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/campaign_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDCampaignSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDCartridges post sites by ID cartridges API
*/
func (a *Client) PostSitesByIDCartridges(params *PostSitesByIDCartridgesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDCartridgesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDCartridges",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/cartridges",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDCartridgesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDCouponRedemptionSearch Searches for coupon redemptions.

 The Coupon Redemption Search document contains a search object that allows filtering on various attributes.


 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

     code - String
     coupon_id - String
     customer_email - String
     order_no - String


 Note that only searchable attributes can be used in sorting.

 If the role to which the user belongs does not have View_Coupon_Codes permission, then the coupon codes returned will be masked.
*/
func (a *Client) PostSitesByIDCouponRedemptionSearch(params *PostSitesByIDCouponRedemptionSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDCouponRedemptionSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDCouponRedemptionSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/coupon_redemption_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDCouponRedemptionSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDCouponSearch Searches for coupons.

 The Coupon Search document contains a search object that allows filtering on various attributes.


 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 coupon_id - String
 description - String
 type - one of {"single_code", "multiple_codes", "system_codes"}
 enabled - boolean


 Note that only searchable attributes can be used in sorting.

 The stats expand value is required to return the following fields in the Coupon document:

     exported_code_count
     redemption_count
     total_codes_count

*/
func (a *Client) PostSitesByIDCouponSearch(params *PostSitesByIDCouponSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDCouponSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDCouponSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/coupon_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDCouponSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDCouponsByIDMultipleCodes Add or delete (modify) multiple codes to/from the supplied coupon.
*/
func (a *Client) PostSitesByIDCouponsByIDMultipleCodes(params *PostSitesByIDCouponsByIDMultipleCodesParams, authInfo runtime.ClientAuthInfoWriter) (*PostSitesByIDCouponsByIDMultipleCodesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDCouponsByIDMultipleCodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDCouponsByIDMultipleCodes",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}/multiple_codes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDCouponsByIDMultipleCodesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSitesByIDCouponsByIDMultipleCodesNoContent), nil

}

/*
PostSitesByIDCustomerGroupSearch Searches for customer groups.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 id - String
 description - String
 type - String Enum value[system, dynamic, static]


 The output of the query can also be sorted. These are the list of sortable attributes:

 id - String
 description - String

*/
func (a *Client) PostSitesByIDCustomerGroupSearch(params *PostSitesByIDCustomerGroupSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDCustomerGroupSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDCustomerGroupSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/customer_group_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDCustomerGroupSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDCustomerGroupsByIDMemberSearch Searches for customer group members. For dynamic customer groups and the system groups "Everyone" and "Unregistered" no result is returned (Status Code: 204 - No Content).

 The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped
 into different buckets.  These are the list of searchable attributes with their corresponding buckets:

 Main:

      login - String
      active - Boolean

 Customer Profile:

      customer_no - String
      first_name - String
      last_name - String
      email - String
      zip - String


 Only attributes in the same bucket can be joined using a disjunction (OR).
 For instance, when joining login and customer_no above, only a conjunction is allowed (AND), whereas customer_no
 and email can be joined using a disjunction because they are in the same bucket.  If an attribute
 is used in a disjunction (OR) that violates this rule, an exception will be thrown.

 The output of the query can also be sorted. These are the list of sortable attributes:

 customer_no - String
 login - String


 If the Business manager customer search is configured to use the new Search Service, the following differences apply:

     all attributes can be used for sorting (except for 'active')
     searching for 'zip' will only search in the customers default address
     logical operators can be used without limits (but may result in degraded performance, depending on how they are combined)
     new assignments might not be found immediately via the search service, and removed assignments
     might also not be in effect immediately (there is a slight delay in updating the index)

*/
func (a *Client) PostSitesByIDCustomerGroupsByIDMemberSearch(params *PostSitesByIDCustomerGroupsByIDMemberSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDCustomerGroupsByIDMemberSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDCustomerGroupsByIDMemberSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}/member_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDCustomerGroupsByIDMemberSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDGiftCertificateSearch Searches for gift certificates.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 merchant_id - String
 masked_gift_certificate_code* - String
 order_no - String
 sender_name - String
 recipient_name - String
 recipient_email - String
 status - String
 enabled - Boolean
 message - String
 description - String
 creation_date - Date
 currency_mnemonic* - String


 * masked_gift_certificate_code, also known as just code, can only be used in a term query.  If a
 four-character code is supplied, it is assumed that the search is on the unmasked portion of the code, otherwise
 the full code must be matched.  Text queries are not allowed.

 * currency_mnemonic can only be joined with other attributes using a conjunction (AND).

 Note that only searchable attributes can be used in sorting.  The code attribute cannot be used for sorting.
*/
func (a *Client) PostSitesByIDGiftCertificateSearch(params *PostSitesByIDGiftCertificateSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDGiftCertificateSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDGiftCertificateSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/gift_certificate_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDGiftCertificateSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDGiftCertificates Creates a gift certificate using the information provided. If a gift certificate with
 the same unique identifier, it will be deleted and a new one will be created.
*/
func (a *Client) PostSitesByIDGiftCertificates(params *PostSitesByIDGiftCertificatesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDGiftCertificatesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDGiftCertificates",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/gift_certificates",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDGiftCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDPromotionCampaignAssignmentSearch Searches for promotion campaign assignments.

 The PromotionCampaignAssignment Search document contains a search object that allows filtering on various attributes.

 The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped
 into different buckets.  These are the list of searchable attributes with their corresponding buckets:

 Main:

     rank - Integer
     start_date - Date
     end_date - Date

 Campaign:

     campaign_id - String

 Promotion:

     promotion_id - String
     description - String
     enabled - Boolean

 Special handling:

     coupon_id - String


 Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining
 campaign_id and rank above, only a conjunction is allowed (AND), whereas promotion_id and description can be
 joined to each other using an OR because they are in the same bucket.  Special handling fields must always use
 conjunctions. If the field is used in a disjunction (OR) that violates this rule, an exception will be thrown.

 Expands that can be applied for the search request

 	   promotion
     campaign


 Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
*/
func (a *Client) PostSitesByIDPromotionCampaignAssignmentSearch(params *PostSitesByIDPromotionCampaignAssignmentSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDPromotionCampaignAssignmentSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDPromotionCampaignAssignmentSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/promotion_campaign_assignment_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDPromotionCampaignAssignmentSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDPromotionSearch Searches for promotions.

 The Promotion Search document contains a search object that allows filtering on various attributes.

 The query attribute specifies a complex query that can be used to narrow down the search. The query attribute
 specifies a complex query that can be used to narrow down the search. These are the list of searchable
 attributes:

 id - String
 name - String
 currency_code - String
 exclusivity - String
 enabled - Boolean

 Note that only searchable attributes can be used in sorting. Additionally, the following attribute can be used to
 sort:

 promotion_class - String

*/
func (a *Client) PostSitesByIDPromotionSearch(params *PostSitesByIDPromotionSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDPromotionSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDPromotionSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/promotion_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDPromotionSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDSlotConfigurationCampaignAssignmentSearch Searches for slotconfiguration campaign assignments.

 The SlotConfigCampaignAssignment Search document contains a search object that allows filtering on various attributes.

 The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped
 into different buckets.  These are the list of searchable attributes with their corresponding buckets:

 Main:

     rank - Integer
     start_date - Date
     end_date - Date

 Campaign:

     campaign_id - String
     enabled - Boolean

 Slot configuration:

     slot_configuration_id - String
     description - String


 Only attributes in the same bucket can be joined using a disjunction (OR).
 For instance, when joining rank and description above, only a conjunction is allowed (AND), whereas slot_configuration_id
 and description can be joined using a disjunction because they are in the same bucket.  If an attribute
 is used in a disjunction (OR) that violates this rule, an exception will be thrown.

 Expands that can be applied for the search request

 	   campaign
 	   slotConfiguration


 Note that only searchable attributes (excluding the ones marked with above with an asterisk) can be used in sorting.
*/
func (a *Client) PostSitesByIDSlotConfigurationCampaignAssignmentSearch(params *PostSitesByIDSlotConfigurationCampaignAssignmentSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDSlotConfigurationCampaignAssignmentSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDSlotConfigurationCampaignAssignmentSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/slot_configuration_campaign_assignment_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDSlotConfigurationCampaignAssignmentSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDSlotConfigurationSearch Searches for slot configurations.

 The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped
 into different buckets.  These are the list of searchable attributes with their corresponding buckets:

 Main:

    configuration_id - String
    default - Boolean
    description - String
    enabled - Boolean

 Slot:

    context - String
    slot_id - String


 Only fields in the same bucket can be joined using a disjunction (OR). For instance, when joining context and
 description above, only a conjunction is allowed (AND), whereas context and slot_id can be joined to each other
 using a disjunction because they are in the same bucket.  If the field is used in a disjunction (OR) that
 violates this rule, an exception will be thrown.
*/
func (a *Client) PostSitesByIDSlotConfigurationSearch(params *PostSitesByIDSlotConfigurationSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDSlotConfigurationSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDSlotConfigurationSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/slot_configuration_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDSlotConfigurationSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDSlotSearch Searches for slots.

 The query attribute specifies a complex query that can be used to narrow down the search. The set of fields that
 are available to search are:

 slot_id - String
 description - String
 context_type - String


 Note that only searchable attributes can be used in sorting. "context_type" value is restricted to Global/Folder/Category.
*/
func (a *Client) PostSitesByIDSlotSearch(params *PostSitesByIDSlotSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDSlotSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDSlotSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/slot_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDSlotSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDSortingRuleSearch Searches for product sorting rules.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 id - String
 description - String
 creation_date - date of creation


 The output of the query can also be sorted. These are the list of sortable attributes:

 id - String
 description - String
 creation_date - date of creation


 This resource does not support expand options.
*/
func (a *Client) PostSitesByIDSortingRuleSearch(params *PostSitesByIDSortingRuleSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDSortingRuleSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDSortingRuleSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/sorting_rule_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDSortingRuleSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDSourceCodeGroupSearch Searches for source code groups.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 id - String
 description - String
 source_code* - String
 start_time - DateTime
 end_time - DateTime
 creation_date - DateTime
 enabled - Boolean
 active* - Boolean


 * - These fields can only be used in Queries as conjunctions (using AND).  If the field is used in a disjunction
 (OR) an exception will be thrown.

 The output of the query can also be sorted. These are the list of sortable attributes:

 id - String
 description - String
 enabled - Boolean
 creation_date - DateTime


 Expands that can be applied for the search request

 specifications - String

*/
func (a *Client) PostSitesByIDSourceCodeGroupSearch(params *PostSitesByIDSourceCodeGroupSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDSourceCodeGroupSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDSourceCodeGroupSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/source_code_group_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDSourceCodeGroupSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitesByIDStoreSearch Searches for stores.

 The query attribute specifies a complex query that can be used to narrow down the search. This is the list
 of searchable attributes:

 address1 - String
 address2 - String
 city - String
 country_code - String
 email - String
 fax - String
 id - String
 inventory_id - String
 latitude - double
 longitude - double
 name - String
 phone - String
 postal_code - String
 state_code - String
 store_hours - String
 store_events - String

*/
func (a *Client) PostSitesByIDStoreSearch(params *PostSitesByIDStoreSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesByIDStoreSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitesByIDStoreSearch",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/store_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitesByIDStoreSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDAbTestsByID Creates an A/B Test using the information provided. If an A/B Test with the same unique identifier exists, it will be deleted and a new one will be created unless the header x-dw-validate-existing=true is passed in with the request.
*/
func (a *Client) PutSitesByIDAbTestsByID(params *PutSitesByIDAbTestsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDAbTestsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDAbTestsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/ab_tests/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDAbTestsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDAbTestsByIDSegmentsByID Creates an A/B Test segment using the information provided.
*/
func (a *Client) PutSitesByIDAbTestsByIDSegmentsByID(params *PutSitesByIDAbTestsByIDSegmentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDAbTestsByIDSegmentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDAbTestsByIDSegmentsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/ab_tests/{id}/segments/{segment_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDAbTestsByIDSegmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDAbTestsByIDSegmentsByIDPromotionsByID put sites by ID ab tests by ID segments by ID promotions by ID API
*/
func (a *Client) PutSitesByIDAbTestsByIDSegmentsByIDPromotionsByID(params *PutSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDAbTestsByIDSegmentsByIDPromotionsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/promotions/{promotion_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDAbTestsByIDSegmentsByIDPromotionsByIDNoContent), nil

}

/*
PutSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID put sites by ID ab tests by ID segments by ID slot configurations by ID by ID API
*/
func (a *Client) PutSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID(params *PutSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/slot_configurations/{slot_id}/{slot_config_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDAbTestsByIDSegmentsByIDSlotConfigurationsByIDByIDNoContent), nil

}

/*
PutSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID put sites by ID ab tests by ID segments by ID sorting rules by ID by ID API
*/
func (a *Client) PutSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID(params *PutSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/ab_tests/{ab_test_id}/segments/{segment_id}/sorting_rules/{sorting_rule_id}/{category_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDAbTestsByIDSegmentsByIDSortingRulesByIDByIDNoContent), nil

}

/*
PutSitesByIDCampaignsByID Creates a campaign using the information provided.
*/
func (a *Client) PutSitesByIDCampaignsByID(params *PutSitesByIDCampaignsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCampaignsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCampaignsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCampaignsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDCampaignsByIDCouponsByID Action to bind a single coupon to a given campaign.
*/
func (a *Client) PutSitesByIDCampaignsByIDCouponsByID(params *PutSitesByIDCampaignsByIDCouponsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDCampaignsByIDCouponsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCampaignsByIDCouponsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCampaignsByIDCouponsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/coupons/{coupon_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCampaignsByIDCouponsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDCampaignsByIDCouponsByIDNoContent), nil

}

/*
PutSitesByIDCampaignsByIDCustomerGroupsByID Action to bind a single customer group to a given campaign.
*/
func (a *Client) PutSitesByIDCampaignsByIDCustomerGroupsByID(params *PutSitesByIDCampaignsByIDCustomerGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDCampaignsByIDCustomerGroupsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCampaignsByIDCustomerGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCampaignsByIDCustomerGroupsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/customer_groups/{customer_group_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCampaignsByIDCustomerGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDCampaignsByIDCustomerGroupsByIDNoContent), nil

}

/*
PutSitesByIDCampaignsByIDPromotionsByID Action to bind a single promotion to a given campaign.
*/
func (a *Client) PutSitesByIDCampaignsByIDPromotionsByID(params *PutSitesByIDCampaignsByIDPromotionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDCampaignsByIDPromotionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCampaignsByIDPromotionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCampaignsByIDPromotionsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/promotions/{promotion_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCampaignsByIDPromotionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDCampaignsByIDPromotionsByIDNoContent), nil

}

/*
PutSitesByIDCampaignsByIDSlotConfigurationsByIDByID Action to bind a slot configuration to a given campaign.
*/
func (a *Client) PutSitesByIDCampaignsByIDSlotConfigurationsByIDByID(params *PutSitesByIDCampaignsByIDSlotConfigurationsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDCampaignsByIDSlotConfigurationsByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCampaignsByIDSlotConfigurationsByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCampaignsByIDSlotConfigurationsByIDByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/slot_configurations/{slot_id}/{slot_config_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCampaignsByIDSlotConfigurationsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDCampaignsByIDSlotConfigurationsByIDByIDNoContent), nil

}

/*
PutSitesByIDCampaignsByIDSortingRulesByIDByID Action to bind a single sorting rule to a given campaign.
*/
func (a *Client) PutSitesByIDCampaignsByIDSortingRulesByIDByID(params *PutSitesByIDCampaignsByIDSortingRulesByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCampaignsByIDSortingRulesByIDByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCampaignsByIDSortingRulesByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent), nil

}

/*
PutSitesByIDCampaignsByIDSourceCodeGroupsByID Action to bind a single source code group to a given campaign.
*/
func (a *Client) PutSitesByIDCampaignsByIDSourceCodeGroupsByID(params *PutSitesByIDCampaignsByIDSourceCodeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesByIDCampaignsByIDSourceCodeGroupsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCampaignsByIDSourceCodeGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCampaignsByIDSourceCodeGroupsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/campaigns/{campaign_id}/source_code_groups/{source_code_group_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCampaignsByIDSourceCodeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesByIDCampaignsByIDSourceCodeGroupsByIDNoContent), nil

}

/*
PutSitesByIDCartridges put sites by ID cartridges API
*/
func (a *Client) PutSitesByIDCartridges(params *PutSitesByIDCartridgesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCartridgesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCartridges",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/cartridges",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCartridgesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDCouponsByID Creates a coupon using the information provided. If a coupon exists with the same unique identifier,
 the coupon is replaced completely.
*/
func (a *Client) PutSitesByIDCouponsByID(params *PutSitesByIDCouponsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCouponsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCouponsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/coupons/{coupon_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCouponsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDCustomObjectsByIDByID Creates a site specific Custom Object from request body for the specified site. Note that an existing Custom Object for the site, with the same key, will be overwritten by this action.
*/
func (a *Client) PutSitesByIDCustomObjectsByIDByID(params *PutSitesByIDCustomObjectsByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCustomObjectsByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCustomObjectsByIDByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/custom_objects/{object_type}/{key}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCustomObjectsByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDCustomerGroupsByID Creates a customer group using the information provided.
*/
func (a *Client) PutSitesByIDCustomerGroupsByID(params *PutSitesByIDCustomerGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCustomerGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCustomerGroupsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCustomerGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDCustomerGroupsByIDMembersByID Action to add customer to (static) customer group.
*/
func (a *Client) PutSitesByIDCustomerGroupsByIDMembersByID(params *PutSitesByIDCustomerGroupsByIDMembersByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDCustomerGroupsByIDMembersByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDCustomerGroupsByIDMembersByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/customer_groups/{id}/members/{customer_no}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDCustomerGroupsByIDMembersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDPromotionsByID Creates a promotion using the information provided.
*/
func (a *Client) PutSitesByIDPromotionsByID(params *PutSitesByIDPromotionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDPromotionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDPromotionsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/promotions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDPromotionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDSlotsByIDSlotConfigurationsByID Creates a new configuration for an existing slot. If a slot configuration
 exists with the specified configuration_id, slot_id, and context, the existing
 slot configuration is overwritten.
*/
func (a *Client) PutSitesByIDSlotsByIDSlotConfigurationsByID(params *PutSitesByIDSlotsByIDSlotConfigurationsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDSlotsByIDSlotConfigurationsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDSlotsByIDSlotConfigurationsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/slots/{slot_id}/slot_configurations/{configuration_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDSlotsByIDSlotConfigurationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDSourceCodeGroupsByID Creates a source code group using the information provided.
*/
func (a *Client) PutSitesByIDSourceCodeGroupsByID(params *PutSitesByIDSourceCodeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDSourceCodeGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDSourceCodeGroupsByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/source_code_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDSourceCodeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutSitesByIDStoresByID Creates a store using the information provided.
*/
func (a *Client) PutSitesByIDStoresByID(params *PutSitesByIDStoresByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesByIDStoresByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSitesByIDStoresByID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/stores/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSitesByIDStoresByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
