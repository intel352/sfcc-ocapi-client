// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchSitesByIDCustomerGroupsByIDReader is a Reader for the PatchSitesByIDCustomerGroupsByID structure.
type PatchSitesByIDCustomerGroupsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSitesByIDCustomerGroupsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 403:
		result := NewPatchSitesByIDCustomerGroupsByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchSitesByIDCustomerGroupsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchSitesByIDCustomerGroupsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchSitesByIDCustomerGroupsByIDForbidden creates a PatchSitesByIDCustomerGroupsByIDForbidden with default headers values
func NewPatchSitesByIDCustomerGroupsByIDForbidden() *PatchSitesByIDCustomerGroupsByIDForbidden {
	return &PatchSitesByIDCustomerGroupsByIDForbidden{}
}

/*PatchSitesByIDCustomerGroupsByIDForbidden handles this case with default header values.

Thrown when attempting to update the system customer group.
*/
type PatchSitesByIDCustomerGroupsByIDForbidden struct {
}

func (o *PatchSitesByIDCustomerGroupsByIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /sites/{site_id}/customer_groups/{id}][%d] patchSitesByIdCustomerGroupsByIdForbidden ", 403)
}

func (o *PatchSitesByIDCustomerGroupsByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSitesByIDCustomerGroupsByIDNotFound creates a PatchSitesByIDCustomerGroupsByIDNotFound with default headers values
func NewPatchSitesByIDCustomerGroupsByIDNotFound() *PatchSitesByIDCustomerGroupsByIDNotFound {
	return &PatchSitesByIDCustomerGroupsByIDNotFound{}
}

/*PatchSitesByIDCustomerGroupsByIDNotFound handles this case with default header values.

Thrown in case the customer group does not exist matching the given id
*/
type PatchSitesByIDCustomerGroupsByIDNotFound struct {
}

func (o *PatchSitesByIDCustomerGroupsByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /sites/{site_id}/customer_groups/{id}][%d] patchSitesByIdCustomerGroupsByIdNotFound ", 404)
}

func (o *PatchSitesByIDCustomerGroupsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSitesByIDCustomerGroupsByIDDefault creates a PatchSitesByIDCustomerGroupsByIDDefault with default headers values
func NewPatchSitesByIDCustomerGroupsByIDDefault(code int) *PatchSitesByIDCustomerGroupsByIDDefault {
	return &PatchSitesByIDCustomerGroupsByIDDefault{
		_statusCode: code,
	}
}

/*PatchSitesByIDCustomerGroupsByIDDefault handles this case with default header values.

PatchSitesByIDCustomerGroupsByIDDefault patch sites by ID customer groups by ID default
*/
type PatchSitesByIDCustomerGroupsByIDDefault struct {
	_statusCode int

	Payload *models.CustomerGroup
}

// Code gets the status code for the patch sites by ID customer groups by ID default response
func (o *PatchSitesByIDCustomerGroupsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchSitesByIDCustomerGroupsByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /sites/{site_id}/customer_groups/{id}][%d] patchSitesByIDCustomerGroupsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchSitesByIDCustomerGroupsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomerGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
