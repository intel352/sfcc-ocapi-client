// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchSitesByIDAbTestsByIDSegmentsByIDReader is a Reader for the PatchSitesByIDAbTestsByIDSegmentsByID structure.
type PatchSitesByIDAbTestsByIDSegmentsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSitesByIDAbTestsByIDSegmentsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 404:
		result := NewPatchSitesByIDAbTestsByIDSegmentsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchSitesByIDAbTestsByIDSegmentsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchSitesByIDAbTestsByIDSegmentsByIDNotFound creates a PatchSitesByIDAbTestsByIDSegmentsByIDNotFound with default headers values
func NewPatchSitesByIDAbTestsByIDSegmentsByIDNotFound() *PatchSitesByIDAbTestsByIDSegmentsByIDNotFound {
	return &PatchSitesByIDAbTestsByIDSegmentsByIDNotFound{}
}

/*PatchSitesByIDAbTestsByIDSegmentsByIDNotFound handles this case with default header values.

Indicates that site specified with the given id is unknown. or Thrown in case the A/B Test does not exist matching the given id or Thrown if the segment cannot be found in the A/B Test provided
*/
type PatchSitesByIDAbTestsByIDSegmentsByIDNotFound struct {
}

func (o *PatchSitesByIDAbTestsByIDSegmentsByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /sites/{site_id}/ab_tests/{id}/segments/{segment_id}][%d] patchSitesByIdAbTestsByIdSegmentsByIdNotFound ", 404)
}

func (o *PatchSitesByIDAbTestsByIDSegmentsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSitesByIDAbTestsByIDSegmentsByIDDefault creates a PatchSitesByIDAbTestsByIDSegmentsByIDDefault with default headers values
func NewPatchSitesByIDAbTestsByIDSegmentsByIDDefault(code int) *PatchSitesByIDAbTestsByIDSegmentsByIDDefault {
	return &PatchSitesByIDAbTestsByIDSegmentsByIDDefault{
		_statusCode: code,
	}
}

/*PatchSitesByIDAbTestsByIDSegmentsByIDDefault handles this case with default header values.

PatchSitesByIDAbTestsByIDSegmentsByIDDefault patch sites by ID ab tests by ID segments by ID default
*/
type PatchSitesByIDAbTestsByIDSegmentsByIDDefault struct {
	_statusCode int

	Payload *models.AbTestSegment
}

// Code gets the status code for the patch sites by ID ab tests by ID segments by ID default response
func (o *PatchSitesByIDAbTestsByIDSegmentsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchSitesByIDAbTestsByIDSegmentsByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /sites/{site_id}/ab_tests/{id}/segments/{segment_id}][%d] patchSitesByIDAbTestsByIDSegmentsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchSitesByIDAbTestsByIDSegmentsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AbTestSegment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
