// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// PutSitesByIDCampaignsByIDSortingRulesByIDByIDReader is a Reader for the PutSitesByIDCampaignsByIDSortingRulesByIDByID structure.
type PutSitesByIDCampaignsByIDSortingRulesByIDByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent creates a PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent with default headers values
func NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent() *PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent {
	return &PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent{}
}

/*PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent handles this case with default header values.

PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent put sites by Id campaigns by Id sorting rules by Id by Id no content
*/
type PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent struct {
}

func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}][%d] putSitesByIdCampaignsByIdSortingRulesByIdByIdNoContent ", 204)
}

func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest creates a PutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest with default headers values
func NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest() *PutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest {
	return &PutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest{}
}

/*PutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest handles this case with default header values.

Indicates that the category with the given category ID is not found.
*/
type PutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest struct {
}

func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}][%d] putSitesByIdCampaignsByIdSortingRulesByIdByIdBadRequest ", 400)
}

func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound creates a PutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound with default headers values
func NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound() *PutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound {
	return &PutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound{}
}

/*PutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound handles this case with default header values.

thrown when site with the given site id is not found. or Indicates that the campaign with the given campaign ID is not found. or Indicates that the sorting rule with the given sorting rule ID is not found.
*/
type PutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound struct {
}

func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}][%d] putSitesByIdCampaignsByIdSortingRulesByIdByIdNotFound ", 404)
}

func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict creates a PutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict with default headers values
func NewPutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict() *PutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict {
	return &PutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict{}
}

/*PutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict handles this case with default header values.

Indicates that there is a sorting rule already assigned to the given campaign ID and category ID.
              The sorting rule with the given sorting rule ID cannot be assigned to the same campaign ID and category ID.
*/
type PutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict struct {
}

func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/campaigns/{campaign_id}/sorting_rules/{sorting_rule_id}/{category_id}][%d] putSitesByIdCampaignsByIdSortingRulesByIdByIdConflict ", 409)
}

func (o *PutSitesByIDCampaignsByIDSortingRulesByIDByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
