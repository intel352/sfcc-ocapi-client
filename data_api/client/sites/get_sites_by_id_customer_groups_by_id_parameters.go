// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitesByIDCustomerGroupsByIDParams creates a new GetSitesByIDCustomerGroupsByIDParams object
// with the default values initialized.
func NewGetSitesByIDCustomerGroupsByIDParams() *GetSitesByIDCustomerGroupsByIDParams {
	var ()
	return &GetSitesByIDCustomerGroupsByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitesByIDCustomerGroupsByIDParamsWithTimeout creates a new GetSitesByIDCustomerGroupsByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitesByIDCustomerGroupsByIDParamsWithTimeout(timeout time.Duration) *GetSitesByIDCustomerGroupsByIDParams {
	var ()
	return &GetSitesByIDCustomerGroupsByIDParams{

		timeout: timeout,
	}
}

// NewGetSitesByIDCustomerGroupsByIDParamsWithContext creates a new GetSitesByIDCustomerGroupsByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitesByIDCustomerGroupsByIDParamsWithContext(ctx context.Context) *GetSitesByIDCustomerGroupsByIDParams {
	var ()
	return &GetSitesByIDCustomerGroupsByIDParams{

		Context: ctx,
	}
}

// NewGetSitesByIDCustomerGroupsByIDParamsWithHTTPClient creates a new GetSitesByIDCustomerGroupsByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitesByIDCustomerGroupsByIDParamsWithHTTPClient(client *http.Client) *GetSitesByIDCustomerGroupsByIDParams {
	var ()
	return &GetSitesByIDCustomerGroupsByIDParams{
		HTTPClient: client,
	}
}

/*GetSitesByIDCustomerGroupsByIDParams contains all the parameters to send to the API endpoint
for the get sites by ID customer groups by ID operation typically these are written to a http.Request
*/
type GetSitesByIDCustomerGroupsByIDParams struct {

	/*ID
	  The id of the requested customer group.

	*/
	ID string
	/*Select*/
	Select *string
	/*SiteID
	  The id of the site.

	*/
	SiteID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) WithTimeout(timeout time.Duration) *GetSitesByIDCustomerGroupsByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) WithContext(ctx context.Context) *GetSitesByIDCustomerGroupsByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) WithHTTPClient(client *http.Client) *GetSitesByIDCustomerGroupsByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) WithID(id string) *GetSitesByIDCustomerGroupsByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) SetID(id string) {
	o.ID = id
}

// WithSelect adds the selectVar to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) WithSelect(selectVar *string) *GetSitesByIDCustomerGroupsByIDParams {
	o.SetSelect(selectVar)
	return o
}

// SetSelect adds the select to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) SetSelect(selectVar *string) {
	o.Select = selectVar
}

// WithSiteID adds the siteID to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) WithSiteID(siteID string) *GetSitesByIDCustomerGroupsByIDParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the get sites by ID customer groups by ID params
func (o *GetSitesByIDCustomerGroupsByIDParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitesByIDCustomerGroupsByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Select != nil {

		// query param select
		var qrSelect string
		if o.Select != nil {
			qrSelect = *o.Select
		}
		qSelect := qrSelect
		if qSelect != "" {
			if err := r.SetQueryParam("select", qSelect); err != nil {
				return err
			}
		}

	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
