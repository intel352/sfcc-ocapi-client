// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchSitesByIDGiftCertificatesByIDReader is a Reader for the PatchSitesByIDGiftCertificatesByID structure.
type PatchSitesByIDGiftCertificatesByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSitesByIDGiftCertificatesByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchSitesByIDGiftCertificatesByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchSitesByIDGiftCertificatesByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchSitesByIDGiftCertificatesByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchSitesByIDGiftCertificatesByIDBadRequest creates a PatchSitesByIDGiftCertificatesByIDBadRequest with default headers values
func NewPatchSitesByIDGiftCertificatesByIDBadRequest() *PatchSitesByIDGiftCertificatesByIDBadRequest {
	return &PatchSitesByIDGiftCertificatesByIDBadRequest{}
}

/*PatchSitesByIDGiftCertificatesByIDBadRequest handles this case with default header values.

If recipient email address is invalid or If gift certificate status specified is invalid
*/
type PatchSitesByIDGiftCertificatesByIDBadRequest struct {
}

func (o *PatchSitesByIDGiftCertificatesByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /sites/{site_id}/gift_certificates/{merchant_id}][%d] patchSitesByIdGiftCertificatesByIdBadRequest ", 400)
}

func (o *PatchSitesByIDGiftCertificatesByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSitesByIDGiftCertificatesByIDNotFound creates a PatchSitesByIDGiftCertificatesByIDNotFound with default headers values
func NewPatchSitesByIDGiftCertificatesByIDNotFound() *PatchSitesByIDGiftCertificatesByIDNotFound {
	return &PatchSitesByIDGiftCertificatesByIDNotFound{}
}

/*PatchSitesByIDGiftCertificatesByIDNotFound handles this case with default header values.

Thrown in case the gift certificate does not exist matching the given merchant id
*/
type PatchSitesByIDGiftCertificatesByIDNotFound struct {
}

func (o *PatchSitesByIDGiftCertificatesByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /sites/{site_id}/gift_certificates/{merchant_id}][%d] patchSitesByIdGiftCertificatesByIdNotFound ", 404)
}

func (o *PatchSitesByIDGiftCertificatesByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSitesByIDGiftCertificatesByIDDefault creates a PatchSitesByIDGiftCertificatesByIDDefault with default headers values
func NewPatchSitesByIDGiftCertificatesByIDDefault(code int) *PatchSitesByIDGiftCertificatesByIDDefault {
	return &PatchSitesByIDGiftCertificatesByIDDefault{
		_statusCode: code,
	}
}

/*PatchSitesByIDGiftCertificatesByIDDefault handles this case with default header values.

PatchSitesByIDGiftCertificatesByIDDefault patch sites by ID gift certificates by ID default
*/
type PatchSitesByIDGiftCertificatesByIDDefault struct {
	_statusCode int

	Payload *models.GiftCertificate
}

// Code gets the status code for the patch sites by ID gift certificates by ID default response
func (o *PatchSitesByIDGiftCertificatesByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchSitesByIDGiftCertificatesByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /sites/{site_id}/gift_certificates/{merchant_id}][%d] patchSitesByIDGiftCertificatesByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchSitesByIDGiftCertificatesByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GiftCertificate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
