// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitesByIDCouponsParams creates a new GetSitesByIDCouponsParams object
// with the default values initialized.
func NewGetSitesByIDCouponsParams() *GetSitesByIDCouponsParams {
	var ()
	return &GetSitesByIDCouponsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitesByIDCouponsParamsWithTimeout creates a new GetSitesByIDCouponsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitesByIDCouponsParamsWithTimeout(timeout time.Duration) *GetSitesByIDCouponsParams {
	var ()
	return &GetSitesByIDCouponsParams{

		timeout: timeout,
	}
}

// NewGetSitesByIDCouponsParamsWithContext creates a new GetSitesByIDCouponsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitesByIDCouponsParamsWithContext(ctx context.Context) *GetSitesByIDCouponsParams {
	var ()
	return &GetSitesByIDCouponsParams{

		Context: ctx,
	}
}

// NewGetSitesByIDCouponsParamsWithHTTPClient creates a new GetSitesByIDCouponsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitesByIDCouponsParamsWithHTTPClient(client *http.Client) *GetSitesByIDCouponsParams {
	var ()
	return &GetSitesByIDCouponsParams{
		HTTPClient: client,
	}
}

/*GetSitesByIDCouponsParams contains all the parameters to send to the API endpoint
for the get sites by ID coupons operation typically these are written to a http.Request
*/
type GetSitesByIDCouponsParams struct {

	/*Count*/
	Count *int32
	/*Expand*/
	Expand []string
	/*Select*/
	Select *string
	/*SiteID
	  The site context.

	*/
	SiteID string
	/*Start*/
	Start *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) WithTimeout(timeout time.Duration) *GetSitesByIDCouponsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) WithContext(ctx context.Context) *GetSitesByIDCouponsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) WithHTTPClient(client *http.Client) *GetSitesByIDCouponsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) WithCount(count *int32) *GetSitesByIDCouponsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) SetCount(count *int32) {
	o.Count = count
}

// WithExpand adds the expand to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) WithExpand(expand []string) *GetSitesByIDCouponsParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithSelect adds the selectVar to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) WithSelect(selectVar *string) *GetSitesByIDCouponsParams {
	o.SetSelect(selectVar)
	return o
}

// SetSelect adds the select to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) SetSelect(selectVar *string) {
	o.Select = selectVar
}

// WithSiteID adds the siteID to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) WithSiteID(siteID string) *GetSitesByIDCouponsParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WithStart adds the start to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) WithStart(start *int32) *GetSitesByIDCouponsParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get sites by ID coupons params
func (o *GetSitesByIDCouponsParams) SetStart(start *int32) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitesByIDCouponsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.Select != nil {

		// query param select
		var qrSelect string
		if o.Select != nil {
			qrSelect = *o.Select
		}
		qSelect := qrSelect
		if qSelect != "" {
			if err := r.SetQueryParam("select", qSelect); err != nil {
				return err
			}
		}

	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	if o.Start != nil {

		// query param start
		var qrStart int32
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt32(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
