// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutSitesByIDCustomerGroupsByIDReader is a Reader for the PutSitesByIDCustomerGroupsByID structure.
type PutSitesByIDCustomerGroupsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSitesByIDCustomerGroupsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutSitesByIDCustomerGroupsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutSitesByIDCustomerGroupsByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutSitesByIDCustomerGroupsByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutSitesByIDCustomerGroupsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutSitesByIDCustomerGroupsByIDBadRequest creates a PutSitesByIDCustomerGroupsByIDBadRequest with default headers values
func NewPutSitesByIDCustomerGroupsByIDBadRequest() *PutSitesByIDCustomerGroupsByIDBadRequest {
	return &PutSitesByIDCustomerGroupsByIDBadRequest{}
}

/*PutSitesByIDCustomerGroupsByIDBadRequest handles this case with default header values.

Thrown when there are system error in creating the customer group. or Thrown when id in query parameter is different from the id in the body.
*/
type PutSitesByIDCustomerGroupsByIDBadRequest struct {
}

func (o *PutSitesByIDCustomerGroupsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/customer_groups/{id}][%d] putSitesByIdCustomerGroupsByIdBadRequest ", 400)
}

func (o *PutSitesByIDCustomerGroupsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDCustomerGroupsByIDForbidden creates a PutSitesByIDCustomerGroupsByIDForbidden with default headers values
func NewPutSitesByIDCustomerGroupsByIDForbidden() *PutSitesByIDCustomerGroupsByIDForbidden {
	return &PutSitesByIDCustomerGroupsByIDForbidden{}
}

/*PutSitesByIDCustomerGroupsByIDForbidden handles this case with default header values.

Thrown when attempting to create the system customer group.
*/
type PutSitesByIDCustomerGroupsByIDForbidden struct {
}

func (o *PutSitesByIDCustomerGroupsByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/customer_groups/{id}][%d] putSitesByIdCustomerGroupsByIdForbidden ", 403)
}

func (o *PutSitesByIDCustomerGroupsByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDCustomerGroupsByIDConflict creates a PutSitesByIDCustomerGroupsByIDConflict with default headers values
func NewPutSitesByIDCustomerGroupsByIDConflict() *PutSitesByIDCustomerGroupsByIDConflict {
	return &PutSitesByIDCustomerGroupsByIDConflict{}
}

/*PutSitesByIDCustomerGroupsByIDConflict handles this case with default header values.

if a customer group exists already in the site with the given identifier.
*/
type PutSitesByIDCustomerGroupsByIDConflict struct {
}

func (o *PutSitesByIDCustomerGroupsByIDConflict) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/customer_groups/{id}][%d] putSitesByIdCustomerGroupsByIdConflict ", 409)
}

func (o *PutSitesByIDCustomerGroupsByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutSitesByIDCustomerGroupsByIDDefault creates a PutSitesByIDCustomerGroupsByIDDefault with default headers values
func NewPutSitesByIDCustomerGroupsByIDDefault(code int) *PutSitesByIDCustomerGroupsByIDDefault {
	return &PutSitesByIDCustomerGroupsByIDDefault{
		_statusCode: code,
	}
}

/*PutSitesByIDCustomerGroupsByIDDefault handles this case with default header values.

PutSitesByIDCustomerGroupsByIDDefault put sites by ID customer groups by ID default
*/
type PutSitesByIDCustomerGroupsByIDDefault struct {
	_statusCode int

	Payload *models.CustomerGroup
}

// Code gets the status code for the put sites by ID customer groups by ID default response
func (o *PutSitesByIDCustomerGroupsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutSitesByIDCustomerGroupsByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/customer_groups/{id}][%d] putSitesByIDCustomerGroupsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutSitesByIDCustomerGroupsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomerGroup)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
