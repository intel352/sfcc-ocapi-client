// Code generated by go-swagger; DO NOT EDIT.

package custom_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchCustomObjectsByIDByIDReader is a Reader for the PatchCustomObjectsByIDByID structure.
type PatchCustomObjectsByIDByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCustomObjectsByIDByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchCustomObjectsByIDByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchCustomObjectsByIDByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchCustomObjectsByIDByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchCustomObjectsByIDByIDBadRequest creates a PatchCustomObjectsByIDByIDBadRequest with default headers values
func NewPatchCustomObjectsByIDByIDBadRequest() *PatchCustomObjectsByIDByIDBadRequest {
	return &PatchCustomObjectsByIDByIDBadRequest{}
}

/*PatchCustomObjectsByIDByIDBadRequest handles this case with default header values.

If the object key must be an integer, but the path parameter has an invalid format
*/
type PatchCustomObjectsByIDByIDBadRequest struct {
}

func (o *PatchCustomObjectsByIDByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /custom_objects/{object_type}/{key}][%d] patchCustomObjectsByIdByIdBadRequest ", 400)
}

func (o *PatchCustomObjectsByIDByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCustomObjectsByIDByIDNotFound creates a PatchCustomObjectsByIDByIDNotFound with default headers values
func NewPatchCustomObjectsByIDByIDNotFound() *PatchCustomObjectsByIDByIDNotFound {
	return &PatchCustomObjectsByIDByIDNotFound{}
}

/*PatchCustomObjectsByIDByIDNotFound handles this case with default header values.

For an unknown object key or For an unknown object type ID
*/
type PatchCustomObjectsByIDByIDNotFound struct {
}

func (o *PatchCustomObjectsByIDByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /custom_objects/{object_type}/{key}][%d] patchCustomObjectsByIdByIdNotFound ", 404)
}

func (o *PatchCustomObjectsByIDByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCustomObjectsByIDByIDDefault creates a PatchCustomObjectsByIDByIDDefault with default headers values
func NewPatchCustomObjectsByIDByIDDefault(code int) *PatchCustomObjectsByIDByIDDefault {
	return &PatchCustomObjectsByIDByIDDefault{
		_statusCode: code,
	}
}

/*PatchCustomObjectsByIDByIDDefault handles this case with default header values.

PatchCustomObjectsByIDByIDDefault patch custom objects by ID by ID default
*/
type PatchCustomObjectsByIDByIDDefault struct {
	_statusCode int

	Payload *models.CustomObject
}

// Code gets the status code for the patch custom objects by ID by ID default response
func (o *PatchCustomObjectsByIDByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchCustomObjectsByIDByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /custom_objects/{object_type}/{key}][%d] patchCustomObjectsByIDByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchCustomObjectsByIDByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
