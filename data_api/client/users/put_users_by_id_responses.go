// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutUsersByIDReader is a Reader for the PutUsersByID structure.
type PutUsersByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUsersByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutUsersByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutUsersByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutUsersByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutUsersByIDBadRequest creates a PutUsersByIDBadRequest with default headers values
func NewPutUsersByIDBadRequest() *PutUsersByIDBadRequest {
	return &PutUsersByIDBadRequest{}
}

/*PutUsersByIDBadRequest handles this case with default header values.

If the password doesn't meet the acceptance crtiteria of a user password. or If the login in the request URL is different from the login in the request body. or If either the Preferred UI Locale or the Preferred Data Locale are unknown. or If password or external id of the user are invalid. or If another user with the same external id already exists. or If creation of a local Business Manager user is not allowed with the current server settings.
*/
type PutUsersByIDBadRequest struct {
}

func (o *PutUsersByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{login}][%d] putUsersByIdBadRequest ", 400)
}

func (o *PutUsersByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersByIDForbidden creates a PutUsersByIDForbidden with default headers values
func NewPutUsersByIDForbidden() *PutUsersByIDForbidden {
	return &PutUsersByIDForbidden{}
}

/*PutUsersByIDForbidden handles this case with default header values.

If creation or replacement of a user with the given login is not allowed.
*/
type PutUsersByIDForbidden struct {
}

func (o *PutUsersByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{login}][%d] putUsersByIdForbidden ", 403)
}

func (o *PutUsersByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutUsersByIDDefault creates a PutUsersByIDDefault with default headers values
func NewPutUsersByIDDefault(code int) *PutUsersByIDDefault {
	return &PutUsersByIDDefault{
		_statusCode: code,
	}
}

/*PutUsersByIDDefault handles this case with default header values.

PutUsersByIDDefault put users by ID default
*/
type PutUsersByIDDefault struct {
	_statusCode int

	Payload *models.User
}

// Code gets the status code for the put users by ID default response
func (o *PutUsersByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutUsersByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /users/{login}][%d] putUsersByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutUsersByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
