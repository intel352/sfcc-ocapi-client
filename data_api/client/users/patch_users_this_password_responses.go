// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchUsersThisPasswordReader is a Reader for the PatchUsersThisPassword structure.
type PatchUsersThisPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUsersThisPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchUsersThisPasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPatchUsersThisPasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchUsersThisPasswordDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchUsersThisPasswordBadRequest creates a PatchUsersThisPasswordBadRequest with default headers values
func NewPatchUsersThisPasswordBadRequest() *PatchUsersThisPasswordBadRequest {
	return &PatchUsersThisPasswordBadRequest{}
}

/*PatchUsersThisPasswordBadRequest handles this case with default header values.

If the new password doesn't meet the acceptance crtiteria of a user password. or If the same new password was set recently before. or If the provided current user password is invalid.
*/
type PatchUsersThisPasswordBadRequest struct {
}

func (o *PatchUsersThisPasswordBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /users/this/password][%d] patchUsersThisPasswordBadRequest ", 400)
}

func (o *PatchUsersThisPasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersThisPasswordUnauthorized creates a PatchUsersThisPasswordUnauthorized with default headers values
func NewPatchUsersThisPasswordUnauthorized() *PatchUsersThisPasswordUnauthorized {
	return &PatchUsersThisPasswordUnauthorized{}
}

/*PatchUsersThisPasswordUnauthorized handles this case with default header values.

If the user provided by the OAuth token cannot be found. or If the user profile is currently locked.
*/
type PatchUsersThisPasswordUnauthorized struct {
}

func (o *PatchUsersThisPasswordUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /users/this/password][%d] patchUsersThisPasswordUnauthorized ", 401)
}

func (o *PatchUsersThisPasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersThisPasswordDefault creates a PatchUsersThisPasswordDefault with default headers values
func NewPatchUsersThisPasswordDefault(code int) *PatchUsersThisPasswordDefault {
	return &PatchUsersThisPasswordDefault{
		_statusCode: code,
	}
}

/*PatchUsersThisPasswordDefault handles this case with default header values.

PatchUsersThisPasswordDefault patch users this password default
*/
type PatchUsersThisPasswordDefault struct {
	_statusCode int

	Payload *models.User
}

// Code gets the status code for the patch users this password default response
func (o *PatchUsersThisPasswordDefault) Code() int {
	return o._statusCode
}

func (o *PatchUsersThisPasswordDefault) Error() string {
	return fmt.Sprintf("[PATCH /users/this/password][%d] patchUsersThisPassword default  %+v", o._statusCode, o.Payload)
}

func (o *PatchUsersThisPasswordDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
