// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchUsersByIDReader is a Reader for the PatchUsersByID structure.
type PatchUsersByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchUsersByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchUsersByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPatchUsersByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchUsersByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchUsersByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchUsersByIDBadRequest creates a PatchUsersByIDBadRequest with default headers values
func NewPatchUsersByIDBadRequest() *PatchUsersByIDBadRequest {
	return &PatchUsersByIDBadRequest{}
}

/*PatchUsersByIDBadRequest handles this case with default header values.

If the login in the request URL is different from the login in the request body. or If either the Preferred UI Locale or the Preferred Data Locale are unknown. or If another user with the same external id already exists. or If the external id is explicitly set to null for an externally managed user
*/
type PatchUsersByIDBadRequest struct {
}

func (o *PatchUsersByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /users/{login}][%d] patchUsersByIdBadRequest ", 400)
}

func (o *PatchUsersByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersByIDForbidden creates a PatchUsersByIDForbidden with default headers values
func NewPatchUsersByIDForbidden() *PatchUsersByIDForbidden {
	return &PatchUsersByIDForbidden{}
}

/*PatchUsersByIDForbidden handles this case with default header values.

If creation or replacement of a user with the given login is not allowed.
*/
type PatchUsersByIDForbidden struct {
}

func (o *PatchUsersByIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /users/{login}][%d] patchUsersByIdForbidden ", 403)
}

func (o *PatchUsersByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersByIDNotFound creates a PatchUsersByIDNotFound with default headers values
func NewPatchUsersByIDNotFound() *PatchUsersByIDNotFound {
	return &PatchUsersByIDNotFound{}
}

/*PatchUsersByIDNotFound handles this case with default header values.

If no user with the specified login could be found.
*/
type PatchUsersByIDNotFound struct {
}

func (o *PatchUsersByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /users/{login}][%d] patchUsersByIdNotFound ", 404)
}

func (o *PatchUsersByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchUsersByIDDefault creates a PatchUsersByIDDefault with default headers values
func NewPatchUsersByIDDefault(code int) *PatchUsersByIDDefault {
	return &PatchUsersByIDDefault{
		_statusCode: code,
	}
}

/*PatchUsersByIDDefault handles this case with default header values.

PatchUsersByIDDefault patch users by ID default
*/
type PatchUsersByIDDefault struct {
	_statusCode int

	Payload *models.User
}

// Code gets the status code for the patch users by ID default response
func (o *PatchUsersByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchUsersByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /users/{login}][%d] patchUsersByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchUsersByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
