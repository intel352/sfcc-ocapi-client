// Code generated by go-swagger; DO NOT EDIT.

package site_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new site preferences API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for site preferences API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByID Get a preference across sites in the specified preference group and instance.
*/
func (a *Client) GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByID(params *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitePreferencesPreferenceGroupsByIDByIDPreferencesByID",
		Method:             "GET",
		PathPattern:        "/site_preferences/preference_groups/{group_id}/{instance_type}/preferences/{preference_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostSitePreferencesPreferenceGroupsByIDByIDPreferenceSearch Search preferences across sites in the specified preference group and instance.

 The query attribute specifies a complex query that can be used to narrow down the search.

 The following is a list of searchable fields:


 id - String
 display_name - Localized String
 description - Localized String
 value_type* - one of {string, int, double, text, html, date, image, boolean, money, quantity, datetime, email, password, set_of_string, set_of_int, set_of_double, enum_of_string, enum_of_int}


 * value_type can only be joined with other attributes using a conjunction (AND).
 Note that only searchable attributes can be used in sorting.
*/
func (a *Client) PostSitePreferencesPreferenceGroupsByIDByIDPreferenceSearch(params *PostSitePreferencesPreferenceGroupsByIDByIDPreferenceSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitePreferencesPreferenceGroupsByIDByIDPreferenceSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSitePreferencesPreferenceGroupsByIDByIDPreferenceSearch",
		Method:             "POST",
		PathPattern:        "/site_preferences/preference_groups/{group_id}/{instance_type}/preference_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSitePreferencesPreferenceGroupsByIDByIDPreferenceSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
