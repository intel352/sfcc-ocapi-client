// Code generated by go-swagger; DO NOT EDIT.

package site_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams creates a new GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams object
// with the default values initialized.
func NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams() *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	var ()
	return &GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParamsWithTimeout creates a new GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParamsWithTimeout(timeout time.Duration) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	var ()
	return &GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams{

		timeout: timeout,
	}
}

// NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParamsWithContext creates a new GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParamsWithContext(ctx context.Context) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	var ()
	return &GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams{

		Context: ctx,
	}
}

// NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParamsWithHTTPClient creates a new GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParamsWithHTTPClient(client *http.Client) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	var ()
	return &GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams{
		HTTPClient: client,
	}
}

/*GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams contains all the parameters to send to the API endpoint
for the get site preferences preference groups by ID by ID preferences by ID operation typically these are written to a http.Request
*/
type GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams struct {

	/*GroupID
	  The ID of the preference group.

	*/
	GroupID string
	/*InstanceType
	  An instance type, one of {staging,development,sandbox,production}.

	*/
	InstanceType string
	/*MaskPasswords*/
	MaskPasswords *bool
	/*PreferenceID
	  The ID of the preference to retrieve.

	*/
	PreferenceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) WithTimeout(timeout time.Duration) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) WithContext(ctx context.Context) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) WithHTTPClient(client *http.Client) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupID adds the groupID to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) WithGroupID(groupID string) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) SetGroupID(groupID string) {
	o.GroupID = groupID
}

// WithInstanceType adds the instanceType to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) WithInstanceType(instanceType string) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	o.SetInstanceType(instanceType)
	return o
}

// SetInstanceType adds the instanceType to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) SetInstanceType(instanceType string) {
	o.InstanceType = instanceType
}

// WithMaskPasswords adds the maskPasswords to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) WithMaskPasswords(maskPasswords *bool) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	o.SetMaskPasswords(maskPasswords)
	return o
}

// SetMaskPasswords adds the maskPasswords to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) SetMaskPasswords(maskPasswords *bool) {
	o.MaskPasswords = maskPasswords
}

// WithPreferenceID adds the preferenceID to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) WithPreferenceID(preferenceID string) *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams {
	o.SetPreferenceID(preferenceID)
	return o
}

// SetPreferenceID adds the preferenceId to the get site preferences preference groups by ID by ID preferences by ID params
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) SetPreferenceID(preferenceID string) {
	o.PreferenceID = preferenceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitePreferencesPreferenceGroupsByIDByIDPreferencesByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param group_id
	if err := r.SetPathParam("group_id", o.GroupID); err != nil {
		return err
	}

	// path param instance_type
	if err := r.SetPathParam("instance_type", o.InstanceType); err != nil {
		return err
	}

	if o.MaskPasswords != nil {

		// query param mask_passwords
		var qrMaskPasswords bool
		if o.MaskPasswords != nil {
			qrMaskPasswords = *o.MaskPasswords
		}
		qMaskPasswords := swag.FormatBool(qrMaskPasswords)
		if qMaskPasswords != "" {
			if err := r.SetQueryParam("mask_passwords", qMaskPasswords); err != nil {
				return err
			}
		}

	}

	// path param preference_id
	if err := r.SetPathParam("preference_id", o.PreferenceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
