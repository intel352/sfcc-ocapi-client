// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchSettingsLoggingCustomReader is a Reader for the PatchSettingsLoggingCustom structure.
type PatchSettingsLoggingCustomReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSettingsLoggingCustomReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchSettingsLoggingCustomBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchSettingsLoggingCustomDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchSettingsLoggingCustomBadRequest creates a PatchSettingsLoggingCustomBadRequest with default headers values
func NewPatchSettingsLoggingCustomBadRequest() *PatchSettingsLoggingCustomBadRequest {
	return &PatchSettingsLoggingCustomBadRequest{}
}

/*PatchSettingsLoggingCustomBadRequest handles this case with default header values.

if the email addresses are invalid. or if one of the categories names are invalid. or if on a production instance the configured level is DEBUG.
*/
type PatchSettingsLoggingCustomBadRequest struct {
}

func (o *PatchSettingsLoggingCustomBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /settings/logging/custom][%d] patchSettingsLoggingCustomBadRequest ", 400)
}

func (o *PatchSettingsLoggingCustomBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchSettingsLoggingCustomDefault creates a PatchSettingsLoggingCustomDefault with default headers values
func NewPatchSettingsLoggingCustomDefault(code int) *PatchSettingsLoggingCustomDefault {
	return &PatchSettingsLoggingCustomDefault{
		_statusCode: code,
	}
}

/*PatchSettingsLoggingCustomDefault handles this case with default header values.

PatchSettingsLoggingCustomDefault patch settings logging custom default
*/
type PatchSettingsLoggingCustomDefault struct {
	_statusCode int

	Payload *models.CustomLogSettings
}

// Code gets the status code for the patch settings logging custom default response
func (o *PatchSettingsLoggingCustomDefault) Code() int {
	return o._statusCode
}

func (o *PatchSettingsLoggingCustomDefault) Error() string {
	return fmt.Sprintf("[PATCH /settings/logging/custom][%d] patchSettingsLoggingCustom default  %+v", o._statusCode, o.Payload)
}

func (o *PatchSettingsLoggingCustomDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomLogSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
