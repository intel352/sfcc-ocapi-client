// Code generated by go-swagger; DO NOT EDIT.

package site_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PostSiteSearchReader is a Reader for the PostSiteSearch structure.
type PostSiteSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSiteSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPostSiteSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostSiteSearchDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostSiteSearchBadRequest creates a PostSiteSearchBadRequest with default headers values
func NewPostSiteSearchBadRequest() *PostSiteSearchBadRequest {
	return &PostSiteSearchBadRequest{}
}

/*PostSiteSearchBadRequest handles this case with default header values.

Thrown if the query is ill-formed. or Thrown if the invalid value is entered for access_type
*/
type PostSiteSearchBadRequest struct {
}

func (o *PostSiteSearchBadRequest) Error() string {
	return fmt.Sprintf("[POST /site_search][%d] postSiteSearchBadRequest ", 400)
}

func (o *PostSiteSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostSiteSearchDefault creates a PostSiteSearchDefault with default headers values
func NewPostSiteSearchDefault(code int) *PostSiteSearchDefault {
	return &PostSiteSearchDefault{
		_statusCode: code,
	}
}

/*PostSiteSearchDefault handles this case with default header values.

PostSiteSearchDefault post site search default
*/
type PostSiteSearchDefault struct {
	_statusCode int

	Payload *models.SiteSearchResult
}

// Code gets the status code for the post site search default response
func (o *PostSiteSearchDefault) Code() int {
	return o._statusCode
}

func (o *PostSiteSearchDefault) Error() string {
	return fmt.Sprintf("[POST /site_search][%d] postSiteSearch default  %+v", o._statusCode, o.Payload)
}

func (o *PostSiteSearchDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SiteSearchResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
