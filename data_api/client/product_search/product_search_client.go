// Code generated by go-swagger; DO NOT EDIT.

package product_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new product search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for product search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostProductSearch Searches for products.

 The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped
 into different buckets.  These are the list of searchable attributes with their corresponding buckets:

 Main:

    id - String
    name - String
    online - SiteSpecific Boolean
    searchable - SiteSpecific Boolean
    valid_from - SiteSpefic DateTime
    valid_to - SiteSpecfic DateTime
    type - ProductType
    creation_date - DateTime

 Catalog:

    catalog_id - String

 Category:

    category_id - String

 Special:

    type - {"item", "set, "bundle", "master", "part_of_product_set", "bundled", "variant", "variation_group", "option", "retail_set", "part_of_retail_set"}


 The sortable properties are:

 id - String
 name - String
 creation_date - DateTime


 Note that catalog_id is the id of the catalog to which products are assigned to.

 Only attributes in the same bucket can be joined using a disjunction (OR).
 For instance, when joining id and catalog_id above, only a conjunction is allowed (AND), whereas id
 and searchable can be joined using a disjunction because they are in the same bucket.  If an attribute
 is used in a disjunction (OR) that violates this rule, an exception will be thrown.

 The product search retrieves additional properties of the product when expansions are used.
	The available expand attribute values are:

        	'all' will retrieve all the product properties.
          'availability' will retrieve the following properties:
            ats
            in_stock
            online

          'categories' will retrieve the following properties:
            assigned_categories

          'images' will retrieve the following properties:
            image

			'all_images' used with images will retrieve the following properties:
            image
            image_groups

          'prices' will retrieve the following properties:
            price
            price_currency

          'sets' will retrieve the following properties:
            set_products
            product_sets

          'bundles' will retrieve the following properties:
            product_bundles
            bundled_products




*/
func (a *Client) PostProductSearch(params *PostProductSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProductSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postProductSearch",
		Method:             "POST",
		PathPattern:        "/product_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProductSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
