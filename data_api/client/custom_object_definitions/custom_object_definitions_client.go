// Code generated by go-swagger; DO NOT EDIT.

package custom_object_definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new custom object definitions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for custom object definitions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCustomObjectDefinitionsByIDAttributeDefinitionsByID Deletes the attribute definition by ID
*/
func (a *Client) DeleteCustomObjectDefinitionsByIDAttributeDefinitionsByID(params *DeleteCustomObjectDefinitionsByIDAttributeDefinitionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomObjectDefinitionsByIDAttributeDefinitionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomObjectDefinitionsByIDAttributeDefinitionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomObjectDefinitionsByIDAttributeDefinitionsByID",
		Method:             "DELETE",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_definitions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomObjectDefinitionsByIDAttributeDefinitionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomObjectDefinitionsByIDAttributeDefinitionsByIDNoContent), nil

}

/*
DeleteCustomObjectDefinitionsByIDAttributeGroupsByID Deletes the attribute group by ID
*/
func (a *Client) DeleteCustomObjectDefinitionsByIDAttributeGroupsByID(params *DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomObjectDefinitionsByIDAttributeGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomObjectDefinitionsByIDAttributeGroupsByID",
		Method:             "DELETE",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDNoContent), nil

}

/*
DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID Un-assign an attribute definition from an attribute group.
*/
func (a *Client) DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID(params *DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID",
		Method:             "DELETE",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_groups/{group_id}/attribute_definitions/{def_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDNoContent), nil

}

/*
GetCustomObjectDefinitionsByIDAttributeDefinitions Action to get all the attribute definitions with no filtering.
*/
func (a *Client) GetCustomObjectDefinitionsByIDAttributeDefinitions(params *GetCustomObjectDefinitionsByIDAttributeDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomObjectDefinitionsByIDAttributeDefinitionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomObjectDefinitionsByIDAttributeDefinitions",
		Method:             "GET",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_definitions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomObjectDefinitionsByIDAttributeDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCustomObjectDefinitionsByIDAttributeDefinitionsByID Action to get attribute definition information.
*/
func (a *Client) GetCustomObjectDefinitionsByIDAttributeDefinitionsByID(params *GetCustomObjectDefinitionsByIDAttributeDefinitionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomObjectDefinitionsByIDAttributeDefinitionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomObjectDefinitionsByIDAttributeDefinitionsByID",
		Method:             "GET",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_definitions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomObjectDefinitionsByIDAttributeDefinitionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCustomObjectDefinitionsByIDAttributeGroups Action to get all the attribute groups with no filtering.
*/
func (a *Client) GetCustomObjectDefinitionsByIDAttributeGroups(params *GetCustomObjectDefinitionsByIDAttributeGroupsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomObjectDefinitionsByIDAttributeGroupsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomObjectDefinitionsByIDAttributeGroups",
		Method:             "GET",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_groups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomObjectDefinitionsByIDAttributeGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCustomObjectDefinitionsByIDAttributeGroupsByID Action to get attribute group information.
*/
func (a *Client) GetCustomObjectDefinitionsByIDAttributeGroupsByID(params *GetCustomObjectDefinitionsByIDAttributeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomObjectDefinitionsByIDAttributeGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCustomObjectDefinitionsByIDAttributeGroupsByID",
		Method:             "GET",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomObjectDefinitionsByIDAttributeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCustomObjectDefinitionsByIDAttributeDefinitionsByID Updates the attribute definition with the specified information.
*/
func (a *Client) PatchCustomObjectDefinitionsByIDAttributeDefinitionsByID(params *PatchCustomObjectDefinitionsByIDAttributeDefinitionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCustomObjectDefinitionsByIDAttributeDefinitionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCustomObjectDefinitionsByIDAttributeDefinitionsByID",
		Method:             "PATCH",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_definitions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCustomObjectDefinitionsByIDAttributeDefinitionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCustomObjectDefinitionsByIDAttributeGroupsByID Updates the attribute group with the specified information.
*/
func (a *Client) PatchCustomObjectDefinitionsByIDAttributeGroupsByID(params *PatchCustomObjectDefinitionsByIDAttributeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCustomObjectDefinitionsByIDAttributeGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCustomObjectDefinitionsByIDAttributeGroupsByID",
		Method:             "PATCH",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCustomObjectDefinitionsByIDAttributeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostCustomObjectDefinitionsByIDAttributeDefinitionSearch Searches the attribute definitions of the specified custom object type.
 The query attribute specifies a complex query that can be used to narrow down the search. Attributes are grouped
 into different buckets.  These are the list of searchable attributes with their corresponding buckets:

 Main:

    id - String
    display_name* - Localized String
    description* - Localized String
    key - boolean
    mandatory - boolean
    searchable - boolean
    system - boolean
    visible - boolean

 Definition version:

    localizable - boolean
    site_specific - boolean
    value_type - one of {string, int, double, text, html, date, image, boolean, money, quantity, datetime, email, password, set_of_string, set_of_int, set_of_double, enum_of_string, enum_of_int, unknown}


 Only attributes in the same bucket can be joined using a disjunction (OR).
 For instance, when joining localizable and description above, only a conjunction is allowed (AND), whereas display_name
 and description can be joined using a disjunction because they are in the same bucket.  If an attribute
 is used in a disjunction (OR) that violates this rule, an exception will be thrown.

  Additionally, attribute definitions can also be searched by attribute group.
 group - String


 These attributes are not searchable or sortable for built in system attributes.  They work normally for non
 system attributes.

 Note that only searchable attributes can be used in sorting.
*/
func (a *Client) PostCustomObjectDefinitionsByIDAttributeDefinitionSearch(params *PostCustomObjectDefinitionsByIDAttributeDefinitionSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomObjectDefinitionsByIDAttributeDefinitionSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCustomObjectDefinitionsByIDAttributeDefinitionSearch",
		Method:             "POST",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_definition_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCustomObjectDefinitionsByIDAttributeDefinitionSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostCustomObjectDefinitionsByIDAttributeGroupSearch Searches for attribute groups.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 id - String
 display_name - Localized <String>
 description - Localized <String>
 position - Double
 internal - Boolean


 The output of the query can also be sorted. These are the list of sortable attributes:

 id - String
 display_name - Localized <String>
 description - Localized <String>
 position - Double
 internal - Boolean

*/
func (a *Client) PostCustomObjectDefinitionsByIDAttributeGroupSearch(params *PostCustomObjectDefinitionsByIDAttributeGroupSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomObjectDefinitionsByIDAttributeGroupSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCustomObjectDefinitionsByIDAttributeGroupSearch",
		Method:             "POST",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_group_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCustomObjectDefinitionsByIDAttributeGroupSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCustomObjectDefinitionsByIDAttributeDefinitionsByID Creates a attribute definition using the information provided.
*/
func (a *Client) PutCustomObjectDefinitionsByIDAttributeDefinitionsByID(params *PutCustomObjectDefinitionsByIDAttributeDefinitionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomObjectDefinitionsByIDAttributeDefinitionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCustomObjectDefinitionsByIDAttributeDefinitionsByID",
		Method:             "PUT",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_definitions/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCustomObjectDefinitionsByIDAttributeDefinitionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCustomObjectDefinitionsByIDAttributeGroupsByID Creates a attribute group using the information provided.
*/
func (a *Client) PutCustomObjectDefinitionsByIDAttributeGroupsByID(params *PutCustomObjectDefinitionsByIDAttributeGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomObjectDefinitionsByIDAttributeGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCustomObjectDefinitionsByIDAttributeGroupsByID",
		Method:             "PUT",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCustomObjectDefinitionsByIDAttributeGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID Assign an attribute definition to an attribute group.
*/
func (a *Client) PutCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID(params *PutCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByID",
		Method:             "PUT",
		PathPattern:        "/custom_object_definitions/{object_type}/attribute_groups/{group_id}/attribute_definitions/{def_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomObjectDefinitionsByIDAttributeGroupsByIDAttributeDefinitionsByIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
