// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new permissions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for permissions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPermissions Get application specific permissions per type.
*/
func (a *Client) GetPermissions(params *GetPermissionsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissions",
		Method:             "GET",
		PathPattern:        "/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPermissionsBm Get Business Manager permissions per type.
*/
func (a *Client) GetPermissionsBm(params *GetPermissionsBmParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsBmParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsBm",
		Method:             "GET",
		PathPattern:        "/permissions/bm",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsBmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPermissionsBmFunctional Get functional permissions per scope.
*/
func (a *Client) GetPermissionsBmFunctional(params *GetPermissionsBmFunctionalParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsBmFunctionalParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsBmFunctional",
		Method:             "GET",
		PathPattern:        "/permissions/bm/functional",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsBmFunctionalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPermissionsBmLocale Get locale permissions per scope.
*/
func (a *Client) GetPermissionsBmLocale(params *GetPermissionsBmLocaleParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsBmLocaleParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsBmLocale",
		Method:             "GET",
		PathPattern:        "/permissions/bm/locale",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsBmLocaleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPermissionsBmModule Get Business Manager module permissions per scope.
*/
func (a *Client) GetPermissionsBmModule(params *GetPermissionsBmModuleParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsBmModuleParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsBmModule",
		Method:             "GET",
		PathPattern:        "/permissions/bm/module",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsBmModuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPermissionsBmWebdav Get WebDAV permissions per scope.
*/
func (a *Client) GetPermissionsBmWebdav(params *GetPermissionsBmWebdavParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsBmWebdavParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsBmWebdav",
		Method:             "GET",
		PathPattern:        "/permissions/bm/webdav",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsBmWebdavReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPermissionsCsc Get permissions per type.
*/
func (a *Client) GetPermissionsCsc(params *GetPermissionsCscParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsCscParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsCsc",
		Method:             "GET",
		PathPattern:        "/permissions/csc",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsCscReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPermissionsCscModule Get CSC module permissions per scope.
*/
func (a *Client) GetPermissionsCscModule(params *GetPermissionsCscModuleParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsCscModuleParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPermissionsCscModule",
		Method:             "GET",
		PathPattern:        "/permissions/csc/module",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPermissionsCscModuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
