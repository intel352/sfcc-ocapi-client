// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutCatalogsByIDCategoriesByIDProductsByIDReader is a Reader for the PutCatalogsByIDCategoriesByIDProductsByID structure.
type PutCatalogsByIDCategoriesByIDProductsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCatalogsByIDCategoriesByIDProductsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutCatalogsByIDCategoriesByIDProductsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutCatalogsByIDCategoriesByIDProductsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutCatalogsByIDCategoriesByIDProductsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutCatalogsByIDCategoriesByIDProductsByIDBadRequest creates a PutCatalogsByIDCategoriesByIDProductsByIDBadRequest with default headers values
func NewPutCatalogsByIDCategoriesByIDProductsByIDBadRequest() *PutCatalogsByIDCategoriesByIDProductsByIDBadRequest {
	return &PutCatalogsByIDCategoriesByIDProductsByIDBadRequest{}
}

/*PutCatalogsByIDCategoriesByIDProductsByIDBadRequest handles this case with default header values.

if the Id in request is not the same as the ID in document.
*/
type PutCatalogsByIDCategoriesByIDProductsByIDBadRequest struct {
}

func (o *PutCatalogsByIDCategoriesByIDProductsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /catalogs/{catalog_id}/categories/{category_id}/products/{product_id}][%d] putCatalogsByIdCategoriesByIdProductsByIdBadRequest ", 400)
}

func (o *PutCatalogsByIDCategoriesByIDProductsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCatalogsByIDCategoriesByIDProductsByIDNotFound creates a PutCatalogsByIDCategoriesByIDProductsByIDNotFound with default headers values
func NewPutCatalogsByIDCategoriesByIDProductsByIDNotFound() *PutCatalogsByIDCategoriesByIDProductsByIDNotFound {
	return &PutCatalogsByIDCategoriesByIDProductsByIDNotFound{}
}

/*PutCatalogsByIDCategoriesByIDProductsByIDNotFound handles this case with default header values.

Thrown if the category does not exist matching the given id. or Thrown if the catalog does not exist matching the given id. or Thrown if the product does not exist matching the given id.
*/
type PutCatalogsByIDCategoriesByIDProductsByIDNotFound struct {
}

func (o *PutCatalogsByIDCategoriesByIDProductsByIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /catalogs/{catalog_id}/categories/{category_id}/products/{product_id}][%d] putCatalogsByIdCategoriesByIdProductsByIdNotFound ", 404)
}

func (o *PutCatalogsByIDCategoriesByIDProductsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCatalogsByIDCategoriesByIDProductsByIDDefault creates a PutCatalogsByIDCategoriesByIDProductsByIDDefault with default headers values
func NewPutCatalogsByIDCategoriesByIDProductsByIDDefault(code int) *PutCatalogsByIDCategoriesByIDProductsByIDDefault {
	return &PutCatalogsByIDCategoriesByIDProductsByIDDefault{
		_statusCode: code,
	}
}

/*PutCatalogsByIDCategoriesByIDProductsByIDDefault handles this case with default header values.

PutCatalogsByIDCategoriesByIDProductsByIDDefault put catalogs by ID categories by ID products by ID default
*/
type PutCatalogsByIDCategoriesByIDProductsByIDDefault struct {
	_statusCode int

	Payload *models.CategoryProductAssignment
}

// Code gets the status code for the put catalogs by ID categories by ID products by ID default response
func (o *PutCatalogsByIDCategoriesByIDProductsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutCatalogsByIDCategoriesByIDProductsByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /catalogs/{catalog_id}/categories/{category_id}/products/{product_id}][%d] putCatalogsByIDCategoriesByIDProductsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutCatalogsByIDCategoriesByIDProductsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CategoryProductAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
