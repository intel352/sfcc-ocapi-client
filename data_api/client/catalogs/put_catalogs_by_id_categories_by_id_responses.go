// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutCatalogsByIDCategoriesByIDReader is a Reader for the PutCatalogsByIDCategoriesByID structure.
type PutCatalogsByIDCategoriesByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCatalogsByIDCategoriesByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutCatalogsByIDCategoriesByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutCatalogsByIDCategoriesByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutCatalogsByIDCategoriesByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutCatalogsByIDCategoriesByIDBadRequest creates a PutCatalogsByIDCategoriesByIDBadRequest with default headers values
func NewPutCatalogsByIDCategoriesByIDBadRequest() *PutCatalogsByIDCategoriesByIDBadRequest {
	return &PutCatalogsByIDCategoriesByIDBadRequest{}
}

/*PutCatalogsByIDCategoriesByIDBadRequest handles this case with default header values.

Indicates that the category in the request is not valid
 				(the argument indicates the field that was invalid). or Indicates that the category ID in the request URL does not match the category ID in the request body.
*/
type PutCatalogsByIDCategoriesByIDBadRequest struct {
}

func (o *PutCatalogsByIDCategoriesByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /catalogs/{catalog_id}/categories/{category_id}][%d] putCatalogsByIdCategoriesByIdBadRequest ", 400)
}

func (o *PutCatalogsByIDCategoriesByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCatalogsByIDCategoriesByIDNotFound creates a PutCatalogsByIDCategoriesByIDNotFound with default headers values
func NewPutCatalogsByIDCategoriesByIDNotFound() *PutCatalogsByIDCategoriesByIDNotFound {
	return &PutCatalogsByIDCategoriesByIDNotFound{}
}

/*PutCatalogsByIDCategoriesByIDNotFound handles this case with default header values.

Indicates that the catalog is not provided in the request.
*/
type PutCatalogsByIDCategoriesByIDNotFound struct {
}

func (o *PutCatalogsByIDCategoriesByIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /catalogs/{catalog_id}/categories/{category_id}][%d] putCatalogsByIdCategoriesByIdNotFound ", 404)
}

func (o *PutCatalogsByIDCategoriesByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCatalogsByIDCategoriesByIDDefault creates a PutCatalogsByIDCategoriesByIDDefault with default headers values
func NewPutCatalogsByIDCategoriesByIDDefault(code int) *PutCatalogsByIDCategoriesByIDDefault {
	return &PutCatalogsByIDCategoriesByIDDefault{
		_statusCode: code,
	}
}

/*PutCatalogsByIDCategoriesByIDDefault handles this case with default header values.

PutCatalogsByIDCategoriesByIDDefault put catalogs by ID categories by ID default
*/
type PutCatalogsByIDCategoriesByIDDefault struct {
	_statusCode int

	Payload *models.Category
}

// Code gets the status code for the put catalogs by ID categories by ID default response
func (o *PutCatalogsByIDCategoriesByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutCatalogsByIDCategoriesByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /catalogs/{catalog_id}/categories/{category_id}][%d] putCatalogsByIDCategoriesByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutCatalogsByIDCategoriesByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Category)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
