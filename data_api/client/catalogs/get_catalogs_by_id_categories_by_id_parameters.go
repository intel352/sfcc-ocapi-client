// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCatalogsByIDCategoriesByIDParams creates a new GetCatalogsByIDCategoriesByIDParams object
// with the default values initialized.
func NewGetCatalogsByIDCategoriesByIDParams() *GetCatalogsByIDCategoriesByIDParams {
	var ()
	return &GetCatalogsByIDCategoriesByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCatalogsByIDCategoriesByIDParamsWithTimeout creates a new GetCatalogsByIDCategoriesByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCatalogsByIDCategoriesByIDParamsWithTimeout(timeout time.Duration) *GetCatalogsByIDCategoriesByIDParams {
	var ()
	return &GetCatalogsByIDCategoriesByIDParams{

		timeout: timeout,
	}
}

// NewGetCatalogsByIDCategoriesByIDParamsWithContext creates a new GetCatalogsByIDCategoriesByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCatalogsByIDCategoriesByIDParamsWithContext(ctx context.Context) *GetCatalogsByIDCategoriesByIDParams {
	var ()
	return &GetCatalogsByIDCategoriesByIDParams{

		Context: ctx,
	}
}

// NewGetCatalogsByIDCategoriesByIDParamsWithHTTPClient creates a new GetCatalogsByIDCategoriesByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCatalogsByIDCategoriesByIDParamsWithHTTPClient(client *http.Client) *GetCatalogsByIDCategoriesByIDParams {
	var ()
	return &GetCatalogsByIDCategoriesByIDParams{
		HTTPClient: client,
	}
}

/*GetCatalogsByIDCategoriesByIDParams contains all the parameters to send to the API endpoint
for the get catalogs by ID categories by ID operation typically these are written to a http.Request
*/
type GetCatalogsByIDCategoriesByIDParams struct {

	/*CatalogID
	  the id of the catalog that the category belongs to

	*/
	CatalogID string
	/*CategoryID
	  the id of the category requested

	*/
	CategoryID string
	/*Expand*/
	Expand []string
	/*Levels*/
	Levels *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) WithTimeout(timeout time.Duration) *GetCatalogsByIDCategoriesByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) WithContext(ctx context.Context) *GetCatalogsByIDCategoriesByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) WithHTTPClient(client *http.Client) *GetCatalogsByIDCategoriesByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCatalogID adds the catalogID to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) WithCatalogID(catalogID string) *GetCatalogsByIDCategoriesByIDParams {
	o.SetCatalogID(catalogID)
	return o
}

// SetCatalogID adds the catalogId to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) SetCatalogID(catalogID string) {
	o.CatalogID = catalogID
}

// WithCategoryID adds the categoryID to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) WithCategoryID(categoryID string) *GetCatalogsByIDCategoriesByIDParams {
	o.SetCategoryID(categoryID)
	return o
}

// SetCategoryID adds the categoryId to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) SetCategoryID(categoryID string) {
	o.CategoryID = categoryID
}

// WithExpand adds the expand to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) WithExpand(expand []string) *GetCatalogsByIDCategoriesByIDParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithLevels adds the levels to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) WithLevels(levels *int32) *GetCatalogsByIDCategoriesByIDParams {
	o.SetLevels(levels)
	return o
}

// SetLevels adds the levels to the get catalogs by ID categories by ID params
func (o *GetCatalogsByIDCategoriesByIDParams) SetLevels(levels *int32) {
	o.Levels = levels
}

// WriteToRequest writes these params to a swagger request
func (o *GetCatalogsByIDCategoriesByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param catalog_id
	if err := r.SetPathParam("catalog_id", o.CatalogID); err != nil {
		return err
	}

	// path param category_id
	if err := r.SetPathParam("category_id", o.CategoryID); err != nil {
		return err
	}

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	if o.Levels != nil {

		// query param levels
		var qrLevels int32
		if o.Levels != nil {
			qrLevels = *o.Levels
		}
		qLevels := swag.FormatInt32(qrLevels)
		if qLevels != "" {
			if err := r.SetQueryParam("levels", qLevels); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
