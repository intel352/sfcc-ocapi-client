// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDReader is a Reader for the PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID structure.
type PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 404:
		result := NewPutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound creates a PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound with default headers values
func NewPutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound() *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound {
	return &PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound{}
}

/*PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound handles this case with default header values.

Thrown in case the source catalog or the target catalog do not exist or Thrown in case the source category or the target category do not exist
*/
type PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound struct {
}

func (o *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}][%d] putCatalogsByIdCategoriesByIdCategoryLinksByIdByIdByIdNotFound ", 404)
}

func (o *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault creates a PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault with default headers values
func NewPutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault(code int) *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault {
	return &PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault{
		_statusCode: code,
	}
}

/*PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault handles this case with default header values.

PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault put catalogs by ID categories by ID category links by ID by ID by ID default
*/
type PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault struct {
	_statusCode int

	Payload *models.CategoryLink
}

// Code gets the status code for the put catalogs by ID categories by ID category links by ID by ID by ID default response
func (o *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}][%d] putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CategoryLink)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
