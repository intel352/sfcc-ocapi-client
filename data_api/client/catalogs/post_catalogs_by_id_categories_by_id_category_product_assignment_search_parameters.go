// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams creates a new PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams object
// with the default values initialized.
func NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams() *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	var ()
	return &PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParamsWithTimeout creates a new PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParamsWithTimeout(timeout time.Duration) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	var ()
	return &PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams{

		timeout: timeout,
	}
}

// NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParamsWithContext creates a new PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParamsWithContext(ctx context.Context) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	var ()
	return &PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams{

		Context: ctx,
	}
}

// NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParamsWithHTTPClient creates a new PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParamsWithHTTPClient(client *http.Client) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	var ()
	return &PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams{
		HTTPClient: client,
	}
}

/*PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams contains all the parameters to send to the API endpoint
for the post catalogs by ID categories by ID category product assignment search operation typically these are written to a http.Request
*/
type PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams struct {

	/*Body*/
	Body *models.CategoryProductAssignmentSearchRequest
	/*CatalogID
	  The id of the catalog.

	*/
	CatalogID string
	/*CategoryID
	  The id of the category.

	*/
	CategoryID string
	/*SiteID*/
	SiteID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) WithTimeout(timeout time.Duration) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) WithContext(ctx context.Context) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) WithHTTPClient(client *http.Client) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) WithBody(body *models.CategoryProductAssignmentSearchRequest) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) SetBody(body *models.CategoryProductAssignmentSearchRequest) {
	o.Body = body
}

// WithCatalogID adds the catalogID to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) WithCatalogID(catalogID string) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	o.SetCatalogID(catalogID)
	return o
}

// SetCatalogID adds the catalogId to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) SetCatalogID(catalogID string) {
	o.CatalogID = catalogID
}

// WithCategoryID adds the categoryID to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) WithCategoryID(categoryID string) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	o.SetCategoryID(categoryID)
	return o
}

// SetCategoryID adds the categoryId to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) SetCategoryID(categoryID string) {
	o.CategoryID = categoryID
}

// WithSiteID adds the siteID to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) WithSiteID(siteID *string) *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the post catalogs by ID categories by ID category product assignment search params
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WriteToRequest writes these params to a swagger request
func (o *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param catalog_id
	if err := r.SetPathParam("catalog_id", o.CatalogID); err != nil {
		return err
	}

	// path param category_id
	if err := r.SetPathParam("category_id", o.CategoryID); err != nil {
		return err
	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
