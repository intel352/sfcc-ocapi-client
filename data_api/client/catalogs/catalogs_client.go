// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new catalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteCatalogsByIDCategoriesByID Deletes the category by catalog ID and category ID
*/
func (a *Client) DeleteCatalogsByIDCategoriesByID(params *DeleteCatalogsByIDCategoriesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogsByIDCategoriesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogsByIDCategoriesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCatalogsByIDCategoriesByID",
		Method:             "DELETE",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCatalogsByIDCategoriesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCatalogsByIDCategoriesByIDNoContent), nil

}

/*
DeleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID Deletes the category link by ID
*/
func (a *Client) DeleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID(params *DeleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID",
		Method:             "DELETE",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDNoContent), nil

}

/*
DeleteCatalogsByIDCategoriesByIDProductsByID Removes a category product assignment;


 For example, if we have products A, B, C at positions 1, 2, 7.5 and delete assignment for product B,
 this will end up the products A, B, C at positions 1, null, 7.5.
*/
func (a *Client) DeleteCatalogsByIDCategoriesByIDProductsByID(params *DeleteCatalogsByIDCategoriesByIDProductsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogsByIDCategoriesByIDProductsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogsByIDCategoriesByIDProductsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCatalogsByIDCategoriesByIDProductsByID",
		Method:             "DELETE",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCatalogsByIDCategoriesByIDProductsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCatalogsByIDCategoriesByIDProductsByIDNoContent), nil

}

/*
DeleteCatalogsByIDSharedProductOptionsByID Deletes a shared product option by ID.
*/
func (a *Client) DeleteCatalogsByIDSharedProductOptionsByID(params *DeleteCatalogsByIDSharedProductOptionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogsByIDSharedProductOptionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogsByIDSharedProductOptionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCatalogsByIDSharedProductOptionsByID",
		Method:             "DELETE",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCatalogsByIDSharedProductOptionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCatalogsByIDSharedProductOptionsByIDNoContent), nil

}

/*
DeleteCatalogsByIDSharedProductOptionsByIDValuesByID Deletes a shared product option value by ID.
*/
func (a *Client) DeleteCatalogsByIDSharedProductOptionsByIDValuesByID(params *DeleteCatalogsByIDSharedProductOptionsByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogsByIDSharedProductOptionsByIDValuesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogsByIDSharedProductOptionsByIDValuesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCatalogsByIDSharedProductOptionsByIDValuesByID",
		Method:             "DELETE",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCatalogsByIDSharedProductOptionsByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCatalogsByIDSharedProductOptionsByIDValuesByIDNoContent), nil

}

/*
DeleteCatalogsByIDSharedVariationAttributesByID Deletes the variation attribute by ID
*/
func (a *Client) DeleteCatalogsByIDSharedVariationAttributesByID(params *DeleteCatalogsByIDSharedVariationAttributesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogsByIDSharedVariationAttributesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogsByIDSharedVariationAttributesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCatalogsByIDSharedVariationAttributesByID",
		Method:             "DELETE",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCatalogsByIDSharedVariationAttributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCatalogsByIDSharedVariationAttributesByIDNoContent), nil

}

/*
DeleteCatalogsByIDSharedVariationAttributesByIDValuesByID Deletes the variation attribute value of a variation attribute bound to a catalog
*/
func (a *Client) DeleteCatalogsByIDSharedVariationAttributesByIDValuesByID(params *DeleteCatalogsByIDSharedVariationAttributesByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogsByIDSharedVariationAttributesByIDValuesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogsByIDSharedVariationAttributesByIDValuesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCatalogsByIDSharedVariationAttributesByIDValuesByID",
		Method:             "DELETE",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCatalogsByIDSharedVariationAttributesByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCatalogsByIDSharedVariationAttributesByIDValuesByIDNoContent), nil

}

/*
GetCatalogs Action to get all the catalogs with no filtering.
*/
func (a *Client) GetCatalogs(params *GetCatalogsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogs",
		Method:             "GET",
		PathPattern:        "/catalogs",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByID Gets catalog information by catalog Id.

 Expansion "stats" can be used to retrieved some expensive statistic data, such as assigned_product_count and owned_product_count.
 Example: /s/-/dw/data/v99_9/catalogs/my-catalog?expand=stats
*/
func (a *Client) GetCatalogsByID(params *GetCatalogsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByID",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDCategories Action to get all the categories with no filtering.
*/
func (a *Client) GetCatalogsByIDCategories(params *GetCatalogsByIDCategoriesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDCategoriesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDCategories",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/categories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDCategoriesByID Action to read an existing category within a catalog. By default, the server
 also returns the first level of sub-categories, but you can specify another level by setting the levels
 parameter. Please note, using a large value for levels may cause performance
 issues in case of a large and deep category tree.
*/
func (a *Client) GetCatalogsByIDCategoriesByID(params *GetCatalogsByIDCategoriesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDCategoriesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDCategoriesByID",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDCategoriesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDCategoriesByIDCategoryLinks Action to get a set of outgoing category links in a given catalog category, sorted by position.
*/
func (a *Client) GetCatalogsByIDCategoriesByIDCategoryLinks(params *GetCatalogsByIDCategoriesByIDCategoryLinksParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDCategoriesByIDCategoryLinksParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDCategoriesByIDCategoryLinks",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/category_links",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDCategoriesByIDCategoryLinksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID Action to get category link information.
*/
func (a *Client) GetCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID(params *GetCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDCategoriesByIDProductsByID Retrieves category product assignment information.

 Expands that can be applied for the get request

 product_base - String
 product_images - String - to fetch image groups specified for the given product
 product_all_images - String - to fetch image groups specified for the given product plus images for its variants and variation groups

*/
func (a *Client) GetCatalogsByIDCategoriesByIDProductsByID(params *GetCatalogsByIDCategoriesByIDProductsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDCategoriesByIDProductsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDCategoriesByIDProductsByID",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDCategoriesByIDProductsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDSharedProductOptions Read shared product options in a catalog.
*/
func (a *Client) GetCatalogsByIDSharedProductOptions(params *GetCatalogsByIDSharedProductOptionsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDSharedProductOptionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDSharedProductOptions",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDSharedProductOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDSharedProductOptionsByID Read a shared product option in a catalog.
*/
func (a *Client) GetCatalogsByIDSharedProductOptionsByID(params *GetCatalogsByIDSharedProductOptionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDSharedProductOptionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDSharedProductOptionsByID",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDSharedProductOptionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDSharedProductOptionsByIDValues Read shared product option values of a shared product option in a catalog.
*/
func (a *Client) GetCatalogsByIDSharedProductOptionsByIDValues(params *GetCatalogsByIDSharedProductOptionsByIDValuesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDSharedProductOptionsByIDValuesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDSharedProductOptionsByIDValues",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{option_id}/values",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDSharedProductOptionsByIDValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDSharedProductOptionsByIDValuesByID Read a shared product option value of a shared product option in a catalog.
*/
func (a *Client) GetCatalogsByIDSharedProductOptionsByIDValuesByID(params *GetCatalogsByIDSharedProductOptionsByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDSharedProductOptionsByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDSharedProductOptionsByIDValuesByID",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDSharedProductOptionsByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDSharedVariationAttributes Reads variation attributes of a Domain.
*/
func (a *Client) GetCatalogsByIDSharedVariationAttributes(params *GetCatalogsByIDSharedVariationAttributesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDSharedVariationAttributesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDSharedVariationAttributes",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDSharedVariationAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDSharedVariationAttributesByID Action to get shared variation attribute information only for master Catalog.
*/
func (a *Client) GetCatalogsByIDSharedVariationAttributesByID(params *GetCatalogsByIDSharedVariationAttributesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDSharedVariationAttributesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDSharedVariationAttributesByID",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDSharedVariationAttributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDSharedVariationAttributesByIDValues Reads variation attribute values of a variation attribute of a catalog.
*/
func (a *Client) GetCatalogsByIDSharedVariationAttributesByIDValues(params *GetCatalogsByIDSharedVariationAttributesByIDValuesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDSharedVariationAttributesByIDValuesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDSharedVariationAttributesByIDValues",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDSharedVariationAttributesByIDValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCatalogsByIDSharedVariationAttributesByIDValuesByID Action to get Shared Variation Attribute value information.
*/
func (a *Client) GetCatalogsByIDSharedVariationAttributesByIDValuesByID(params *GetCatalogsByIDSharedVariationAttributesByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogsByIDSharedVariationAttributesByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogsByIDSharedVariationAttributesByIDValuesByID",
		Method:             "GET",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogsByIDSharedVariationAttributesByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCatalogsByID Updates the catalog with the specified information.
*/
func (a *Client) PatchCatalogsByID(params *PatchCatalogsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCatalogsByID",
		Method:             "PATCH",
		PathPattern:        "/catalogs/{catalog_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCatalogsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCatalogsByIDCategoriesByID Updates a catalog category using the information provided.
*/
func (a *Client) PatchCatalogsByIDCategoriesByID(params *PatchCatalogsByIDCategoriesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogsByIDCategoriesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCatalogsByIDCategoriesByID",
		Method:             "PATCH",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCatalogsByIDCategoriesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID Updates the category link with the specified information.
*/
func (a *Client) PatchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID(params *PatchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID",
		Method:             "PATCH",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCatalogsByIDCategoriesByIDProductsByID Updates the category product assignment with the specified information, such as position.
  As the assigned position n is a normalized target position, we'll make sure that the product is assigned
 to a position so that the order of positions are maintained.

 For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and update product A with new position 3,
 the end result is B, C, A, D with order of positions 1, 2, 3, 4. If we then update product C to no position,
 the end result is B, A, D, C with order of positions 1, 2, 3, null.

 If there are n existing positioned assignment, updating product to position >= n will end with new assignment with position such that the order of positions is maintained.
*/
func (a *Client) PatchCatalogsByIDCategoriesByIDProductsByID(params *PatchCatalogsByIDCategoriesByIDProductsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogsByIDCategoriesByIDProductsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCatalogsByIDCategoriesByIDProductsByID",
		Method:             "PATCH",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCatalogsByIDCategoriesByIDProductsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCatalogsByIDSharedProductOptionsByID Updates a shared product option with the information provided.
*/
func (a *Client) PatchCatalogsByIDSharedProductOptionsByID(params *PatchCatalogsByIDSharedProductOptionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogsByIDSharedProductOptionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCatalogsByIDSharedProductOptionsByID",
		Method:             "PATCH",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCatalogsByIDSharedProductOptionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCatalogsByIDSharedProductOptionsByIDValuesByID Updates a shared product option value with the information provided.
*/
func (a *Client) PatchCatalogsByIDSharedProductOptionsByIDValuesByID(params *PatchCatalogsByIDSharedProductOptionsByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogsByIDSharedProductOptionsByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCatalogsByIDSharedProductOptionsByIDValuesByID",
		Method:             "PATCH",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCatalogsByIDSharedProductOptionsByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCatalogsByIDSharedVariationAttributesByID Updates the variation attribute with the specified information.


 name
 slicing

*/
func (a *Client) PatchCatalogsByIDSharedVariationAttributesByID(params *PatchCatalogsByIDSharedVariationAttributesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogsByIDSharedVariationAttributesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCatalogsByIDSharedVariationAttributesByID",
		Method:             "PATCH",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCatalogsByIDSharedVariationAttributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchCatalogsByIDSharedVariationAttributesByIDValuesByID Updates the variation attribute value of a variation attribute of a catalog.
*/
func (a *Client) PatchCatalogsByIDSharedVariationAttributesByIDValuesByID(params *PatchCatalogsByIDSharedVariationAttributesByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogsByIDSharedVariationAttributesByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCatalogsByIDSharedVariationAttributesByIDValuesByID",
		Method:             "PATCH",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCatalogsByIDSharedVariationAttributesByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearch Searches for category product assignments.

 The query attribute specifies a complex query that can be used to narrow down the search. This is the list
 of searchable attributes:

 product_id - String
 product_name - String
 online_flag - Boolean
 searchable - Boolean
 valid_from - DateTime
 valid_to - DateTime
 creation_date - DateTime


 Sortable Fields:

 product_id - String
 product_name - String
 position - Double
 creation_date - DateTime


 Expansions that can be applied for the search request:

 product_base - String - This expand will enable retrieval of the following basic Product information:
 product_images - String - to fetch preview image and image groups specified for the given product
 product_all_images - String - to fetch preview image and image groups specified for the product plus images for its variants and variation groups
 product_variations - String to fetch variations related information, version 17.8+
 product_availability - String to fetch availability related information, version 17.8+
 product_categories - String to fetch category related information, version 17.8+
 product_prices - String to fetch prices related information, version 17.8+
 product_options - String to fetch options related information, version 17.8+
 product_all - String to fetch all expanded information, version 17.8+


 		brand
    	ean
      link
  	long_description
      manufacturer_name
      manufacturer_sku
 		name
      page_description
      page_keywords
      page_title
      searchable
   	short_description
      type
      unit
     	upc


*/
func (a *Client) PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearch(params *PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCatalogsByIDCategoriesByIDCategoryProductAssignmentSearch",
		Method:             "POST",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/category_product_assignment_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCatalogsByIDCategoriesByIDCategoryProductAssignmentSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostCatalogsByIDCategorySearch Searches for catalog categories in the scope of catalog
 By default, the server also returns the first level of subcategories,
  but you can specify another level by setting the levels parameter.
  Please note, using a large value for levels may cause performance
  issues in case of a large and deep category tree.

 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 id - String
 name - String
 description - String
 creation_date - DateTime
 online - Boolean
 parent_category_id - String


 The output of the query can also be sorted. These are the list of sortable attributes:

 id - String
 name - String
 description - String
 creation_date - DateTime
 online - Boolean
 position - Double

*/
func (a *Client) PostCatalogsByIDCategorySearch(params *PostCatalogsByIDCategorySearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCatalogsByIDCategorySearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCatalogsByIDCategorySearch",
		Method:             "POST",
		PathPattern:        "/catalogs/{catalog_id}/category_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCatalogsByIDCategorySearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCatalogsByIDCategoriesByID Creates a catalog category using the information provided.
*/
func (a *Client) PutCatalogsByIDCategoriesByID(params *PutCatalogsByIDCategoriesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCatalogsByIDCategoriesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCatalogsByIDCategoriesByID",
		Method:             "PUT",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCatalogsByIDCategoriesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID Creates a category link using the information provided. If a category link with the same unique identifier,
 it will be updated with the new position.
*/
func (a *Client) PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID(params *PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByID",
		Method:             "PUT",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/category_links/{target_catalog_id}/{target_category_id}/{type}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCatalogsByIDCategoriesByIDCategoryLinksByIDByIDByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCatalogsByIDCategoriesByIDProductsByID Creates a category product assignment using the information provided;

 As the assigned position n is a normalized target position, we'll make sure that the product is assigned
 to a position so that the order of positions are maintained.

 For example, product A, B, C at position 1, 2, 3. product D is assigned to
 position 2, the end result is A, D, B, C with order of positions 1, 2, 3, 4;

 If there are n existing positioned assignment, assigning a new product to position >= n+1 will end
 with new assignment with position n+1.
*/
func (a *Client) PutCatalogsByIDCategoriesByIDProductsByID(params *PutCatalogsByIDCategoriesByIDProductsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCatalogsByIDCategoriesByIDProductsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCatalogsByIDCategoriesByIDProductsByID",
		Method:             "PUT",
		PathPattern:        "/catalogs/{catalog_id}/categories/{category_id}/products/{product_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCatalogsByIDCategoriesByIDProductsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCatalogsByIDSharedProductOptionsByID Creates a shared product option using the information provided.
*/
func (a *Client) PutCatalogsByIDSharedProductOptionsByID(params *PutCatalogsByIDSharedProductOptionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCatalogsByIDSharedProductOptionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCatalogsByIDSharedProductOptionsByID",
		Method:             "PUT",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCatalogsByIDSharedProductOptionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCatalogsByIDSharedProductOptionsByIDValuesByID Creates a shared product option value using the information provided.
*/
func (a *Client) PutCatalogsByIDSharedProductOptionsByIDValuesByID(params *PutCatalogsByIDSharedProductOptionsByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCatalogsByIDSharedProductOptionsByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCatalogsByIDSharedProductOptionsByIDValuesByID",
		Method:             "PUT",
		PathPattern:        "/catalogs/{catalog_id}/shared_product_options/{option_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCatalogsByIDSharedProductOptionsByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCatalogsByIDSharedVariationAttributesByID Creates a variation attribute using the information provided.
*/
func (a *Client) PutCatalogsByIDSharedVariationAttributesByID(params *PutCatalogsByIDSharedVariationAttributesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCatalogsByIDSharedVariationAttributesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCatalogsByIDSharedVariationAttributesByID",
		Method:             "PUT",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCatalogsByIDSharedVariationAttributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutCatalogsByIDSharedVariationAttributesByIDValuesByID Action to create a Shared Variation Attribute value.
*/
func (a *Client) PutCatalogsByIDSharedVariationAttributesByIDValuesByID(params *PutCatalogsByIDSharedVariationAttributesByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCatalogsByIDSharedVariationAttributesByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCatalogsByIDSharedVariationAttributesByIDValuesByID",
		Method:             "PUT",
		PathPattern:        "/catalogs/{catalog_id}/shared_variation_attributes/{attribute_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCatalogsByIDSharedVariationAttributesByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
