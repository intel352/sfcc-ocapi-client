// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchCatalogsByIDCategoriesByIDReader is a Reader for the PatchCatalogsByIDCategoriesByID structure.
type PatchCatalogsByIDCategoriesByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCatalogsByIDCategoriesByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchCatalogsByIDCategoriesByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchCatalogsByIDCategoriesByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchCatalogsByIDCategoriesByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchCatalogsByIDCategoriesByIDBadRequest creates a PatchCatalogsByIDCategoriesByIDBadRequest with default headers values
func NewPatchCatalogsByIDCategoriesByIDBadRequest() *PatchCatalogsByIDCategoriesByIDBadRequest {
	return &PatchCatalogsByIDCategoriesByIDBadRequest{}
}

/*PatchCatalogsByIDCategoriesByIDBadRequest handles this case with default header values.

Indicates that the category in the request is not valid
 				(the argument indicates the field that was invalid).
*/
type PatchCatalogsByIDCategoriesByIDBadRequest struct {
}

func (o *PatchCatalogsByIDCategoriesByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /catalogs/{catalog_id}/categories/{category_id}][%d] patchCatalogsByIdCategoriesByIdBadRequest ", 400)
}

func (o *PatchCatalogsByIDCategoriesByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCatalogsByIDCategoriesByIDNotFound creates a PatchCatalogsByIDCategoriesByIDNotFound with default headers values
func NewPatchCatalogsByIDCategoriesByIDNotFound() *PatchCatalogsByIDCategoriesByIDNotFound {
	return &PatchCatalogsByIDCategoriesByIDNotFound{}
}

/*PatchCatalogsByIDCategoriesByIDNotFound handles this case with default header values.

Indicates that the catalog is not provided in the request. or Indicates that the category does not exist for the catalog provided in
              the request.
*/
type PatchCatalogsByIDCategoriesByIDNotFound struct {
}

func (o *PatchCatalogsByIDCategoriesByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /catalogs/{catalog_id}/categories/{category_id}][%d] patchCatalogsByIdCategoriesByIdNotFound ", 404)
}

func (o *PatchCatalogsByIDCategoriesByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCatalogsByIDCategoriesByIDDefault creates a PatchCatalogsByIDCategoriesByIDDefault with default headers values
func NewPatchCatalogsByIDCategoriesByIDDefault(code int) *PatchCatalogsByIDCategoriesByIDDefault {
	return &PatchCatalogsByIDCategoriesByIDDefault{
		_statusCode: code,
	}
}

/*PatchCatalogsByIDCategoriesByIDDefault handles this case with default header values.

PatchCatalogsByIDCategoriesByIDDefault patch catalogs by ID categories by ID default
*/
type PatchCatalogsByIDCategoriesByIDDefault struct {
	_statusCode int

	Payload *models.Category
}

// Code gets the status code for the patch catalogs by ID categories by ID default response
func (o *PatchCatalogsByIDCategoriesByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchCatalogsByIDCategoriesByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /catalogs/{catalog_id}/categories/{category_id}][%d] patchCatalogsByIDCategoriesByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchCatalogsByIDCategoriesByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Category)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
