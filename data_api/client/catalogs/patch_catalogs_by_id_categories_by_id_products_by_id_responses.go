// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchCatalogsByIDCategoriesByIDProductsByIDReader is a Reader for the PatchCatalogsByIDCategoriesByIDProductsByID structure.
type PatchCatalogsByIDCategoriesByIDProductsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCatalogsByIDCategoriesByIDProductsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 404:
		result := NewPatchCatalogsByIDCategoriesByIDProductsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchCatalogsByIDCategoriesByIDProductsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchCatalogsByIDCategoriesByIDProductsByIDNotFound creates a PatchCatalogsByIDCategoriesByIDProductsByIDNotFound with default headers values
func NewPatchCatalogsByIDCategoriesByIDProductsByIDNotFound() *PatchCatalogsByIDCategoriesByIDProductsByIDNotFound {
	return &PatchCatalogsByIDCategoriesByIDProductsByIDNotFound{}
}

/*PatchCatalogsByIDCategoriesByIDProductsByIDNotFound handles this case with default header values.

Thrown if the category does not exist matching the given id. or Thrown if the catalog does not exist matching the given id. or Thrown if the product does not exist matching the given id. or Thrown if the category product assignment does not exist.
*/
type PatchCatalogsByIDCategoriesByIDProductsByIDNotFound struct {
}

func (o *PatchCatalogsByIDCategoriesByIDProductsByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /catalogs/{catalog_id}/categories/{category_id}/products/{product_id}][%d] patchCatalogsByIdCategoriesByIdProductsByIdNotFound ", 404)
}

func (o *PatchCatalogsByIDCategoriesByIDProductsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCatalogsByIDCategoriesByIDProductsByIDDefault creates a PatchCatalogsByIDCategoriesByIDProductsByIDDefault with default headers values
func NewPatchCatalogsByIDCategoriesByIDProductsByIDDefault(code int) *PatchCatalogsByIDCategoriesByIDProductsByIDDefault {
	return &PatchCatalogsByIDCategoriesByIDProductsByIDDefault{
		_statusCode: code,
	}
}

/*PatchCatalogsByIDCategoriesByIDProductsByIDDefault handles this case with default header values.

PatchCatalogsByIDCategoriesByIDProductsByIDDefault patch catalogs by ID categories by ID products by ID default
*/
type PatchCatalogsByIDCategoriesByIDProductsByIDDefault struct {
	_statusCode int

	Payload *models.CategoryProductAssignment
}

// Code gets the status code for the patch catalogs by ID categories by ID products by ID default response
func (o *PatchCatalogsByIDCategoriesByIDProductsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchCatalogsByIDCategoriesByIDProductsByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /catalogs/{catalog_id}/categories/{category_id}/products/{product_id}][%d] patchCatalogsByIDCategoriesByIDProductsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchCatalogsByIDCategoriesByIDProductsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CategoryProductAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
