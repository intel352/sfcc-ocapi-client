// Code generated by go-swagger; DO NOT EDIT.

package catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCatalogsByIDSharedProductOptionsByIDParams creates a new GetCatalogsByIDSharedProductOptionsByIDParams object
// with the default values initialized.
func NewGetCatalogsByIDSharedProductOptionsByIDParams() *GetCatalogsByIDSharedProductOptionsByIDParams {
	var ()
	return &GetCatalogsByIDSharedProductOptionsByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCatalogsByIDSharedProductOptionsByIDParamsWithTimeout creates a new GetCatalogsByIDSharedProductOptionsByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCatalogsByIDSharedProductOptionsByIDParamsWithTimeout(timeout time.Duration) *GetCatalogsByIDSharedProductOptionsByIDParams {
	var ()
	return &GetCatalogsByIDSharedProductOptionsByIDParams{

		timeout: timeout,
	}
}

// NewGetCatalogsByIDSharedProductOptionsByIDParamsWithContext creates a new GetCatalogsByIDSharedProductOptionsByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCatalogsByIDSharedProductOptionsByIDParamsWithContext(ctx context.Context) *GetCatalogsByIDSharedProductOptionsByIDParams {
	var ()
	return &GetCatalogsByIDSharedProductOptionsByIDParams{

		Context: ctx,
	}
}

// NewGetCatalogsByIDSharedProductOptionsByIDParamsWithHTTPClient creates a new GetCatalogsByIDSharedProductOptionsByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCatalogsByIDSharedProductOptionsByIDParamsWithHTTPClient(client *http.Client) *GetCatalogsByIDSharedProductOptionsByIDParams {
	var ()
	return &GetCatalogsByIDSharedProductOptionsByIDParams{
		HTTPClient: client,
	}
}

/*GetCatalogsByIDSharedProductOptionsByIDParams contains all the parameters to send to the API endpoint
for the get catalogs by ID shared product options by ID operation typically these are written to a http.Request
*/
type GetCatalogsByIDSharedProductOptionsByIDParams struct {

	/*CatalogID
	  The id of the catalog.

	*/
	CatalogID string
	/*Currency*/
	Currency *string
	/*ID
	  The id of the shared product option.

	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) WithTimeout(timeout time.Duration) *GetCatalogsByIDSharedProductOptionsByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) WithContext(ctx context.Context) *GetCatalogsByIDSharedProductOptionsByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) WithHTTPClient(client *http.Client) *GetCatalogsByIDSharedProductOptionsByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCatalogID adds the catalogID to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) WithCatalogID(catalogID string) *GetCatalogsByIDSharedProductOptionsByIDParams {
	o.SetCatalogID(catalogID)
	return o
}

// SetCatalogID adds the catalogId to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) SetCatalogID(catalogID string) {
	o.CatalogID = catalogID
}

// WithCurrency adds the currency to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) WithCurrency(currency *string) *GetCatalogsByIDSharedProductOptionsByIDParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) SetCurrency(currency *string) {
	o.Currency = currency
}

// WithID adds the id to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) WithID(id string) *GetCatalogsByIDSharedProductOptionsByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get catalogs by ID shared product options by ID params
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *GetCatalogsByIDSharedProductOptionsByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param catalog_id
	if err := r.SetPathParam("catalog_id", o.CatalogID); err != nil {
		return err
	}

	if o.Currency != nil {

		// query param currency
		var qrCurrency string
		if o.Currency != nil {
			qrCurrency = *o.Currency
		}
		qCurrency := qrCurrency
		if qCurrency != "" {
			if err := r.SetQueryParam("currency", qCurrency); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
