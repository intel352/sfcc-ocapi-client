// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchProductsByIDReader is a Reader for the PatchProductsByID structure.
type PatchProductsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchProductsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchProductsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchProductsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchProductsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchProductsByIDBadRequest creates a PatchProductsByIDBadRequest with default headers values
func NewPatchProductsByIDBadRequest() *PatchProductsByIDBadRequest {
	return &PatchProductsByIDBadRequest{}
}

/*PatchProductsByIDBadRequest handles this case with default header values.

Indicates there is a problem to set default variant for a product. or Indicates the ID in request URL does not match the ID in the product document.
*/
type PatchProductsByIDBadRequest struct {
}

func (o *PatchProductsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /products/{id}][%d] patchProductsByIdBadRequest ", 400)
}

func (o *PatchProductsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchProductsByIDNotFound creates a PatchProductsByIDNotFound with default headers values
func NewPatchProductsByIDNotFound() *PatchProductsByIDNotFound {
	return &PatchProductsByIDNotFound{}
}

/*PatchProductsByIDNotFound handles this case with default header values.

Indicates the product to be updated is not found.
*/
type PatchProductsByIDNotFound struct {
}

func (o *PatchProductsByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /products/{id}][%d] patchProductsByIdNotFound ", 404)
}

func (o *PatchProductsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchProductsByIDDefault creates a PatchProductsByIDDefault with default headers values
func NewPatchProductsByIDDefault(code int) *PatchProductsByIDDefault {
	return &PatchProductsByIDDefault{
		_statusCode: code,
	}
}

/*PatchProductsByIDDefault handles this case with default header values.

PatchProductsByIDDefault patch products by ID default
*/
type PatchProductsByIDDefault struct {
	_statusCode int

	Payload *models.Product
}

// Code gets the status code for the patch products by ID default response
func (o *PatchProductsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchProductsByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /products/{id}][%d] patchProductsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchProductsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Product)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
