// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new products API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for products API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteProductsByID Deletes the product by ID
*/
func (a *Client) DeleteProductsByID(params *DeleteProductsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductsByID",
		Method:             "DELETE",
		PathPattern:        "/products/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProductsByIDNoContent), nil

}

/*
DeleteProductsByIDProductOptionsByID Deletes a local product option or unbinds a shared product option from the product.
*/
func (a *Client) DeleteProductsByIDProductOptionsByID(params *DeleteProductsByIDProductOptionsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsByIDProductOptionsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsByIDProductOptionsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductsByIDProductOptionsByID",
		Method:             "DELETE",
		PathPattern:        "/products/{product_id}/product_options/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductsByIDProductOptionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProductsByIDProductOptionsByIDNoContent), nil

}

/*
DeleteProductsByIDProductOptionsByIDValuesByID Deletes a local product option value by ID.
*/
func (a *Client) DeleteProductsByIDProductOptionsByIDValuesByID(params *DeleteProductsByIDProductOptionsByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsByIDProductOptionsByIDValuesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsByIDProductOptionsByIDValuesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductsByIDProductOptionsByIDValuesByID",
		Method:             "DELETE",
		PathPattern:        "/products/{product_id}/product_options/{option_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductsByIDProductOptionsByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProductsByIDProductOptionsByIDValuesByIDNoContent), nil

}

/*
DeleteProductsByIDVariationAttributesByID Deletes the variation attribute by ID
*/
func (a *Client) DeleteProductsByIDVariationAttributesByID(params *DeleteProductsByIDVariationAttributesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsByIDVariationAttributesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsByIDVariationAttributesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductsByIDVariationAttributesByID",
		Method:             "DELETE",
		PathPattern:        "/products/{product_id}/variation_attributes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductsByIDVariationAttributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProductsByIDVariationAttributesByIDNoContent), nil

}

/*
DeleteProductsByIDVariationAttributesByIDValuesByID Deletes the variation attribute value of a variation attribute bound to a master product
*/
func (a *Client) DeleteProductsByIDVariationAttributesByIDValuesByID(params *DeleteProductsByIDVariationAttributesByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsByIDVariationAttributesByIDValuesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsByIDVariationAttributesByIDValuesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductsByIDVariationAttributesByIDValuesByID",
		Method:             "DELETE",
		PathPattern:        "/products/{product_id}/variation_attributes/{attribute_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductsByIDVariationAttributesByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProductsByIDVariationAttributesByIDValuesByIDNoContent), nil

}

/*
DeleteProductsByIDVariationGroupsByID Unassign a variation group product from a product master.  The variation group product is not
 deleted: it remains as a normal product after unsassign.
*/
func (a *Client) DeleteProductsByIDVariationGroupsByID(params *DeleteProductsByIDVariationGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsByIDVariationGroupsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsByIDVariationGroupsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductsByIDVariationGroupsByID",
		Method:             "DELETE",
		PathPattern:        "/products/{master_product_id}/variation_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductsByIDVariationGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProductsByIDVariationGroupsByIDNoContent), nil

}

/*
DeleteProductsByIDVariationsByID Unassign a variation product from a product master.  The variation product is not deleted: it remains as a
 normal product after unsassign.
*/
func (a *Client) DeleteProductsByIDVariationsByID(params *DeleteProductsByIDVariationsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProductsByIDVariationsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProductsByIDVariationsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProductsByIDVariationsByID",
		Method:             "DELETE",
		PathPattern:        "/products/{master_product_id}/variations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProductsByIDVariationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProductsByIDVariationsByIDNoContent), nil

}

/*
GetProductsByID Action to get product information.
*/
func (a *Client) GetProductsByID(params *GetProductsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByID",
		Method:             "GET",
		PathPattern:        "/products/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDProductOptions Read local and shared product options of a product.
*/
func (a *Client) GetProductsByIDProductOptions(params *GetProductsByIDProductOptionsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDProductOptionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDProductOptions",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/product_options",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDProductOptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDProductOptionsByID Read a local or shared product option of a product.
*/
func (a *Client) GetProductsByIDProductOptionsByID(params *GetProductsByIDProductOptionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDProductOptionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDProductOptionsByID",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/product_options/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDProductOptionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDProductOptionsByIDValues Read local product option values of a local product option in a product.
*/
func (a *Client) GetProductsByIDProductOptionsByIDValues(params *GetProductsByIDProductOptionsByIDValuesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDProductOptionsByIDValuesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDProductOptionsByIDValues",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/product_options/{option_id}/values",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDProductOptionsByIDValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDProductOptionsByIDValuesByID Read a local product option value of a local product option in a product.
*/
func (a *Client) GetProductsByIDProductOptionsByIDValuesByID(params *GetProductsByIDProductOptionsByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDProductOptionsByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDProductOptionsByIDValuesByID",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/product_options/{option_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDProductOptionsByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDVariationAttributes Reads variation attributes of a product of type variant or variation master or variation group.
*/
func (a *Client) GetProductsByIDVariationAttributes(params *GetProductsByIDVariationAttributesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDVariationAttributesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDVariationAttributes",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/variation_attributes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDVariationAttributesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDVariationAttributesByID Action to get variation attribute information only for master product.
*/
func (a *Client) GetProductsByIDVariationAttributesByID(params *GetProductsByIDVariationAttributesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDVariationAttributesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDVariationAttributesByID",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/variation_attributes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDVariationAttributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDVariationAttributesByIDValues Reads variation attribute values of a variation attribute bound to a product.
*/
func (a *Client) GetProductsByIDVariationAttributesByIDValues(params *GetProductsByIDVariationAttributesByIDValuesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDVariationAttributesByIDValuesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDVariationAttributesByIDValues",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/variation_attributes/{attribute_id}/values",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDVariationAttributesByIDValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDVariationAttributesByIDValuesByID Action to get product variation attribute value information.
*/
func (a *Client) GetProductsByIDVariationAttributesByIDValuesByID(params *GetProductsByIDVariationAttributesByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDVariationAttributesByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDVariationAttributesByIDValuesByID",
		Method:             "GET",
		PathPattern:        "/products/{product_id}/variation_attributes/{attribute_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDVariationAttributesByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDVariationGroups Reads variation groups for a product master.
*/
func (a *Client) GetProductsByIDVariationGroups(params *GetProductsByIDVariationGroupsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDVariationGroupsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDVariationGroups",
		Method:             "GET",
		PathPattern:        "/products/{master_product_id}/variation_groups",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDVariationGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDVariationGroupsByID Read a variation group for a product master.
*/
func (a *Client) GetProductsByIDVariationGroupsByID(params *GetProductsByIDVariationGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDVariationGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDVariationGroupsByID",
		Method:             "GET",
		PathPattern:        "/products/{master_product_id}/variation_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDVariationGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDVariations Reads variation for a product master.
*/
func (a *Client) GetProductsByIDVariations(params *GetProductsByIDVariationsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDVariationsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDVariations",
		Method:             "GET",
		PathPattern:        "/products/{master_product_id}/variations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDVariationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductsByIDVariationsByID Read a variation for a product master.
*/
func (a *Client) GetProductsByIDVariationsByID(params *GetProductsByIDVariationsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductsByIDVariationsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductsByIDVariationsByID",
		Method:             "GET",
		PathPattern:        "/products/{master_product_id}/variations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductsByIDVariationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchProductsByID Update a product using the information provided.

 Fields that can be updated:
 name, page_description, long_descripton, page_title,
 page_keywords, brand, ean,upc, manufacture_sku,
 manufacture_name, searchable, unit, searchable,
 online_flag, default_variant_id.
*/
func (a *Client) PatchProductsByID(params *PatchProductsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchProductsByID",
		Method:             "PATCH",
		PathPattern:        "/products/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchProductsByIDProductOptionsByID Updates a local product option with the information provided.
*/
func (a *Client) PatchProductsByIDProductOptionsByID(params *PatchProductsByIDProductOptionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsByIDProductOptionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchProductsByIDProductOptionsByID",
		Method:             "PATCH",
		PathPattern:        "/products/{product_id}/product_options/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsByIDProductOptionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchProductsByIDProductOptionsByIDValuesByID Updates a local product option value with the information provided.
*/
func (a *Client) PatchProductsByIDProductOptionsByIDValuesByID(params *PatchProductsByIDProductOptionsByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsByIDProductOptionsByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchProductsByIDProductOptionsByIDValuesByID",
		Method:             "PATCH",
		PathPattern:        "/products/{product_id}/product_options/{option_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsByIDProductOptionsByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchProductsByIDVariationAttributesByID Updates the variation attribute with the specified information.


 name
 slicing

*/
func (a *Client) PatchProductsByIDVariationAttributesByID(params *PatchProductsByIDVariationAttributesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsByIDVariationAttributesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchProductsByIDVariationAttributesByID",
		Method:             "PATCH",
		PathPattern:        "/products/{product_id}/variation_attributes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsByIDVariationAttributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchProductsByIDVariationAttributesByIDValuesByID Updates the variation attribute value of a variation attribute of a master product.
*/
func (a *Client) PatchProductsByIDVariationAttributesByIDValuesByID(params *PatchProductsByIDVariationAttributesByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsByIDVariationAttributesByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchProductsByIDVariationAttributesByIDValuesByID",
		Method:             "PATCH",
		PathPattern:        "/products/{product_id}/variation_attributes/{attribute_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsByIDVariationAttributesByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchProductsByIDVariationGroupsByID Update a variation group for a product master.
*/
func (a *Client) PatchProductsByIDVariationGroupsByID(params *PatchProductsByIDVariationGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsByIDVariationGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchProductsByIDVariationGroupsByID",
		Method:             "PATCH",
		PathPattern:        "/products/{master_product_id}/variation_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsByIDVariationGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchProductsByIDVariationsByID Update a variation for a product master.
*/
func (a *Client) PatchProductsByIDVariationsByID(params *PatchProductsByIDVariationsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProductsByIDVariationsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchProductsByIDVariationsByID",
		Method:             "PATCH",
		PathPattern:        "/products/{master_product_id}/variations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchProductsByIDVariationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostProductsByIDVariantSearch Searches product variations for master product or variation group product.

 The query attribute specifies a complex query that can be used to narrow down the search. This is the list
 of searchable attributes:

 id - String
 product_id - String
 name - String
 online - SiteSpecific Boolean
 in_stock - Boolean
 searchable - SiteSpecific Boolean
 ats - Actual available quantity to sell - Double
 variation_attribute.ATTRIBUTE_ID (Ex:variation_attribute.color) - String

 Sortable Fields:

 id - String
 product_id - String
 name - String
 online - SiteSpecific Boolean
 in_stock - Boolean
 searchable - SiteSpecific Boolean
 ats - Actual available quantity to sell - Double


 Note:
 The calculated value of "online" and "searchable" is used in the search/sort.
 A search/sort by the the site specific attributes require the Site ID query parameter to be set.
 They are "online", "in_stock", "searchable" and "ats".
  We assume that every field that starts with variation_attribute. is searchable and dot is followed by ATTRIBUTE_ID".


 The list of expansions to retrieve product information. The expand values available are:

 			_base - Basic product information is retrieved. This expand is included by default.
 			all - All product information including the following properties are retrieved:

        		image
        		price - site_id has to be provided to see this property
        		price_currency - site_id has to be provided to see this property

 			availability - Information related to the availability of the product variation.  This expand is not included by default.

        		ats - site_id has to be provided to see this property
        		in_stock - site_id has to be provided to see this property
        		online - site_id has to be provided to see this property
        		searchable

          variations - Information related to product variation is retrieved. This expand is included by default.
 			attributes - Information related to product variation attributes is retrieved. This expand is not included by default.

*/
func (a *Client) PostProductsByIDVariantSearch(params *PostProductsByIDVariantSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProductsByIDVariantSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postProductsByIDVariantSearch",
		Method:             "POST",
		PathPattern:        "/products/{id}/variant_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProductsByIDVariantSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutProductsByID Creates a product using the information provided. If a product with the same unique identifier, it will be cleaned and overwritten unless the header x-dw-validate-existing=true is passed in with the request.
*/
func (a *Client) PutProductsByID(params *PutProductsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProductsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putProductsByID",
		Method:             "PUT",
		PathPattern:        "/products/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProductsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutProductsByIDProductOptionsByID Creates a local product option using the information provided or binds a shared product option to the product.
*/
func (a *Client) PutProductsByIDProductOptionsByID(params *PutProductsByIDProductOptionsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProductsByIDProductOptionsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putProductsByIDProductOptionsByID",
		Method:             "PUT",
		PathPattern:        "/products/{product_id}/product_options/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProductsByIDProductOptionsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutProductsByIDProductOptionsByIDValuesByID Creates a local product option value using the information provided.
*/
func (a *Client) PutProductsByIDProductOptionsByIDValuesByID(params *PutProductsByIDProductOptionsByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProductsByIDProductOptionsByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putProductsByIDProductOptionsByIDValuesByID",
		Method:             "PUT",
		PathPattern:        "/products/{product_id}/product_options/{option_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProductsByIDProductOptionsByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutProductsByIDVariationAttributesByID Creates a variation attribute using the information provided.
*/
func (a *Client) PutProductsByIDVariationAttributesByID(params *PutProductsByIDVariationAttributesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProductsByIDVariationAttributesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putProductsByIDVariationAttributesByID",
		Method:             "PUT",
		PathPattern:        "/products/{product_id}/variation_attributes/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProductsByIDVariationAttributesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutProductsByIDVariationAttributesByIDValuesByID Action to create a product variation attribute value.
*/
func (a *Client) PutProductsByIDVariationAttributesByIDValuesByID(params *PutProductsByIDVariationAttributesByIDValuesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProductsByIDVariationAttributesByIDValuesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putProductsByIDVariationAttributesByIDValuesByID",
		Method:             "PUT",
		PathPattern:        "/products/{product_id}/variation_attributes/{attribute_id}/values/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProductsByIDVariationAttributesByIDValuesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutProductsByIDVariationGroupsByID Assign a variation group for a product master.  If the variation group product does not initially exist,
 one is created using the body passed in.
*/
func (a *Client) PutProductsByIDVariationGroupsByID(params *PutProductsByIDVariationGroupsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProductsByIDVariationGroupsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putProductsByIDVariationGroupsByID",
		Method:             "PUT",
		PathPattern:        "/products/{master_product_id}/variation_groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProductsByIDVariationGroupsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutProductsByIDVariationsByID Assign a variation for a product master.  If the variation product does not initially exist,
 one is created using the body passed in.
*/
func (a *Client) PutProductsByIDVariationsByID(params *PutProductsByIDVariationsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProductsByIDVariationsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putProductsByIDVariationsByID",
		Method:             "PUT",
		PathPattern:        "/products/{master_product_id}/variations/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProductsByIDVariationsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
