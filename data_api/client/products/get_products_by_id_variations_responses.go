// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// GetProductsByIDVariationsReader is a Reader for the GetProductsByIDVariations structure.
type GetProductsByIDVariationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProductsByIDVariationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewGetProductsByIDVariationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetProductsByIDVariationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetProductsByIDVariationsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetProductsByIDVariationsBadRequest creates a GetProductsByIDVariationsBadRequest with default headers values
func NewGetProductsByIDVariationsBadRequest() *GetProductsByIDVariationsBadRequest {
	return &GetProductsByIDVariationsBadRequest{}
}

/*GetProductsByIDVariationsBadRequest handles this case with default header values.

Indicates that the given product is not a variation master.
*/
type GetProductsByIDVariationsBadRequest struct {
}

func (o *GetProductsByIDVariationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /products/{master_product_id}/variations][%d] getProductsByIdVariationsBadRequest ", 400)
}

func (o *GetProductsByIDVariationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProductsByIDVariationsNotFound creates a GetProductsByIDVariationsNotFound with default headers values
func NewGetProductsByIDVariationsNotFound() *GetProductsByIDVariationsNotFound {
	return &GetProductsByIDVariationsNotFound{}
}

/*GetProductsByIDVariationsNotFound handles this case with default header values.

Indicates the master product is not found.
*/
type GetProductsByIDVariationsNotFound struct {
}

func (o *GetProductsByIDVariationsNotFound) Error() string {
	return fmt.Sprintf("[GET /products/{master_product_id}/variations][%d] getProductsByIdVariationsNotFound ", 404)
}

func (o *GetProductsByIDVariationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProductsByIDVariationsDefault creates a GetProductsByIDVariationsDefault with default headers values
func NewGetProductsByIDVariationsDefault(code int) *GetProductsByIDVariationsDefault {
	return &GetProductsByIDVariationsDefault{
		_statusCode: code,
	}
}

/*GetProductsByIDVariationsDefault handles this case with default header values.

GetProductsByIDVariationsDefault get products by ID variations default
*/
type GetProductsByIDVariationsDefault struct {
	_statusCode int

	Payload *models.Variants
}

// Code gets the status code for the get products by ID variations default response
func (o *GetProductsByIDVariationsDefault) Code() int {
	return o._statusCode
}

func (o *GetProductsByIDVariationsDefault) Error() string {
	return fmt.Sprintf("[GET /products/{master_product_id}/variations][%d] getProductsByIDVariations default  %+v", o._statusCode, o.Payload)
}

func (o *GetProductsByIDVariationsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Variants)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
