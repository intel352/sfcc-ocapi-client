// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutProductsByIDReader is a Reader for the PutProductsByID structure.
type PutProductsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutProductsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutProductsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutProductsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutProductsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutProductsByIDBadRequest creates a PutProductsByIDBadRequest with default headers values
func NewPutProductsByIDBadRequest() *PutProductsByIDBadRequest {
	return &PutProductsByIDBadRequest{}
}

/*PutProductsByIDBadRequest handles this case with default header values.

Indicates the catalog is not provided in the request. or Indicate the product is already existed. or Indicates the ID in request URL does not match the ID in the product document.
*/
type PutProductsByIDBadRequest struct {
}

func (o *PutProductsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsByIdBadRequest ", 400)
}

func (o *PutProductsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutProductsByIDNotFound creates a PutProductsByIDNotFound with default headers values
func NewPutProductsByIDNotFound() *PutProductsByIDNotFound {
	return &PutProductsByIDNotFound{}
}

/*PutProductsByIDNotFound handles this case with default header values.

Indicates the catalog is not found.
*/
type PutProductsByIDNotFound struct {
}

func (o *PutProductsByIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsByIdNotFound ", 404)
}

func (o *PutProductsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutProductsByIDDefault creates a PutProductsByIDDefault with default headers values
func NewPutProductsByIDDefault(code int) *PutProductsByIDDefault {
	return &PutProductsByIDDefault{
		_statusCode: code,
	}
}

/*PutProductsByIDDefault handles this case with default header values.

PutProductsByIDDefault put products by ID default
*/
type PutProductsByIDDefault struct {
	_statusCode int

	Payload *models.Product
}

// Code gets the status code for the put products by ID default response
func (o *PutProductsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutProductsByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutProductsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Product)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
