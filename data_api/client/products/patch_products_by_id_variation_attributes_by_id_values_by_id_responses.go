// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchProductsByIDVariationAttributesByIDValuesByIDReader is a Reader for the PatchProductsByIDVariationAttributesByIDValuesByID structure.
type PatchProductsByIDVariationAttributesByIDValuesByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchProductsByIDVariationAttributesByIDValuesByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 404:
		result := NewPatchProductsByIDVariationAttributesByIDValuesByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchProductsByIDVariationAttributesByIDValuesByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchProductsByIDVariationAttributesByIDValuesByIDNotFound creates a PatchProductsByIDVariationAttributesByIDValuesByIDNotFound with default headers values
func NewPatchProductsByIDVariationAttributesByIDValuesByIDNotFound() *PatchProductsByIDVariationAttributesByIDValuesByIDNotFound {
	return &PatchProductsByIDVariationAttributesByIDValuesByIDNotFound{}
}

/*PatchProductsByIDVariationAttributesByIDValuesByIDNotFound handles this case with default header values.

If the product id specified cannot be found. or If the attribute id specified is not a valid product attribute. or If the value id specified is not a valid value id.
*/
type PatchProductsByIDVariationAttributesByIDValuesByIDNotFound struct {
}

func (o *PatchProductsByIDVariationAttributesByIDValuesByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /products/{product_id}/variation_attributes/{attribute_id}/values/{id}][%d] patchProductsByIdVariationAttributesByIdValuesByIdNotFound ", 404)
}

func (o *PatchProductsByIDVariationAttributesByIDValuesByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchProductsByIDVariationAttributesByIDValuesByIDDefault creates a PatchProductsByIDVariationAttributesByIDValuesByIDDefault with default headers values
func NewPatchProductsByIDVariationAttributesByIDValuesByIDDefault(code int) *PatchProductsByIDVariationAttributesByIDValuesByIDDefault {
	return &PatchProductsByIDVariationAttributesByIDValuesByIDDefault{
		_statusCode: code,
	}
}

/*PatchProductsByIDVariationAttributesByIDValuesByIDDefault handles this case with default header values.

PatchProductsByIDVariationAttributesByIDValuesByIDDefault patch products by ID variation attributes by ID values by ID default
*/
type PatchProductsByIDVariationAttributesByIDValuesByIDDefault struct {
	_statusCode int

	Payload *models.VariationAttributeValue
}

// Code gets the status code for the patch products by ID variation attributes by ID values by ID default response
func (o *PatchProductsByIDVariationAttributesByIDValuesByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchProductsByIDVariationAttributesByIDValuesByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /products/{product_id}/variation_attributes/{attribute_id}/values/{id}][%d] patchProductsByIDVariationAttributesByIDValuesByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchProductsByIDVariationAttributesByIDValuesByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VariationAttributeValue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
