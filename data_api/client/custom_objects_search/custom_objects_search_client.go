// Code generated by go-swagger; DO NOT EDIT.

package custom_objects_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new custom objects search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for custom objects search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostCustomObjectsSearchByID Search resource for custom objects in scope of a specific custom object type.

 The custom object search document contains a search object that allows filtering on various attributes.


 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 key_value_string - String
 key_value_integer - Integer
 creation_date - Date
 last_modified - Date
 site_id - String
 any custom attribute


 Note that only searchable attributes can be used in sorting.
*/
func (a *Client) PostCustomObjectsSearchByID(params *PostCustomObjectsSearchByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomObjectsSearchByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postCustomObjectsSearchByID",
		Method:             "POST",
		PathPattern:        "/custom_objects_search/{object_type}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCustomObjectsSearchByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
