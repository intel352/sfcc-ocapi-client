// Code generated by go-swagger; DO NOT EDIT.

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PostJobsByIDExecutionsReader is a Reader for the PostJobsByIDExecutions structure.
type PostJobsByIDExecutionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostJobsByIDExecutionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPostJobsByIDExecutionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostJobsByIDExecutionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostJobsByIDExecutionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostJobsByIDExecutionsBadRequest creates a PostJobsByIDExecutionsBadRequest with default headers values
func NewPostJobsByIDExecutionsBadRequest() *PostJobsByIDExecutionsBadRequest {
	return &PostJobsByIDExecutionsBadRequest{}
}

/*PostJobsByIDExecutionsBadRequest handles this case with default header values.

if the job is
             already running. or if the job is invalid
             and is therefore not executable. or if the job could not
             be restarted. or if the job
             does not support restarting. or if the job could
             not be executed.
*/
type PostJobsByIDExecutionsBadRequest struct {
}

func (o *PostJobsByIDExecutionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /jobs/{job_id}/executions][%d] postJobsByIdExecutionsBadRequest ", 400)
}

func (o *PostJobsByIDExecutionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostJobsByIDExecutionsNotFound creates a PostJobsByIDExecutionsNotFound with default headers values
func NewPostJobsByIDExecutionsNotFound() *PostJobsByIDExecutionsNotFound {
	return &PostJobsByIDExecutionsNotFound{}
}

/*PostJobsByIDExecutionsNotFound handles this case with default header values.

if the job with the given job ID
             doesn't exist.
*/
type PostJobsByIDExecutionsNotFound struct {
}

func (o *PostJobsByIDExecutionsNotFound) Error() string {
	return fmt.Sprintf("[POST /jobs/{job_id}/executions][%d] postJobsByIdExecutionsNotFound ", 404)
}

func (o *PostJobsByIDExecutionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostJobsByIDExecutionsDefault creates a PostJobsByIDExecutionsDefault with default headers values
func NewPostJobsByIDExecutionsDefault(code int) *PostJobsByIDExecutionsDefault {
	return &PostJobsByIDExecutionsDefault{
		_statusCode: code,
	}
}

/*PostJobsByIDExecutionsDefault handles this case with default header values.

PostJobsByIDExecutionsDefault post jobs by ID executions default
*/
type PostJobsByIDExecutionsDefault struct {
	_statusCode int

	Payload *models.JobExecution
}

// Code gets the status code for the post jobs by ID executions default response
func (o *PostJobsByIDExecutionsDefault) Code() int {
	return o._statusCode
}

func (o *PostJobsByIDExecutionsDefault) Error() string {
	return fmt.Sprintf("[POST /jobs/{job_id}/executions][%d] postJobsByIDExecutions default  %+v", o._statusCode, o.Payload)
}

func (o *PostJobsByIDExecutionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobExecution)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
