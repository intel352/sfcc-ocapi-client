// Code generated by go-swagger; DO NOT EDIT.

package libraries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchLibrariesByIDContentByIDReader is a Reader for the PatchLibrariesByIDContentByID structure.
type PatchLibrariesByIDContentByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLibrariesByIDContentByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchLibrariesByIDContentByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchLibrariesByIDContentByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewPatchLibrariesByIDContentByIDPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchLibrariesByIDContentByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchLibrariesByIDContentByIDBadRequest creates a PatchLibrariesByIDContentByIDBadRequest with default headers values
func NewPatchLibrariesByIDContentByIDBadRequest() *PatchLibrariesByIDContentByIDBadRequest {
	return &PatchLibrariesByIDContentByIDBadRequest{}
}

/*PatchLibrariesByIDContentByIDBadRequest handles this case with default header values.

Indicates that a content asset with the ID to change to is already existing.
*/
type PatchLibrariesByIDContentByIDBadRequest struct {
}

func (o *PatchLibrariesByIDContentByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /libraries/{library_id}/content/{content_id}][%d] patchLibrariesByIdContentByIdBadRequest ", 400)
}

func (o *PatchLibrariesByIDContentByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchLibrariesByIDContentByIDNotFound creates a PatchLibrariesByIDContentByIDNotFound with default headers values
func NewPatchLibrariesByIDContentByIDNotFound() *PatchLibrariesByIDContentByIDNotFound {
	return &PatchLibrariesByIDContentByIDNotFound{}
}

/*PatchLibrariesByIDContentByIDNotFound handles this case with default header values.

Indicates that library with the given id is unknown. or Indicates that the content asset with the given id is unknown.
*/
type PatchLibrariesByIDContentByIDNotFound struct {
}

func (o *PatchLibrariesByIDContentByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /libraries/{library_id}/content/{content_id}][%d] patchLibrariesByIdContentByIdNotFound ", 404)
}

func (o *PatchLibrariesByIDContentByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchLibrariesByIDContentByIDPreconditionFailed creates a PatchLibrariesByIDContentByIDPreconditionFailed with default headers values
func NewPatchLibrariesByIDContentByIDPreconditionFailed() *PatchLibrariesByIDContentByIDPreconditionFailed {
	return &PatchLibrariesByIDContentByIDPreconditionFailed{}
}

/*PatchLibrariesByIDContentByIDPreconditionFailed handles this case with default header values.

Indicates that the ID from the request body doesn't match the URL-Id.
*/
type PatchLibrariesByIDContentByIDPreconditionFailed struct {
}

func (o *PatchLibrariesByIDContentByIDPreconditionFailed) Error() string {
	return fmt.Sprintf("[PATCH /libraries/{library_id}/content/{content_id}][%d] patchLibrariesByIdContentByIdPreconditionFailed ", 412)
}

func (o *PatchLibrariesByIDContentByIDPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchLibrariesByIDContentByIDDefault creates a PatchLibrariesByIDContentByIDDefault with default headers values
func NewPatchLibrariesByIDContentByIDDefault(code int) *PatchLibrariesByIDContentByIDDefault {
	return &PatchLibrariesByIDContentByIDDefault{
		_statusCode: code,
	}
}

/*PatchLibrariesByIDContentByIDDefault handles this case with default header values.

PatchLibrariesByIDContentByIDDefault patch libraries by ID content by ID default
*/
type PatchLibrariesByIDContentByIDDefault struct {
	_statusCode int

	Payload *models.ContentAsset
}

// Code gets the status code for the patch libraries by ID content by ID default response
func (o *PatchLibrariesByIDContentByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchLibrariesByIDContentByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /libraries/{library_id}/content/{content_id}][%d] patchLibrariesByIDContentByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchLibrariesByIDContentByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContentAsset)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
