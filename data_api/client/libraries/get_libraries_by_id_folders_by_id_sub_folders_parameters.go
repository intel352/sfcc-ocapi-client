// Code generated by go-swagger; DO NOT EDIT.

package libraries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLibrariesByIDFoldersByIDSubFoldersParams creates a new GetLibrariesByIDFoldersByIDSubFoldersParams object
// with the default values initialized.
func NewGetLibrariesByIDFoldersByIDSubFoldersParams() *GetLibrariesByIDFoldersByIDSubFoldersParams {
	var ()
	return &GetLibrariesByIDFoldersByIDSubFoldersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLibrariesByIDFoldersByIDSubFoldersParamsWithTimeout creates a new GetLibrariesByIDFoldersByIDSubFoldersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLibrariesByIDFoldersByIDSubFoldersParamsWithTimeout(timeout time.Duration) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	var ()
	return &GetLibrariesByIDFoldersByIDSubFoldersParams{

		timeout: timeout,
	}
}

// NewGetLibrariesByIDFoldersByIDSubFoldersParamsWithContext creates a new GetLibrariesByIDFoldersByIDSubFoldersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLibrariesByIDFoldersByIDSubFoldersParamsWithContext(ctx context.Context) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	var ()
	return &GetLibrariesByIDFoldersByIDSubFoldersParams{

		Context: ctx,
	}
}

// NewGetLibrariesByIDFoldersByIDSubFoldersParamsWithHTTPClient creates a new GetLibrariesByIDFoldersByIDSubFoldersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLibrariesByIDFoldersByIDSubFoldersParamsWithHTTPClient(client *http.Client) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	var ()
	return &GetLibrariesByIDFoldersByIDSubFoldersParams{
		HTTPClient: client,
	}
}

/*GetLibrariesByIDFoldersByIDSubFoldersParams contains all the parameters to send to the API endpoint
for the get libraries by ID folders by ID sub folders operation typically these are written to a http.Request
*/
type GetLibrariesByIDFoldersByIDSubFoldersParams struct {

	/*Count*/
	Count *int32
	/*FolderID
	  ID of a target folder.

	*/
	FolderID string
	/*LibraryID
	  ID of the shared library or the site-id in case of a private library.

	*/
	LibraryID string
	/*Start*/
	Start *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) WithTimeout(timeout time.Duration) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) WithContext(ctx context.Context) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) WithHTTPClient(client *http.Client) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) WithCount(count *int32) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) SetCount(count *int32) {
	o.Count = count
}

// WithFolderID adds the folderID to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) WithFolderID(folderID string) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	o.SetFolderID(folderID)
	return o
}

// SetFolderID adds the folderId to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) SetFolderID(folderID string) {
	o.FolderID = folderID
}

// WithLibraryID adds the libraryID to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) WithLibraryID(libraryID string) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	o.SetLibraryID(libraryID)
	return o
}

// SetLibraryID adds the libraryId to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) SetLibraryID(libraryID string) {
	o.LibraryID = libraryID
}

// WithStart adds the start to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) WithStart(start *int32) *GetLibrariesByIDFoldersByIDSubFoldersParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get libraries by ID folders by ID sub folders params
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) SetStart(start *int32) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetLibrariesByIDFoldersByIDSubFoldersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	// path param folder_id
	if err := r.SetPathParam("folder_id", o.FolderID); err != nil {
		return err
	}

	// path param library_id
	if err := r.SetPathParam("library_id", o.LibraryID); err != nil {
		return err
	}

	if o.Start != nil {

		// query param start
		var qrStart int32
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt32(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
