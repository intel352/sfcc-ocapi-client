// Code generated by go-swagger; DO NOT EDIT.

package libraries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// NewPatchLibrariesByIDContentByIDParams creates a new PatchLibrariesByIDContentByIDParams object
// with the default values initialized.
func NewPatchLibrariesByIDContentByIDParams() *PatchLibrariesByIDContentByIDParams {
	var ()
	return &PatchLibrariesByIDContentByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchLibrariesByIDContentByIDParamsWithTimeout creates a new PatchLibrariesByIDContentByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchLibrariesByIDContentByIDParamsWithTimeout(timeout time.Duration) *PatchLibrariesByIDContentByIDParams {
	var ()
	return &PatchLibrariesByIDContentByIDParams{

		timeout: timeout,
	}
}

// NewPatchLibrariesByIDContentByIDParamsWithContext creates a new PatchLibrariesByIDContentByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchLibrariesByIDContentByIDParamsWithContext(ctx context.Context) *PatchLibrariesByIDContentByIDParams {
	var ()
	return &PatchLibrariesByIDContentByIDParams{

		Context: ctx,
	}
}

// NewPatchLibrariesByIDContentByIDParamsWithHTTPClient creates a new PatchLibrariesByIDContentByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchLibrariesByIDContentByIDParamsWithHTTPClient(client *http.Client) *PatchLibrariesByIDContentByIDParams {
	var ()
	return &PatchLibrariesByIDContentByIDParams{
		HTTPClient: client,
	}
}

/*PatchLibrariesByIDContentByIDParams contains all the parameters to send to the API endpoint
for the patch libraries by ID content by ID operation typically these are written to a http.Request
*/
type PatchLibrariesByIDContentByIDParams struct {

	/*Body*/
	Body *models.ContentAsset
	/*ContentID
	  the ID of the content asset to retrieve.

	*/
	ContentID string
	/*LibraryID
	  ID of the shared library or the site-id in case of a private library.

	*/
	LibraryID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) WithTimeout(timeout time.Duration) *PatchLibrariesByIDContentByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) WithContext(ctx context.Context) *PatchLibrariesByIDContentByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) WithHTTPClient(client *http.Client) *PatchLibrariesByIDContentByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) WithBody(body *models.ContentAsset) *PatchLibrariesByIDContentByIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) SetBody(body *models.ContentAsset) {
	o.Body = body
}

// WithContentID adds the contentID to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) WithContentID(contentID string) *PatchLibrariesByIDContentByIDParams {
	o.SetContentID(contentID)
	return o
}

// SetContentID adds the contentId to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) SetContentID(contentID string) {
	o.ContentID = contentID
}

// WithLibraryID adds the libraryID to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) WithLibraryID(libraryID string) *PatchLibrariesByIDContentByIDParams {
	o.SetLibraryID(libraryID)
	return o
}

// SetLibraryID adds the libraryId to the patch libraries by ID content by ID params
func (o *PatchLibrariesByIDContentByIDParams) SetLibraryID(libraryID string) {
	o.LibraryID = libraryID
}

// WriteToRequest writes these params to a swagger request
func (o *PatchLibrariesByIDContentByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param content_id
	if err := r.SetPathParam("content_id", o.ContentID); err != nil {
		return err
	}

	// path param library_id
	if err := r.SetPathParam("library_id", o.LibraryID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
