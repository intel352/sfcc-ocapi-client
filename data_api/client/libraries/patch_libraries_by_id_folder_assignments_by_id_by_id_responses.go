// Code generated by go-swagger; DO NOT EDIT.

package libraries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PatchLibrariesByIDFolderAssignmentsByIDByIDReader is a Reader for the PatchLibrariesByIDFolderAssignmentsByIDByID structure.
type PatchLibrariesByIDFolderAssignmentsByIDByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchLibrariesByIDFolderAssignmentsByIDByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 404:
		result := NewPatchLibrariesByIDFolderAssignmentsByIDByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchLibrariesByIDFolderAssignmentsByIDByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchLibrariesByIDFolderAssignmentsByIDByIDNotFound creates a PatchLibrariesByIDFolderAssignmentsByIDByIDNotFound with default headers values
func NewPatchLibrariesByIDFolderAssignmentsByIDByIDNotFound() *PatchLibrariesByIDFolderAssignmentsByIDByIDNotFound {
	return &PatchLibrariesByIDFolderAssignmentsByIDByIDNotFound{}
}

/*PatchLibrariesByIDFolderAssignmentsByIDByIDNotFound handles this case with default header values.

Indicates that library with the given id is unknown. or Indicates that the folder with the given id is unknown. or Indicates that the content asset with the given id is unknown. or Indicates that no assignment between the given content asset and folder exists.
*/
type PatchLibrariesByIDFolderAssignmentsByIDByIDNotFound struct {
}

func (o *PatchLibrariesByIDFolderAssignmentsByIDByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /libraries/{library_id}/folder_assignments/{content_id}/{folder_id}][%d] patchLibrariesByIdFolderAssignmentsByIdByIdNotFound ", 404)
}

func (o *PatchLibrariesByIDFolderAssignmentsByIDByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchLibrariesByIDFolderAssignmentsByIDByIDDefault creates a PatchLibrariesByIDFolderAssignmentsByIDByIDDefault with default headers values
func NewPatchLibrariesByIDFolderAssignmentsByIDByIDDefault(code int) *PatchLibrariesByIDFolderAssignmentsByIDByIDDefault {
	return &PatchLibrariesByIDFolderAssignmentsByIDByIDDefault{
		_statusCode: code,
	}
}

/*PatchLibrariesByIDFolderAssignmentsByIDByIDDefault handles this case with default header values.

PatchLibrariesByIDFolderAssignmentsByIDByIDDefault patch libraries by ID folder assignments by ID by ID default
*/
type PatchLibrariesByIDFolderAssignmentsByIDByIDDefault struct {
	_statusCode int

	Payload *models.ContentFolderAssignment
}

// Code gets the status code for the patch libraries by ID folder assignments by ID by ID default response
func (o *PatchLibrariesByIDFolderAssignmentsByIDByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchLibrariesByIDFolderAssignmentsByIDByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /libraries/{library_id}/folder_assignments/{content_id}/{folder_id}][%d] patchLibrariesByIDFolderAssignmentsByIDByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchLibrariesByIDFolderAssignmentsByIDByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContentFolderAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
