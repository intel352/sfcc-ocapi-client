// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteRolesByIDUsersByIDReader is a Reader for the DeleteRolesByIDUsersByID structure.
type DeleteRolesByIDUsersByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRolesByIDUsersByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteRolesByIDUsersByIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewDeleteRolesByIDUsersByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteRolesByIDUsersByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRolesByIDUsersByIDNoContent creates a DeleteRolesByIDUsersByIDNoContent with default headers values
func NewDeleteRolesByIDUsersByIDNoContent() *DeleteRolesByIDUsersByIDNoContent {
	return &DeleteRolesByIDUsersByIDNoContent{}
}

/*DeleteRolesByIDUsersByIDNoContent handles this case with default header values.

DeleteRolesByIDUsersByIDNoContent delete roles by Id users by Id no content
*/
type DeleteRolesByIDUsersByIDNoContent struct {
}

func (o *DeleteRolesByIDUsersByIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/users/{login}][%d] deleteRolesByIdUsersByIdNoContent ", 204)
}

func (o *DeleteRolesByIDUsersByIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRolesByIDUsersByIDForbidden creates a DeleteRolesByIDUsersByIDForbidden with default headers values
func NewDeleteRolesByIDUsersByIDForbidden() *DeleteRolesByIDUsersByIDForbidden {
	return &DeleteRolesByIDUsersByIDForbidden{}
}

/*DeleteRolesByIDUsersByIDForbidden handles this case with default header values.

Thrown if the admin user is unassigned from the Administrator role.
*/
type DeleteRolesByIDUsersByIDForbidden struct {
}

func (o *DeleteRolesByIDUsersByIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/users/{login}][%d] deleteRolesByIdUsersByIdForbidden ", 403)
}

func (o *DeleteRolesByIDUsersByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRolesByIDUsersByIDNotFound creates a DeleteRolesByIDUsersByIDNotFound with default headers values
func NewDeleteRolesByIDUsersByIDNotFound() *DeleteRolesByIDUsersByIDNotFound {
	return &DeleteRolesByIDUsersByIDNotFound{}
}

/*DeleteRolesByIDUsersByIDNotFound handles this case with default header values.

Thrown if the access role with the given id does not exist. or Thrown if a user with the given login does not exist.
*/
type DeleteRolesByIDUsersByIDNotFound struct {
}

func (o *DeleteRolesByIDUsersByIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /roles/{id}/users/{login}][%d] deleteRolesByIdUsersByIdNotFound ", 404)
}

func (o *DeleteRolesByIDUsersByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
