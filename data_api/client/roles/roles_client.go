// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteRolesByID Action to delete an access role.
*/
func (a *Client) DeleteRolesByID(params *DeleteRolesByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRolesByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRolesByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRolesByID",
		Method:             "DELETE",
		PathPattern:        "/roles/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRolesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRolesByIDNoContent), nil

}

/*
DeleteRolesByIDUsersByID Action to unassign a user to an access role
*/
func (a *Client) DeleteRolesByIDUsersByID(params *DeleteRolesByIDUsersByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRolesByIDUsersByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRolesByIDUsersByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRolesByIDUsersByID",
		Method:             "DELETE",
		PathPattern:        "/roles/{id}/users/{login}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRolesByIDUsersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRolesByIDUsersByIDNoContent), nil

}

/*
GetRoles Action to get all the access roles with no filtering.
*/
func (a *Client) GetRoles(params *GetRolesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoles",
		Method:             "GET",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetRolesByID Action to get a single access role.
*/
func (a *Client) GetRolesByID(params *GetRolesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRolesByID",
		Method:             "GET",
		PathPattern:        "/roles/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRolesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetRolesByIDPermissions Retrieves a list of permissions assigned to the given role.
*/
func (a *Client) GetRolesByIDPermissions(params *GetRolesByIDPermissionsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolesByIDPermissionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRolesByIDPermissions",
		Method:             "GET",
		PathPattern:        "/roles/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRolesByIDPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetRolesByIDUsers Action to get all the users assigned to the specified access role.
*/
func (a *Client) GetRolesByIDUsers(params *GetRolesByIDUsersParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRolesByIDUsersParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRolesByIDUsers",
		Method:             "GET",
		PathPattern:        "/roles/{id}/users",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRolesByIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostRolesByIDUserSearch Searches for users of the specified access role.
 The query attribute specifies a complex query that can be used to narrow down the search. These are the list
 of searchable attributes:

 login - String
 email - String
 first_name - String
 last_name - String
 external_id - String
 last_login_date - Date
 is_locked - Boolean
 is_disabled - Boolean


 The output of the query can also be sorted. These are the list of sortable attributes:

 login - String
 email - String
 first_name - String
 last_name - String
 external_id - String
 last_login_date - Date

*/
func (a *Client) PostRolesByIDUserSearch(params *PostRolesByIDUserSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRolesByIDUserSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRolesByIDUserSearch",
		Method:             "POST",
		PathPattern:        "/roles/{id}/user_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRolesByIDUserSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutRolesByID Action to create an access role.
*/
func (a *Client) PutRolesByID(params *PutRolesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRolesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRolesByID",
		Method:             "PUT",
		PathPattern:        "/roles/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRolesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutRolesByIDPermissions Assigns permissions to the given role. This will replace the current permission assignments. For the 'Administrator'
 role only adjustments for custom module permissions will be processed but other given permissions will be ignored.
*/
func (a *Client) PutRolesByIDPermissions(params *PutRolesByIDPermissionsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRolesByIDPermissionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRolesByIDPermissions",
		Method:             "PUT",
		PathPattern:        "/roles/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRolesByIDPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutRolesByIDUsersByID Action to assign a user to an access role
*/
func (a *Client) PutRolesByIDUsersByID(params *PutRolesByIDUsersByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRolesByIDUsersByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putRolesByIDUsersByID",
		Method:             "PUT",
		PathPattern:        "/roles/{id}/users/{login}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutRolesByIDUsersByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
