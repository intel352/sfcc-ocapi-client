// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutRolesByIDUsersByIDReader is a Reader for the PutRolesByIDUsersByID structure.
type PutRolesByIDUsersByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRolesByIDUsersByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutRolesByIDUsersByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutRolesByIDUsersByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutRolesByIDUsersByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutRolesByIDUsersByIDBadRequest creates a PutRolesByIDUsersByIDBadRequest with default headers values
func NewPutRolesByIDUsersByIDBadRequest() *PutRolesByIDUsersByIDBadRequest {
	return &PutRolesByIDUsersByIDBadRequest{}
}

/*PutRolesByIDUsersByIDBadRequest handles this case with default header values.

Thrown if the access role with the given id does not exist. or Thrown if a user with the given login does not exist.
*/
type PutRolesByIDUsersByIDBadRequest struct {
}

func (o *PutRolesByIDUsersByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}/users/{login}][%d] putRolesByIdUsersByIdBadRequest ", 400)
}

func (o *PutRolesByIDUsersByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRolesByIDUsersByIDForbidden creates a PutRolesByIDUsersByIDForbidden with default headers values
func NewPutRolesByIDUsersByIDForbidden() *PutRolesByIDUsersByIDForbidden {
	return &PutRolesByIDUsersByIDForbidden{}
}

/*PutRolesByIDUsersByIDForbidden handles this case with default header values.

Thrown if the operation is not allowed.
*/
type PutRolesByIDUsersByIDForbidden struct {
}

func (o *PutRolesByIDUsersByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}/users/{login}][%d] putRolesByIdUsersByIdForbidden ", 403)
}

func (o *PutRolesByIDUsersByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRolesByIDUsersByIDDefault creates a PutRolesByIDUsersByIDDefault with default headers values
func NewPutRolesByIDUsersByIDDefault(code int) *PutRolesByIDUsersByIDDefault {
	return &PutRolesByIDUsersByIDDefault{
		_statusCode: code,
	}
}

/*PutRolesByIDUsersByIDDefault handles this case with default header values.

PutRolesByIDUsersByIDDefault put roles by ID users by ID default
*/
type PutRolesByIDUsersByIDDefault struct {
	_statusCode int

	Payload *models.User
}

// Code gets the status code for the put roles by ID users by ID default response
func (o *PutRolesByIDUsersByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutRolesByIDUsersByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}/users/{login}][%d] putRolesByIDUsersByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutRolesByIDUsersByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
