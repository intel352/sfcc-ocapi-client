// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutRolesByIDReader is a Reader for the PutRolesByID structure.
type PutRolesByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRolesByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutRolesByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutRolesByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutRolesByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutRolesByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutRolesByIDBadRequest creates a PutRolesByIDBadRequest with default headers values
func NewPutRolesByIDBadRequest() *PutRolesByIDBadRequest {
	return &PutRolesByIDBadRequest{}
}

/*PutRolesByIDBadRequest handles this case with default header values.

Thrown when id in query parameter is different from the id in the body.
*/
type PutRolesByIDBadRequest struct {
}

func (o *PutRolesByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRolesByIdBadRequest ", 400)
}

func (o *PutRolesByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRolesByIDForbidden creates a PutRolesByIDForbidden with default headers values
func NewPutRolesByIDForbidden() *PutRolesByIDForbidden {
	return &PutRolesByIDForbidden{}
}

/*PutRolesByIDForbidden handles this case with default header values.

Thrown when an access role with the id "Support" or "Business Support" should be created.
*/
type PutRolesByIDForbidden struct {
}

func (o *PutRolesByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRolesByIdForbidden ", 403)
}

func (o *PutRolesByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRolesByIDConflict creates a PutRolesByIDConflict with default headers values
func NewPutRolesByIDConflict() *PutRolesByIDConflict {
	return &PutRolesByIDConflict{}
}

/*PutRolesByIDConflict handles this case with default header values.

Thrown when an access role with the given id already exists.
*/
type PutRolesByIDConflict struct {
}

func (o *PutRolesByIDConflict) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRolesByIdConflict ", 409)
}

func (o *PutRolesByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRolesByIDDefault creates a PutRolesByIDDefault with default headers values
func NewPutRolesByIDDefault(code int) *PutRolesByIDDefault {
	return &PutRolesByIDDefault{
		_statusCode: code,
	}
}

/*PutRolesByIDDefault handles this case with default header values.

PutRolesByIDDefault put roles by ID default
*/
type PutRolesByIDDefault struct {
	_statusCode int

	Payload *models.Role
}

// Code gets the status code for the put roles by ID default response
func (o *PutRolesByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutRolesByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}][%d] putRolesByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutRolesByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Role)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
