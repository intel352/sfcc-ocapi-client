// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/data_api/models"
)

// PutRolesByIDPermissionsReader is a Reader for the PutRolesByIDPermissions structure.
type PutRolesByIDPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutRolesByIDPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutRolesByIDPermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutRolesByIDPermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutRolesByIDPermissionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutRolesByIDPermissionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutRolesByIDPermissionsBadRequest creates a PutRolesByIDPermissionsBadRequest with default headers values
func NewPutRolesByIDPermissionsBadRequest() *PutRolesByIDPermissionsBadRequest {
	return &PutRolesByIDPermissionsBadRequest{}
}

/*PutRolesByIDPermissionsBadRequest handles this case with default header values.

If the type of a given permission does not match the expected type. or If the id of a given permission could not be resolved to a permission. or If a permission value is given that is either unknown or not supported for a certain permission. or If values are given permission multi values are used where only single values are support or vice versa (e.g. setting 'values' attribute of ModulePermissionWO in organization scope). or If no permission for the 'default' locale is given (permission for 'default' locale is mandatory). or If a site specific permission is given for a site that is not known. or If a permission is listed more than once within a scope. or If the 'system' flag is not set for a module permission.
*/
type PutRolesByIDPermissionsBadRequest struct {
}

func (o *PutRolesByIDPermissionsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}/permissions][%d] putRolesByIdPermissionsBadRequest ", 400)
}

func (o *PutRolesByIDPermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRolesByIDPermissionsNotFound creates a PutRolesByIDPermissionsNotFound with default headers values
func NewPutRolesByIDPermissionsNotFound() *PutRolesByIDPermissionsNotFound {
	return &PutRolesByIDPermissionsNotFound{}
}

/*PutRolesByIDPermissionsNotFound handles this case with default header values.

If the specified access role does not exist.
*/
type PutRolesByIDPermissionsNotFound struct {
}

func (o *PutRolesByIDPermissionsNotFound) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}/permissions][%d] putRolesByIdPermissionsNotFound ", 404)
}

func (o *PutRolesByIDPermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRolesByIDPermissionsConflict creates a PutRolesByIDPermissionsConflict with default headers values
func NewPutRolesByIDPermissionsConflict() *PutRolesByIDPermissionsConflict {
	return &PutRolesByIDPermissionsConflict{}
}

/*PutRolesByIDPermissionsConflict handles this case with default header values.

In case of state token conflicts.
*/
type PutRolesByIDPermissionsConflict struct {
}

func (o *PutRolesByIDPermissionsConflict) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}/permissions][%d] putRolesByIdPermissionsConflict ", 409)
}

func (o *PutRolesByIDPermissionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutRolesByIDPermissionsDefault creates a PutRolesByIDPermissionsDefault with default headers values
func NewPutRolesByIDPermissionsDefault(code int) *PutRolesByIDPermissionsDefault {
	return &PutRolesByIDPermissionsDefault{
		_statusCode: code,
	}
}

/*PutRolesByIDPermissionsDefault handles this case with default header values.

PutRolesByIDPermissionsDefault put roles by ID permissions default
*/
type PutRolesByIDPermissionsDefault struct {
	_statusCode int

	Payload *models.RolePermissions
}

// Code gets the status code for the put roles by ID permissions default response
func (o *PutRolesByIDPermissionsDefault) Code() int {
	return o._statusCode
}

func (o *PutRolesByIDPermissionsDefault) Error() string {
	return fmt.Sprintf("[PUT /roles/{id}/permissions][%d] putRolesByIDPermissions default  %+v", o._statusCode, o.Payload)
}

func (o *PutRolesByIDPermissionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RolePermissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
