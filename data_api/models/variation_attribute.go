// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VariationAttribute Document representing a variation attribute.
// swagger:model variation_attribute
type VariationAttribute struct {

	// The id of the requested attribute definition.
	// Required: true
	AttributeDefinitionID *string `json:"attribute_definition_id"`

	// The localized display name of the variation attribute definition.
	AttributeDefinitionName map[string]string `json:"attribute_definition_name,omitempty"`

	// default variation attribute value
	DefaultValue string `json:"default_value,omitempty"`

	// The id of the variation attribute.
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// URL that is used to get this instance
	Link string `json:"link,omitempty"`

	// The localized display name of the variation attribute.
	Name map[string]string `json:"name,omitempty"`

	// Returns the value of attribute 'shared' if attribute is local or shared
	Shared bool `json:"shared,omitempty"`

	// Returns the value of attribute 'slicing'.
	Slicing bool `json:"slicing,omitempty"`

	// The sorted array of variation values. This array can be empty.
	Values []*VariationAttributeValue `json:"values"`

	// variation attribute type
	// Enum: [string int unknown]
	VariationAttributeType string `json:"variation_attribute_type,omitempty"`
}

// Validate validates this variation attribute
func (m *VariationAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeDefinitionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariationAttributeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VariationAttribute) validateAttributeDefinitionID(formats strfmt.Registry) error {

	if err := validate.Required("attribute_definition_id", "body", m.AttributeDefinitionID); err != nil {
		return err
	}

	return nil
}

func (m *VariationAttribute) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *VariationAttribute) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var variationAttributeTypeVariationAttributeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","int","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		variationAttributeTypeVariationAttributeTypePropEnum = append(variationAttributeTypeVariationAttributeTypePropEnum, v)
	}
}

const (

	// VariationAttributeVariationAttributeTypeString captures enum value "string"
	VariationAttributeVariationAttributeTypeString string = "string"

	// VariationAttributeVariationAttributeTypeInt captures enum value "int"
	VariationAttributeVariationAttributeTypeInt string = "int"

	// VariationAttributeVariationAttributeTypeUnknown captures enum value "unknown"
	VariationAttributeVariationAttributeTypeUnknown string = "unknown"
)

// prop value enum
func (m *VariationAttribute) validateVariationAttributeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, variationAttributeTypeVariationAttributeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VariationAttribute) validateVariationAttributeType(formats strfmt.Registry) error {

	if swag.IsZero(m.VariationAttributeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVariationAttributeTypeEnum("variation_attribute_type", "body", m.VariationAttributeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VariationAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VariationAttribute) UnmarshalBinary(b []byte) error {
	var res VariationAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
