// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RedemptionLimitPerPeriod Document representing a coupon redemption limit.
// swagger:model redemption_limit_per_period
type RedemptionLimitPerPeriod struct {

	// The limit on the number of times a coupon can be redeemed for a specified redemption time period.
	// Minimum: 0
	Limit *int32 `json:"limit,omitempty"`

	// The redemption time period.
	// Maximum: 999
	// Minimum: 0
	RedemptionTimeFrame *int32 `json:"redemption_time_frame,omitempty"`
}

// Validate validates this redemption limit per period
func (m *RedemptionLimitPerPeriod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedemptionTimeFrame(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RedemptionLimitPerPeriod) validateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", int64(*m.Limit), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RedemptionLimitPerPeriod) validateRedemptionTimeFrame(formats strfmt.Registry) error {

	if swag.IsZero(m.RedemptionTimeFrame) { // not required
		return nil
	}

	if err := validate.MinimumInt("redemption_time_frame", "body", int64(*m.RedemptionTimeFrame), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("redemption_time_frame", "body", int64(*m.RedemptionTimeFrame), 999, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RedemptionLimitPerPeriod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RedemptionLimitPerPeriod) UnmarshalBinary(b []byte) error {
	var res RedemptionLimitPerPeriod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
