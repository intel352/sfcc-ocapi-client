// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SiteResourceInfo Object to represent a site configuration and available resources in the site configuration.
// swagger:model site_resource_info
type SiteResourceInfo struct {

	// Site configuration
	// Required: true
	SiteConfigs []*ResourceInfo `json:"site_configs"`

	// Site ID
	SiteID string `json:"site_id,omitempty"`
}

// Validate validates this site resource info
func (m *SiteResourceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSiteConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteResourceInfo) validateSiteConfigs(formats strfmt.Registry) error {

	if err := validate.Required("site_configs", "body", m.SiteConfigs); err != nil {
		return err
	}

	for i := 0; i < len(m.SiteConfigs); i++ {
		if swag.IsZero(m.SiteConfigs[i]) { // not required
			continue
		}

		if m.SiteConfigs[i] != nil {
			if err := m.SiteConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("site_configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteResourceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteResourceInfo) UnmarshalBinary(b []byte) error {
	var res SiteResourceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
