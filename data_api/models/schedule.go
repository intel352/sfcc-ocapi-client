// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Schedule Document representing a time schedule for slots.
// swagger:model schedule
type Schedule struct {

	// The date to end of validity. ISO8601 date time format: yyyy-MM-dd'T'HH:mm:ssZ.
	// Format: date-time
	EndDate strfmt.DateTime `json:"end_date,omitempty"`

	// The recurrence of the schedule by day of week and time of day. Not all schedules will support a recurrence.
	Recurrence *Recurrence `json:"recurrence,omitempty"`

	// The date to start validity. ISO8601 date time format: yyyy-MM-dd'T'HH:mm:ssZ.
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty"`
}

// Validate validates this schedule
func (m *Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Schedule) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Schedule) validateRecurrence(formats strfmt.Registry) error {

	if swag.IsZero(m.Recurrence) { // not required
		return nil
	}

	if m.Recurrence != nil {
		if err := m.Recurrence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recurrence")
			}
			return err
		}
	}

	return nil
}

func (m *Schedule) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Schedule) UnmarshalBinary(b []byte) error {
	var res Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
