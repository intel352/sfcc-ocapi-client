// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleWebdavPermission Document representing a WebDAV permission.
// swagger:model role_webdav_permission
type RoleWebdavPermission struct {

	// The related folder of the WebDAV permission.
	// Required: true
	// Min Length: 1
	Folder *string `json:"folder"`

	// The permission type ("webdav").
	// Required: true
	// Min Length: 1
	Type *string `json:"type"`

	// The non domain specific value for the WebDAV permission, e.g. ACCESS or READONLY.
	Value string `json:"value,omitempty"`

	// The map of value per domain for the WebDAV permission, e.g. ACCESS or READONLY per domain name.
	Values map[string]string `json:"values,omitempty"`
}

// Validate validates this role webdav permission
func (m *RoleWebdavPermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleWebdavPermission) validateFolder(formats strfmt.Registry) error {

	if err := validate.Required("folder", "body", m.Folder); err != nil {
		return err
	}

	if err := validate.MinLength("folder", "body", string(*m.Folder), 1); err != nil {
		return err
	}

	return nil
}

func (m *RoleWebdavPermission) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.MinLength("type", "body", string(*m.Type), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleWebdavPermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleWebdavPermission) UnmarshalBinary(b []byte) error {
	var res RoleWebdavPermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
