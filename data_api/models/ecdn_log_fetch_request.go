// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EcdnLogFetchRequest Input-Document for requesting a Log-Fetch process.
// swagger:model ecdn_log_fetch_request
type EcdnLogFetchRequest struct {

	// Optional end time for log file entries, in Unix time stamp format. Must not be more than 1 hour after the start time. If not passed, a one hour time frame is assumed for the log file.
	// Format: date-time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// Start time for log file entries, in Unix time stamp format. Must not be more than 7 days in the past
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"start_time"`

	// The internationalized domain name representation (from RFC 3490) of the zone name
	// Required: true
	ZoneName *string `json:"zone_name"`
}

// Validate validates this ecdn log fetch request
func (m *EcdnLogFetchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EcdnLogFetchRequest) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EcdnLogFetchRequest) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EcdnLogFetchRequest) validateZoneName(formats strfmt.Registry) error {

	if err := validate.Required("zone_name", "body", m.ZoneName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EcdnLogFetchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EcdnLogFetchRequest) UnmarshalBinary(b []byte) error {
	var res EcdnLogFetchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
