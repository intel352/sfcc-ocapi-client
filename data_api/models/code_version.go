// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CodeVersion Document representing a code version
// swagger:model code_version
type CodeVersion struct {

	// The code version activation time.
	// Format: date-time
	ActivationTime strfmt.DateTime `json:"activation_time,omitempty"`

	// Use this method to determine, if this code version is currently active.
	Active bool `json:"active,omitempty"`

	// A list containing the names of all cartridges participating in this code version.
	Cartridges []string `json:"cartridges"`

	// The code version compatibility mode.
	CompatibilityMode string `json:"compatibility_mode,omitempty"`

	// The code version id.
	ID string `json:"id,omitempty"`

	// The last time, when the code version was changed.
	// Format: date-time
	LastModificationTime strfmt.DateTime `json:"last_modification_time,omitempty"`

	// Use this method to determine, if this code version is the current rollback version.
	Rollback bool `json:"rollback,omitempty"`

	// Returns the total size of the file system content of this code version in bytes.
	TotalSize int64 `json:"total_size,omitempty"`

	// Returns the HTTPS based WebDAV URL that can be used to access the code version resources.
	WebDavURL string `json:"web_dav_url,omitempty"`
}

// Validate validates this code version
func (m *CodeVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModificationTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CodeVersion) validateActivationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("activation_time", "body", "date-time", m.ActivationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CodeVersion) validateLastModificationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModificationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modification_time", "body", "date-time", m.LastModificationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CodeVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CodeVersion) UnmarshalBinary(b []byte) error {
	var res CodeVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
