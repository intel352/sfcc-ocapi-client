// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RoleModulePermissions Document listing the module permissions assigned to a certain role.
// swagger:model role_module_permissions
type RoleModulePermissions struct {

	// The list of organization module permissions.
	Organization []*RoleModulePermission `json:"organization"`

	// The list of site module permissions.
	Site []*RoleModulePermission `json:"site"`
}

// Validate validates this role module permissions
func (m *RoleModulePermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleModulePermissions) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	for i := 0; i < len(m.Organization); i++ {
		if swag.IsZero(m.Organization[i]) { // not required
			continue
		}

		if m.Organization[i] != nil {
			if err := m.Organization[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organization" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoleModulePermissions) validateSite(formats strfmt.Registry) error {

	if swag.IsZero(m.Site) { // not required
		return nil
	}

	for i := 0; i < len(m.Site); i++ {
		if swag.IsZero(m.Site[i]) { // not required
			continue
		}

		if m.Site[i] != nil {
			if err := m.Site[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("site" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleModulePermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleModulePermissions) UnmarshalBinary(b []byte) error {
	var res RoleModulePermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
