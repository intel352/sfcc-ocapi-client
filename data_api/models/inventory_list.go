// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryList Document representing a inventorylist
// swagger:model inventory_list
type InventoryList struct {

	// The list of sites this inventory list is assigned to.  The assigned sites is a computed attribute, and cannot be
	//  directly modified.
	AssignedSites []string `json:"assigned_sites"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// True if the default for the inventory list is to be in stock. THe default value is false if not specified.
	DefaultInStock bool `json:"default_in_stock,omitempty"`

	// The user supplied description of this instance.
	Description string `json:"description,omitempty"`

	// The id for the inventory list, which is required and must be unique.
	ID string `json:"id,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// URL that is used to get this instance.  The URL is a computed attribute, and cannot be modified.
	Link string `json:"link,omitempty"`

	// True if the on order flag is enabled.  The default value is false if not specified.
	OnOrderInventoryEnabled bool `json:"on_order_inventory_enabled,omitempty"`

	// True if the inventory list is used in bundle inventory only.  The default value is false if not specified.
	UseBundleInventoryOnly bool `json:"use_bundle_inventory_only,omitempty"`
}

// Validate validates this inventory list
func (m *InventoryList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryList) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InventoryList) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryList) UnmarshalBinary(b []byte) error {
	var res InventoryList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
