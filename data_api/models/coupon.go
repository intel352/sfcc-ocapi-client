// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Coupon Document representing a coupon.
// swagger:model coupon
type Coupon struct {

	// The id of the coupon.
	// Required: true
	// Read Only: true
	// Max Length: 256
	// Min Length: 1
	CouponID string `json:"coupon_id"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The description of the coupon.
	// Max Length: 4000
	Description string `json:"description,omitempty"`

	// A flag indicating whether the coupon is enabled.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The number of coupon codes attached to the coupon that have been issued (request search only).
	ExportedCodeCount int32 `json:"exported_code_count,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// A link to the coupon.
	Link string `json:"link,omitempty"`

	// The number of times the coupon has been redeemed (request search only).
	RedemptionCount int32 `json:"redemption_count,omitempty"`

	// The redemption limit per coupon code.
	RedemptionLimits *RedemptionLimits `json:"redemption_limits,omitempty"`

	// Single coupon code, only valid for Single Code type
	// Max Length: 256
	// Min Length: 1
	SingleCode string `json:"single_code,omitempty"`

	// The configuration of system coupon codes, including pre-fix and number of codes
	SystemCodesConfig *CouponSystemCodeConfig `json:"system_codes_config,omitempty"`

	// The total number of coupon codes associated with this coupon
	TotalCodesCount int32 `json:"total_codes_count,omitempty"`

	// The type of the coupon code.
	// Required: true
	// Read Only: true
	// Enum: [single_code multiple_codes system_codes]
	Type string `json:"type"`
}

// Validate validates this coupon
func (m *Coupon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCouponID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedemptionLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemCodesConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Coupon) validateCouponID(formats strfmt.Registry) error {

	if err := validate.RequiredString("coupon_id", "body", string(m.CouponID)); err != nil {
		return err
	}

	if err := validate.MinLength("coupon_id", "body", string(m.CouponID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("coupon_id", "body", string(m.CouponID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 4000); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateRedemptionLimits(formats strfmt.Registry) error {

	if swag.IsZero(m.RedemptionLimits) { // not required
		return nil
	}

	if m.RedemptionLimits != nil {
		if err := m.RedemptionLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redemption_limits")
			}
			return err
		}
	}

	return nil
}

func (m *Coupon) validateSingleCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SingleCode) { // not required
		return nil
	}

	if err := validate.MinLength("single_code", "body", string(m.SingleCode), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("single_code", "body", string(m.SingleCode), 256); err != nil {
		return err
	}

	return nil
}

func (m *Coupon) validateSystemCodesConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemCodesConfig) { // not required
		return nil
	}

	if m.SystemCodesConfig != nil {
		if err := m.SystemCodesConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system_codes_config")
			}
			return err
		}
	}

	return nil
}

var couponTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["single_code","multiple_codes","system_codes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		couponTypeTypePropEnum = append(couponTypeTypePropEnum, v)
	}
}

const (

	// CouponTypeSingleCode captures enum value "single_code"
	CouponTypeSingleCode string = "single_code"

	// CouponTypeMultipleCodes captures enum value "multiple_codes"
	CouponTypeMultipleCodes string = "multiple_codes"

	// CouponTypeSystemCodes captures enum value "system_codes"
	CouponTypeSystemCodes string = "system_codes"
)

// prop value enum
func (m *Coupon) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, couponTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Coupon) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Coupon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Coupon) UnmarshalBinary(b []byte) error {
	var res Coupon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
