// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Campaign Document representing a campaign.
// swagger:model campaign
type Campaign struct {

	// The ID of the campaign.
	// Required: true
	// Max Length: 256
	// Min Length: 1
	CampaignID *string `json:"campaign_id"`

	// The array of assigned coupon IDs, not sorted
	Coupons []string `json:"coupons"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The array of assigned customer groups, not sorted
	CustomerGroups []string `json:"customer_groups"`

	// The description of the campaign.
	// Max Length: 4000
	Description string `json:"description,omitempty"`

	// The enabled flag for campaign.
	Enabled bool `json:"enabled,omitempty"`

	// The date that the Scenario ends
	// Format: date-time
	EndDate strfmt.DateTime `json:"end_date,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// link for convenience
	Link string `json:"link,omitempty"`

	// The array of assigned source code groups, not sorted
	SourceCodeGroups []string `json:"source_code_groups"`

	// The date that the Scenario begins
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty"`
}

// Validate validates this campaign
func (m *Campaign) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Campaign) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaign_id", "body", m.CampaignID); err != nil {
		return err
	}

	if err := validate.MinLength("campaign_id", "body", string(*m.CampaignID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("campaign_id", "body", string(*m.CampaignID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Campaign) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Campaign) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 4000); err != nil {
		return err
	}

	return nil
}

func (m *Campaign) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Campaign) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Campaign) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Campaign) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Campaign) UnmarshalBinary(b []byte) error {
	var res Campaign
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
