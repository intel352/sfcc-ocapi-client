// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GiftCertificate Document representing a gift certificate
// swagger:model gift_certificate
type GiftCertificate struct {

	// The gift certificate amount.
	//  The user cannot change the gift certificate amount after the creation of the gift certificate.
	Amount *Money `json:"amount,omitempty"`

	// The gift certificate balance.
	//  This is a computed attribute and cannot be modified.
	Balance *Money `json:"balance,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The description of the gift certificate.
	// Max Length: 4000
	Description string `json:"description,omitempty"`

	// The enabled flag of the gift certificate.
	Enabled bool `json:"enabled,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The URL to get the gift certificate.
	//  This is a computed attribute and cannot be modified.
	Link string `json:"link,omitempty"`

	// The masked gift certificate code with all but the
	//  last 4 characters replaced with a '*' character.
	//  This is a computed attribute and cannot be modified.
	MaskedGiftCertificateCode string `json:"masked_gift_certificate_code,omitempty"`

	// The merchant ID of the gift certificate.
	//  This is a unique attribute.
	//  This is a computed attribute and cannot be modified.
	//  This is used to get, update and the delete gift certificates.
	MerchantID string `json:"merchant_id,omitempty"`

	// The message to the recipient of the gift certificate.
	// Max Length: 4000
	Message string `json:"message,omitempty"`

	// The order number of the gift certificate.
	OrderNo string `json:"order_no,omitempty"`

	// The email address of the recipient of the gift certificate.
	RecipientEmail string `json:"recipient_email,omitempty"`

	// The recipient of the gift certificate.
	// Max Length: 256
	RecipientName string `json:"recipient_name,omitempty"`

	// The sender of the gift certificate.
	// Max Length: 256
	SenderName string `json:"sender_name,omitempty"`

	// The status of the gift certificate.
	//  While creating a gift certificate, user can set the status
	//  to either "pending" or "issued" only.
	// Enum: [issued partially_redeemed pending redeemed]
	Status string `json:"status,omitempty"`

	// The transactions of the gift certificate
	Transactions []*AccountTransaction `json:"transactions"`
}

// Validate validates this gift certificate
func (m *GiftCertificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipientName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GiftCertificate) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *GiftCertificate) validateBalance(formats strfmt.Registry) error {

	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *GiftCertificate) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GiftCertificate) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 4000); err != nil {
		return err
	}

	return nil
}

func (m *GiftCertificate) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GiftCertificate) validateMessage(formats strfmt.Registry) error {

	if swag.IsZero(m.Message) { // not required
		return nil
	}

	if err := validate.MaxLength("message", "body", string(m.Message), 4000); err != nil {
		return err
	}

	return nil
}

func (m *GiftCertificate) validateRecipientName(formats strfmt.Registry) error {

	if swag.IsZero(m.RecipientName) { // not required
		return nil
	}

	if err := validate.MaxLength("recipient_name", "body", string(m.RecipientName), 256); err != nil {
		return err
	}

	return nil
}

func (m *GiftCertificate) validateSenderName(formats strfmt.Registry) error {

	if swag.IsZero(m.SenderName) { // not required
		return nil
	}

	if err := validate.MaxLength("sender_name", "body", string(m.SenderName), 256); err != nil {
		return err
	}

	return nil
}

var giftCertificateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["issued","partially_redeemed","pending","redeemed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		giftCertificateTypeStatusPropEnum = append(giftCertificateTypeStatusPropEnum, v)
	}
}

const (

	// GiftCertificateStatusIssued captures enum value "issued"
	GiftCertificateStatusIssued string = "issued"

	// GiftCertificateStatusPartiallyRedeemed captures enum value "partially_redeemed"
	GiftCertificateStatusPartiallyRedeemed string = "partially_redeemed"

	// GiftCertificateStatusPending captures enum value "pending"
	GiftCertificateStatusPending string = "pending"

	// GiftCertificateStatusRedeemed captures enum value "redeemed"
	GiftCertificateStatusRedeemed string = "redeemed"
)

// prop value enum
func (m *GiftCertificate) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, giftCertificateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GiftCertificate) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *GiftCertificate) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GiftCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GiftCertificate) UnmarshalBinary(b []byte) error {
	var res GiftCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
