// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Catalog Document representing a catalog
// swagger:model catalog
type Catalog struct {

	// The count of products assigned to the catalog. It is read only.
	AssignedProductCount int32 `json:"assigned_product_count,omitempty"`

	// The sites assigned to the catalog. It is read only.
	AssignedSites []*Site `json:"assigned_sites"`

	// The category count of catalog. It is read only.
	CategoryCount int32 `json:"category_count,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The description of catalog
	Description map[string]string `json:"description,omitempty"`

	// The catalog Id
	// Required: true
	ID *string `json:"id"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// URL that is used to get this instance. It is read only.
	Link string `json:"link,omitempty"`

	// The catalog name
	Name map[string]string `json:"name,omitempty"`

	// The online status of catalog
	Online bool `json:"online,omitempty"`

	// The count of products owned by the catalog. It is read only.
	OwnedProductCount int32 `json:"owned_product_count,omitempty"`

	// The recommendation count of the catalog. It is read only.
	RecommendationCount int32 `json:"recommendation_count,omitempty"`

	// The root category of the catalog.  It is read only
	RootCategory string `json:"root_category,omitempty"`
}

// Validate validates this catalog
func (m *Catalog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedSites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Catalog) validateAssignedSites(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignedSites) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignedSites); i++ {
		if swag.IsZero(m.AssignedSites[i]) { // not required
			continue
		}

		if m.AssignedSites[i] != nil {
			if err := m.AssignedSites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assigned_sites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Catalog) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Catalog) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Catalog) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Catalog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Catalog) UnmarshalBinary(b []byte) error {
	var res Catalog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
