// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Sort Document representing a sort request.
// swagger:model sort
type Sort struct {

	// The name of the field to sort on.
	// Required: true
	Field *string `json:"field"`

	// The sort order to be applied when sorting. When omitted, the default sort order (ASC) is used.
	// Enum: [asc desc]
	SortOrder string `json:"sort_order,omitempty"`
}

// Validate validates this sort
func (m *Sort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sort) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

var sortTypeSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sortTypeSortOrderPropEnum = append(sortTypeSortOrderPropEnum, v)
	}
}

const (

	// SortSortOrderAsc captures enum value "asc"
	SortSortOrderAsc string = "asc"

	// SortSortOrderDesc captures enum value "desc"
	SortSortOrderDesc string = "desc"
)

// prop value enum
func (m *Sort) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sortTypeSortOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Sort) validateSortOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortOrderEnum("sort_order", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Sort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Sort) UnmarshalBinary(b []byte) error {
	var res Sort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
