// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Bmpermissions bmpermissions
// swagger:model bmpermissions
type Bmpermissions struct {

	// functional
	Functional *FunctionalPermissions `json:"functional,omitempty"`

	// functional link
	FunctionalLink string `json:"functional_link,omitempty"`

	// locale
	Locale *LocalePermissions `json:"locale,omitempty"`

	// locale link
	LocaleLink string `json:"locale_link,omitempty"`

	// module
	Module *ModulePermissions `json:"module,omitempty"`

	// module link
	ModuleLink string `json:"module_link,omitempty"`

	// types
	Types []string `json:"types"`

	// webdav
	Webdav *WebdavPermissions `json:"webdav,omitempty"`

	// webdav link
	WebdavLink string `json:"webdav_link,omitempty"`
}

// Validate validates this bmpermissions
func (m *Bmpermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFunctional(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebdav(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bmpermissions) validateFunctional(formats strfmt.Registry) error {

	if swag.IsZero(m.Functional) { // not required
		return nil
	}

	if m.Functional != nil {
		if err := m.Functional.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("functional")
			}
			return err
		}
	}

	return nil
}

func (m *Bmpermissions) validateLocale(formats strfmt.Registry) error {

	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	if m.Locale != nil {
		if err := m.Locale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

func (m *Bmpermissions) validateModule(formats strfmt.Registry) error {

	if swag.IsZero(m.Module) { // not required
		return nil
	}

	if m.Module != nil {
		if err := m.Module.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("module")
			}
			return err
		}
	}

	return nil
}

func (m *Bmpermissions) validateWebdav(formats strfmt.Registry) error {

	if swag.IsZero(m.Webdav) { // not required
		return nil
	}

	if m.Webdav != nil {
		if err := m.Webdav.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webdav")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Bmpermissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Bmpermissions) UnmarshalBinary(b []byte) error {
	var res Bmpermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
