// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountTransaction Document representing an account transaction
// swagger:model account_transaction
type AccountTransaction struct {

	// The amount of the gift certificate
	Amount *Money `json:"amount,omitempty"`

	// The order number of the gift certificate
	OrderNo string `json:"order_no,omitempty"`

	// The timestamp of the transaction of the gift certificate
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// The type code of the gift certificate
	// Enum: [create redeem delete enable disable]
	TypeCode string `json:"type_code,omitempty"`
}

// Validate validates this account transaction
func (m *AccountTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountTransaction) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

func (m *AccountTransaction) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

var accountTransactionTypeTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create","redeem","delete","enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountTransactionTypeTypeCodePropEnum = append(accountTransactionTypeTypeCodePropEnum, v)
	}
}

const (

	// AccountTransactionTypeCodeCreate captures enum value "create"
	AccountTransactionTypeCodeCreate string = "create"

	// AccountTransactionTypeCodeRedeem captures enum value "redeem"
	AccountTransactionTypeCodeRedeem string = "redeem"

	// AccountTransactionTypeCodeDelete captures enum value "delete"
	AccountTransactionTypeCodeDelete string = "delete"

	// AccountTransactionTypeCodeEnable captures enum value "enable"
	AccountTransactionTypeCodeEnable string = "enable"

	// AccountTransactionTypeCodeDisable captures enum value "disable"
	AccountTransactionTypeCodeDisable string = "disable"
)

// prop value enum
func (m *AccountTransaction) validateTypeCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountTransactionTypeTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountTransaction) validateTypeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.TypeCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeCodeEnum("type_code", "body", m.TypeCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountTransaction) UnmarshalBinary(b []byte) error {
	var res AccountTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
