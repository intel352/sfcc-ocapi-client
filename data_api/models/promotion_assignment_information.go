// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PromotionAssignmentInformation promotion assignment information
// swagger:model promotion_assignment_information
type PromotionAssignmentInformation struct {

	// If there is only one assignment, and that assignment is an A/B test segment, the id of the A/B test the segment
	//  belongs to. Otherwise, empty.
	AbtestID string `json:"abtest_id,omitempty"`

	// If there is only one assignment, and that assignment is an A/B test segment, the id of the A/B test segment.
	//  Otherwise, empty.
	AbtestSegmentID string `json:"abtest_segment_id,omitempty"`

	// true if the individual assignment or the multiple assignments are currently active.
	Active bool `json:"active,omitempty"`

	// A list of currently active A/B tests this is assigned to.
	ActiveAbtestAssignments []*PromotionAbtestGroupAssignment `json:"active_abtest_assignments"`

	// A list of currently active campaigns this is assigned to.
	ActiveCampaignAssignments []*PromotionCampaignAssignment `json:"active_campaign_assignments"`

	// If there is only one assignment, and that assignment is a campaign, the id of the campaign. Otherwise, empty.
	CampaignID string `json:"campaign_id,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// The end date of the container of the assignment (a Campaign or ABTest). If schedule_type is
	//  schedule_type : "multiple" or schedule_type : "none", then then result will be null. Also, a null
	//  date will also return null.
	// Format: date-time
	EndDate strfmt.DateTime `json:"end_date,omitempty"`

	// The schedule of the assignment (a Campaign or ABTest). If schedule_type is
	//  schedule_type : "multiple" or schedule_type : "none", then then result will be null.
	Schedule *Schedule `json:"schedule,omitempty"`

	// If there is only one active assignment, or no active assignments and one upcoming assignment, this is that type
	//  of assignment (schedule_type : "campaign" or schedule_type : "abtest"). If there are no
	//  assignments, it will be schedule_type : "none", otherwise, schedule_type : "multiple".
	// Enum: [none campaign abtest multiple]
	ScheduleType string `json:"schedule_type,omitempty"`

	// The start date of the container of the assignment (a Campaign or ABTest). If schedule_type is
	//  schedule_type : "multiple" or schedule_type : "none", then then result will be null. Also, a null
	//  date will also return null.
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty"`

	// A list of upcoming A/B tests this is assigned to.
	UpcomingAbtestAssignments []*PromotionAbtestGroupAssignment `json:"upcoming_abtest_assignments"`

	// A list of upcoming campaigns this is assigned to.
	UpcomingCampaignAssignments []*PromotionCampaignAssignment `json:"upcoming_campaign_assignments"`
}

// Validate validates this promotion assignment information
func (m *PromotionAssignmentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveAbtestAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActiveCampaignAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpcomingAbtestAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpcomingCampaignAssignments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionAssignmentInformation) validateActiveAbtestAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.ActiveAbtestAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveAbtestAssignments); i++ {
		if swag.IsZero(m.ActiveAbtestAssignments[i]) { // not required
			continue
		}

		if m.ActiveAbtestAssignments[i] != nil {
			if err := m.ActiveAbtestAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active_abtest_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PromotionAssignmentInformation) validateActiveCampaignAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.ActiveCampaignAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveCampaignAssignments); i++ {
		if swag.IsZero(m.ActiveCampaignAssignments[i]) { // not required
			continue
		}

		if m.ActiveCampaignAssignments[i] != nil {
			if err := m.ActiveCampaignAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("active_campaign_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PromotionAssignmentInformation) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PromotionAssignmentInformation) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

var promotionAssignmentInformationTypeScheduleTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","campaign","abtest","multiple"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		promotionAssignmentInformationTypeScheduleTypePropEnum = append(promotionAssignmentInformationTypeScheduleTypePropEnum, v)
	}
}

const (

	// PromotionAssignmentInformationScheduleTypeNone captures enum value "none"
	PromotionAssignmentInformationScheduleTypeNone string = "none"

	// PromotionAssignmentInformationScheduleTypeCampaign captures enum value "campaign"
	PromotionAssignmentInformationScheduleTypeCampaign string = "campaign"

	// PromotionAssignmentInformationScheduleTypeAbtest captures enum value "abtest"
	PromotionAssignmentInformationScheduleTypeAbtest string = "abtest"

	// PromotionAssignmentInformationScheduleTypeMultiple captures enum value "multiple"
	PromotionAssignmentInformationScheduleTypeMultiple string = "multiple"
)

// prop value enum
func (m *PromotionAssignmentInformation) validateScheduleTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, promotionAssignmentInformationTypeScheduleTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PromotionAssignmentInformation) validateScheduleType(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduleType) { // not required
		return nil
	}

	// value enum
	if err := m.validateScheduleTypeEnum("schedule_type", "body", m.ScheduleType); err != nil {
		return err
	}

	return nil
}

func (m *PromotionAssignmentInformation) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PromotionAssignmentInformation) validateUpcomingAbtestAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.UpcomingAbtestAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.UpcomingAbtestAssignments); i++ {
		if swag.IsZero(m.UpcomingAbtestAssignments[i]) { // not required
			continue
		}

		if m.UpcomingAbtestAssignments[i] != nil {
			if err := m.UpcomingAbtestAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upcoming_abtest_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PromotionAssignmentInformation) validateUpcomingCampaignAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.UpcomingCampaignAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.UpcomingCampaignAssignments); i++ {
		if swag.IsZero(m.UpcomingCampaignAssignments[i]) { // not required
			continue
		}

		if m.UpcomingCampaignAssignments[i] != nil {
			if err := m.UpcomingCampaignAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upcoming_campaign_assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PromotionAssignmentInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PromotionAssignmentInformation) UnmarshalBinary(b []byte) error {
	var res PromotionAssignmentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
