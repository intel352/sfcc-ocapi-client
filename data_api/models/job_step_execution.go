// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobStepExecution job step execution
// swagger:model job_step_execution
type JobStepExecution struct {

	// The chunk size for a chunk oriented step execution, otherwise null.
	ChunkSize int32 `json:"chunk_size,omitempty"`

	// Time in milliseconds, the job needed to be finished.
	Duration int64 `json:"duration,omitempty"`

	// Timestamp, when execution was finished.
	// Format: date-time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// The ID of the scope this step is or was executed for.
	ExecutionScope string `json:"execution_scope,omitempty"`

	// Current execution status. If the execution is running 'running' is returned. If the execution is pending
	//  'pending' is returned. If the execution is finished 'finished' is returned.
	// Enum: [pending running finished]
	ExecutionStatus string `json:"execution_status,omitempty"`

	// The exit status of the execution, if already finished.
	ExitStatus *Status `json:"exit_status,omitempty"`

	// ID of the execution object.
	ID string `json:"id,omitempty"`

	// ID of the job the step of this step execution was included from, if the step was included from another job.
	IncludeStepsFromJobID string `json:"include_steps_from_job_id,omitempty"`

	// True if this execution represents a chunk oriented step execution.
	IsChunkOriented bool `json:"is_chunk_oriented,omitempty"`

	// The current number of items that have been filtered for a chunk oriented step execution, otherwise null.
	ItemFilterCount int32 `json:"item_filter_count,omitempty"`

	// The current number of items that have been written for a chunk oriented step execution, otherwise null.
	ItemWriteCount int32 `json:"item_write_count,omitempty"`

	// Timestamp of the last modification time for the execution.
	// Format: date-time
	ModificationTime strfmt.DateTime `json:"modification_time,omitempty"`

	// Timestamp, when execution was started.
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`

	// Current status. If the execution is running 'running' is returned. If the execution is pending 'pending' is
	//  returned. If the execution is finished the exit status code of the execution is returned.
	Status string `json:"status,omitempty"`

	// Description of the step, this execution belongs to.ID of the step
	StepDescription string `json:"step_description,omitempty"`

	// ID of the step, this execution belongs to.ID of the step
	StepID string `json:"step_id,omitempty"`

	// ID of the step's type at the time it is or was executed.
	StepTypeID string `json:"step_type_id,omitempty"`

	// Additional information regarding the step's type at the time it is or was executed (e.g. name of a script module
	//  and function).
	StepTypeInfo string `json:"step_type_info,omitempty"`

	// The total number of items that will be processed for a chunk oriented step execution (null if unknown), otherwise
	//  null.
	TotalItemCount int64 `json:"total_item_count,omitempty"`
}

// Validate validates this job step execution
func (m *JobStepExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStepExecution) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var jobStepExecutionTypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","finished"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobStepExecutionTypeExecutionStatusPropEnum = append(jobStepExecutionTypeExecutionStatusPropEnum, v)
	}
}

const (

	// JobStepExecutionExecutionStatusPending captures enum value "pending"
	JobStepExecutionExecutionStatusPending string = "pending"

	// JobStepExecutionExecutionStatusRunning captures enum value "running"
	JobStepExecutionExecutionStatusRunning string = "running"

	// JobStepExecutionExecutionStatusFinished captures enum value "finished"
	JobStepExecutionExecutionStatusFinished string = "finished"
)

// prop value enum
func (m *JobStepExecution) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobStepExecutionTypeExecutionStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobStepExecution) validateExecutionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionStatusEnum("execution_status", "body", m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

func (m *JobStepExecution) validateExitStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ExitStatus) { // not required
		return nil
	}

	if m.ExitStatus != nil {
		if err := m.ExitStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exit_status")
			}
			return err
		}
	}

	return nil
}

func (m *JobStepExecution) validateModificationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ModificationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("modification_time", "body", "date-time", m.ModificationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobStepExecution) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobStepExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobStepExecution) UnmarshalBinary(b []byte) error {
	var res JobStepExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
