// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Range2Filter Document representing a range compare with range filter, named Range2Filter.
// swagger:model range2_filter
type Range2Filter struct {

	// compare mode: overlap, containing, contained (default to \"overlap\"). It is optional.
	// Enum: [overlap containing contained]
	FilterMode string `json:"filter_mode,omitempty"`

	// The field name of the field that start the range 1.
	// Required: true
	FromField *string `json:"from_field"`

	// A flag indicating whether the lower bound of the range is inclusive (or exclusive). The default is true (which means that the given  lower bound is inclusive).
	FromInclusive bool `json:"from_inclusive,omitempty"`

	// The configured lower bound of the filter range. The lower bound is optional. If not given, the range is  open ended with respect to the lower bound.
	FromValue interface{} `json:"from_value,omitempty"`

	// The field name of the field that end the range 1.
	// Required: true
	ToField *string `json:"to_field"`

	// A flag indicating whether the upper bound of the range is inclusive (or exclusive). The default is true (which means that the given  upper bound is inclusive).
	ToInclusive bool `json:"to_inclusive,omitempty"`

	// The configured upper bound of the filter range. The upper bound is optional. If not given, the range is  open ended with respect to the upper bound.
	ToValue interface{} `json:"to_value,omitempty"`
}

// Validate validates this range2 filter
func (m *Range2Filter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var range2FilterTypeFilterModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["overlap","containing","contained"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		range2FilterTypeFilterModePropEnum = append(range2FilterTypeFilterModePropEnum, v)
	}
}

const (

	// Range2FilterFilterModeOverlap captures enum value "overlap"
	Range2FilterFilterModeOverlap string = "overlap"

	// Range2FilterFilterModeContaining captures enum value "containing"
	Range2FilterFilterModeContaining string = "containing"

	// Range2FilterFilterModeContained captures enum value "contained"
	Range2FilterFilterModeContained string = "contained"
)

// prop value enum
func (m *Range2Filter) validateFilterModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, range2FilterTypeFilterModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Range2Filter) validateFilterMode(formats strfmt.Registry) error {

	if swag.IsZero(m.FilterMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateFilterModeEnum("filter_mode", "body", m.FilterMode); err != nil {
		return err
	}

	return nil
}

func (m *Range2Filter) validateFromField(formats strfmt.Registry) error {

	if err := validate.Required("from_field", "body", m.FromField); err != nil {
		return err
	}

	return nil
}

func (m *Range2Filter) validateToField(formats strfmt.Registry) error {

	if err := validate.Required("to_field", "body", m.ToField); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Range2Filter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Range2Filter) UnmarshalBinary(b []byte) error {
	var res Range2Filter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
