// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RedemptionLimits Document representing a coupon.
// swagger:model redemption_limits
type RedemptionLimits struct {

	// The redemption limit per customer
	// Minimum: 0
	LimitPerCode *int32 `json:"limit_per_code,omitempty"`

	// The redemption limit per customer
	// Minimum: 0
	LimitPerCustomer *int32 `json:"limit_per_customer,omitempty"`

	// The redemption limit per time frame
	LimitPerTimeFrame *RedemptionLimitPerPeriod `json:"limit_per_time_frame,omitempty"`
}

// Validate validates this redemption limits
func (m *RedemptionLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimitPerCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitPerCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitPerTimeFrame(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RedemptionLimits) validateLimitPerCode(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitPerCode) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit_per_code", "body", int64(*m.LimitPerCode), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RedemptionLimits) validateLimitPerCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitPerCustomer) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit_per_customer", "body", int64(*m.LimitPerCustomer), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RedemptionLimits) validateLimitPerTimeFrame(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitPerTimeFrame) { // not required
		return nil
	}

	if m.LimitPerTimeFrame != nil {
		if err := m.LimitPerTimeFrame.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("limit_per_time_frame")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RedemptionLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RedemptionLimits) UnmarshalBinary(b []byte) error {
	var res RedemptionLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
