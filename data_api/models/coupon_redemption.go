// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CouponRedemption A redemption record returned from the coupon redemption resources
// swagger:model coupon_redemption
type CouponRedemption struct {

	// The coupon code that was redeemed
	Code string `json:"code,omitempty"`

	// The coupon id that was redeemed
	CouponID string `json:"coupon_id,omitempty"`

	// Date when the redemption was created
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The customer email that was used to redeem it
	CustomerEmail string `json:"customer_email,omitempty"`

	// The order number where the redemption occurred
	OrderNo string `json:"order_no,omitempty"`

	// A URL able to access the order
	ViewOrderURL string `json:"view_order_url,omitempty"`
}

// Validate validates this coupon redemption
func (m *CouponRedemption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CouponRedemption) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CouponRedemption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CouponRedemption) UnmarshalBinary(b []byte) error {
	var res CouponRedemption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
