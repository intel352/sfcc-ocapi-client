// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Category Document representing a category.
// swagger:model category
type Category struct {

	// Renders an alternative URL in main navigation. Uses Salesforce Commerce Cloud content url notation. For example: $url('Account-Show')$ or normal URL http://xchange.demandware.com
	CAlternativeURL *MarkupText `json:"c_alternativeUrl,omitempty"`

	// Used to define the content asset used to populate a grid page banner for a category. This value is applied to all sub-category navigation (cascading) if no specific catBannerID has been defined for  a sub-category.
	CCatBannerID string `json:"c_catBannerID,omitempty"`

	// Use this attribute to apply custom styles for this category.
	CCustomCSSFile *MediaFile `json:"c_customCSSFile,omitempty"`

	// Used to define if/when the Compare feature is to be visualized in the storefront based on navigation. If enableCompare = FALSE, no Compare checkboxes will be displayed in the grid view. If enableCompare = TRUE, the category (and its children) will support the Compare feature.
	CEnableCompare bool `json:"c_enableCompare,omitempty"`

	// c header menu banner
	CHeaderMenuBanner *MarkupText `json:"c_headerMenuBanner,omitempty"`

	// Which way to orient the menu and optional header menu HTML. Vertical will list all in one line. Horizontal will list in columns.
	// Enum: [Horizontal Vertical]
	CHeaderMenuOrientation string `json:"c_headerMenuOrientation,omitempty"`

	// Used to indicate that a category (such as Mens -> Footwear -> Boots) will display in the roll-over navigation. A sub-category only shows if also the parent category is marked as showInMenu. Up to three category levels are shown in roll-over navigation.
	CShowInMenu bool `json:"c_showInMenu,omitempty"`

	// Used to define the content asset ID of the Size Chart that is appropriate for products whose PRIMARY category is the associated category (and its children). Whenever a product detail page (or quick view) is rendered, the Size Chart link is populated based on the value of this attribute for the products primary categorization. If not defined, NO size chart link is displayed.
	CSizeChartID string `json:"c_sizeChartID,omitempty"`

	// c slot banner Html
	CSlotBannerHTML map[string]MarkupText `json:"c_slotBannerHtml,omitempty"`

	// Image used on either the top or bottom slot on the category landing pages.
	CSlotBannerImage *MediaFile `json:"c_slotBannerImage,omitempty"`

	// The id of the catalog that contains it.
	// Required: true
	CatalogID *string `json:"catalog_id"`

	// The array of sub categories for the category.
	Categories []*Category `json:"categories"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The localized description of the category.
	Description map[string]string `json:"description,omitempty"`

	// The id of the category.
	// Required: true
	// Max Length: 256
	// Min Length: 1
	ID *string `json:"id"`

	// The name of the category image. The URL to the image is computed.
	// Max Length: 256
	// Min Length: 1
	Image string `json:"image,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The URL to get the category. This is a computed attribute and cannot be modified.
	Link string `json:"link,omitempty"`

	// The localized name of the category.
	Name map[string]string `json:"name,omitempty"`

	// The online status of the category determines if it is visible in the storefront. Defaults to false if not specified on create.
	Online bool `json:"online,omitempty"`

	// The localized page description of the category.
	PageDescription map[string]string `json:"page_description,omitempty"`

	// The localized page keywords for the category.
	PageKeywords map[string]string `json:"page_keywords,omitempty"`

	// The localized page title of the category.
	PageTitle map[string]string `json:"page_title,omitempty"`

	// The id of the parent category. Defaults to root if not specified on create.
	// Max Length: 256
	// Min Length: 1
	ParentCategoryID string `json:"parent_category_id,omitempty"`

	// paths
	Paths []*PathRecord `json:"paths"`

	// The position of the category determines the display order in the storefront.
	Position float64 `json:"position,omitempty"`

	// sorting rules
	SortingRules []*SortingRule `json:"sorting_rules"`

	// The name of the category thumbnail. The URL to the thumbnail is computed.
	// Max Length: 256
	// Min Length: 1
	Thumbnail string `json:"thumbnail,omitempty"`
}

// Validate validates this category
func (m *Category) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCAlternativeURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCCustomCSSFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCHeaderMenuBanner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCHeaderMenuOrientation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCSlotBannerHTML(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCSlotBannerImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortingRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Category) validateCAlternativeURL(formats strfmt.Registry) error {

	if swag.IsZero(m.CAlternativeURL) { // not required
		return nil
	}

	if m.CAlternativeURL != nil {
		if err := m.CAlternativeURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c_alternativeUrl")
			}
			return err
		}
	}

	return nil
}

func (m *Category) validateCCustomCSSFile(formats strfmt.Registry) error {

	if swag.IsZero(m.CCustomCSSFile) { // not required
		return nil
	}

	if m.CCustomCSSFile != nil {
		if err := m.CCustomCSSFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c_customCSSFile")
			}
			return err
		}
	}

	return nil
}

func (m *Category) validateCHeaderMenuBanner(formats strfmt.Registry) error {

	if swag.IsZero(m.CHeaderMenuBanner) { // not required
		return nil
	}

	if m.CHeaderMenuBanner != nil {
		if err := m.CHeaderMenuBanner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c_headerMenuBanner")
			}
			return err
		}
	}

	return nil
}

var categoryTypeCHeaderMenuOrientationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Horizontal","Vertical"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		categoryTypeCHeaderMenuOrientationPropEnum = append(categoryTypeCHeaderMenuOrientationPropEnum, v)
	}
}

const (

	// CategoryCHeaderMenuOrientationHorizontal captures enum value "Horizontal"
	CategoryCHeaderMenuOrientationHorizontal string = "Horizontal"

	// CategoryCHeaderMenuOrientationVertical captures enum value "Vertical"
	CategoryCHeaderMenuOrientationVertical string = "Vertical"
)

// prop value enum
func (m *Category) validateCHeaderMenuOrientationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, categoryTypeCHeaderMenuOrientationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Category) validateCHeaderMenuOrientation(formats strfmt.Registry) error {

	if swag.IsZero(m.CHeaderMenuOrientation) { // not required
		return nil
	}

	// value enum
	if err := m.validateCHeaderMenuOrientationEnum("c_headerMenuOrientation", "body", m.CHeaderMenuOrientation); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateCSlotBannerHTML(formats strfmt.Registry) error {

	if swag.IsZero(m.CSlotBannerHTML) { // not required
		return nil
	}

	for k := range m.CSlotBannerHTML {

		if err := validate.Required("c_slotBannerHtml"+"."+k, "body", m.CSlotBannerHTML[k]); err != nil {
			return err
		}
		if val, ok := m.CSlotBannerHTML[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Category) validateCSlotBannerImage(formats strfmt.Registry) error {

	if swag.IsZero(m.CSlotBannerImage) { // not required
		return nil
	}

	if m.CSlotBannerImage != nil {
		if err := m.CSlotBannerImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c_slotBannerImage")
			}
			return err
		}
	}

	return nil
}

func (m *Category) validateCatalogID(formats strfmt.Registry) error {

	if err := validate.Required("catalog_id", "body", m.CatalogID); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Category) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if err := validate.MinLength("image", "body", string(m.Image), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("image", "body", string(m.Image), 256); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Category) validateParentCategoryID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentCategoryID) { // not required
		return nil
	}

	if err := validate.MinLength("parent_category_id", "body", string(m.ParentCategoryID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("parent_category_id", "body", string(m.ParentCategoryID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Category) validatePaths(formats strfmt.Registry) error {

	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	for i := 0; i < len(m.Paths); i++ {
		if swag.IsZero(m.Paths[i]) { // not required
			continue
		}

		if m.Paths[i] != nil {
			if err := m.Paths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Category) validateSortingRules(formats strfmt.Registry) error {

	if swag.IsZero(m.SortingRules) { // not required
		return nil
	}

	for i := 0; i < len(m.SortingRules); i++ {
		if swag.IsZero(m.SortingRules[i]) { // not required
			continue
		}

		if m.SortingRules[i] != nil {
			if err := m.SortingRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sorting_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Category) validateThumbnail(formats strfmt.Registry) error {

	if swag.IsZero(m.Thumbnail) { // not required
		return nil
	}

	if err := validate.MinLength("thumbnail", "body", string(m.Thumbnail), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("thumbnail", "body", string(m.Thumbnail), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Category) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Category) UnmarshalBinary(b []byte) error {
	var res Category
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
