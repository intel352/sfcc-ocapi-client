// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentFolder Document representing a content folder.
// swagger:model content_folder
type ContentFolder struct {

	// Use this attribute to apply custom styles for this category.
	CCustomCSSFile *MediaFile `json:"c_customCSSFile,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The localized content folder description.
	Description map[string]string `json:"description,omitempty"`

	// The id of the content folder.
	// Required: true
	// Max Length: 256
	ID *string `json:"id"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The link to the content folder resource.
	Link string `json:"link,omitempty"`

	// The localized content folder name.
	Name map[string]string `json:"name,omitempty"`

	// A flag indicating whether the folder in online (default is false).
	Online bool `json:"online,omitempty"`

	// The localized content folder page description.
	PageDescription map[string]string `json:"page_description,omitempty"`

	// The localized content folder page keywords.
	PageKeywords map[string]string `json:"page_keywords,omitempty"`

	// The localized content folder page title.
	PageTitle map[string]string `json:"page_title,omitempty"`

	// The localized content folder page URL.
	PageURL map[string]string `json:"page_url,omitempty"`

	// The id of the parent content folder.
	ParentFolderID string `json:"parent_folder_id,omitempty"`

	// The URL to the parent content folder.
	ParentLink string `json:"parent_link,omitempty"`

	// The URL to list the content sub-folders.
	SubFoldersLink string `json:"sub_folders_link,omitempty"`

	// The rendering template.
	Template string `json:"template,omitempty"`
}

// Validate validates this content folder
func (m *ContentFolder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCCustomCSSFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentFolder) validateCCustomCSSFile(formats strfmt.Registry) error {

	if swag.IsZero(m.CCustomCSSFile) { // not required
		return nil
	}

	if m.CCustomCSSFile != nil {
		if err := m.CCustomCSSFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("c_customCSSFile")
			}
			return err
		}
	}

	return nil
}

func (m *ContentFolder) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ContentFolder) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 256); err != nil {
		return err
	}

	return nil
}

func (m *ContentFolder) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentFolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentFolder) UnmarshalBinary(b []byte) error {
	var res ContentFolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
