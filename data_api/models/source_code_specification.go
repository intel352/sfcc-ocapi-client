// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// SourceCodeSpecification Document representing a source code specification
// swagger:model source_code_specification
type SourceCodeSpecification struct {

	// Expression is a value for the "Source Code Specification" may be a literal source code, or it may contain wildcards.
	//  A literal code is simply the literal code. Valid characters are letters and numbers (no spaces).
	//  A wildcard allows a single source code specification to match multiple source codes. The following wildcards are supported:
	//  ? - Matches any single alpha-numeric character. For example: the source code specification 'ABC?' would match 'ABCD' or 'ABC3', but not 'ABCDE'.
	//  * - Matches any sequence of alpha-numeric characters. For example: the source code specification 'ABC*' would match 'ABCD', 'ABCDE', or 'ABC123'.
	//  [n1..n2] - Matches any number from n1 through and including n2.
	//  For example: the source code specification 'ABC[3..22]' would match 'ABC3', 'ABC4' or 'ABC22', but not 'ABC33' or 'ABCD'.
	Expression string `json:"expression,omitempty"`
}

// Validate validates this source code specification
func (m *SourceCodeSpecification) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SourceCodeSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceCodeSpecification) UnmarshalBinary(b []byte) error {
	var res SourceCodeSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
