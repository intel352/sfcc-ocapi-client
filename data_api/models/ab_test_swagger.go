// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AbTest The id of the A/B Test
// swagger:model ab_test
type AbTest struct {

	// The list of customer group ids assigned to the A/B Test. Defaults to 'Everyone' if not specified on create
	CustomerGroups []string `json:"customer_groups"`

	// The optional description of the A/B Test
	// Max Length: 4000
	Description string `json:"description,omitempty"`

	// The optional list of email addresses to send A/B Test results
	EmailAddresses []string `json:"email_addresses"`

	// The flag representing the enabled state of the A/B Test. Defaults to false if not specified on create
	Enabled bool `json:"enabled,omitempty"`

	// The date that the A/B Test ends. Defaults to two weeks from creation date if both start and end dates are not specified on create
	// Format: date-time
	EndDate strfmt.DateTime `json:"end_date,omitempty"`

	// The participant expiration type of the A/B Test. Defaults to 'never' if not specified on create
	// Enum: [session never]
	ExpirationType string `json:"expiration_type,omitempty"`

	// The id of the A/B Test
	// Max Length: 40
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// The key metric that is most important to the A/B Test, among the metrics collected. Defaults to 'Revenue' if not specified from test participant activity
	// Max Length: 256
	KeyMetricID string `json:"key_metric_id,omitempty"`

	// The URL to get the A/B test. This is a computed attribute and cannot be modified
	Link string `json:"link,omitempty"`

	// The flag representing the paused state of the A/B Test. Defaults to false if not specified on create
	Paused bool `json:"paused,omitempty"`

	// Segment count of A/B test. This is a computed attribute and cannot be modified
	SegmentCount int32 `json:"segment_count,omitempty"`

	// The date that the A/B Test begins. Defaults to a week from creation date if both start and end dates are not specified on create
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty"`

	// Status of A/B test. This is a computed attribute and cannot be modified
	// Enum: [ended planned running]
	Status string `json:"status,omitempty"`

	// The optional list of tags to group similar A/B Tests so that they can be searched easily.
	Tags []string `json:"tags"`

	// Test Groups created for an A/B Test. This is a read only attribute for now.
	TestGroups []*AbTestGroup `json:"test_groups"`

	// Test Segments created for an A/B Test. This is a read only attribute for now
	TestSegments []*AbTestSegment `json:"test_segments"`

	// The trigger that allows the test participant to be considered for an A/B Test
	Trigger *AbTestTrigger `json:"trigger,omitempty"`
}

// Validate validates this ab test
func (m *AbTest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyMetricID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestSegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AbTest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 4000); err != nil {
		return err
	}

	return nil
}

func (m *AbTest) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var abTestTypeExpirationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["session","never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		abTestTypeExpirationTypePropEnum = append(abTestTypeExpirationTypePropEnum, v)
	}
}

const (

	// AbTestExpirationTypeSession captures enum value "session"
	AbTestExpirationTypeSession string = "session"

	// AbTestExpirationTypeNever captures enum value "never"
	AbTestExpirationTypeNever string = "never"
)

// prop value enum
func (m *AbTest) validateExpirationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, abTestTypeExpirationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AbTest) validateExpirationType(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateExpirationTypeEnum("expiration_type", "body", m.ExpirationType); err != nil {
		return err
	}

	return nil
}

func (m *AbTest) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 40); err != nil {
		return err
	}

	return nil
}

func (m *AbTest) validateKeyMetricID(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyMetricID) { // not required
		return nil
	}

	if err := validate.MaxLength("key_metric_id", "body", string(m.KeyMetricID), 256); err != nil {
		return err
	}

	return nil
}

func (m *AbTest) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var abTestTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ended","planned","running"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		abTestTypeStatusPropEnum = append(abTestTypeStatusPropEnum, v)
	}
}

const (

	// AbTestStatusEnded captures enum value "ended"
	AbTestStatusEnded string = "ended"

	// AbTestStatusPlanned captures enum value "planned"
	AbTestStatusPlanned string = "planned"

	// AbTestStatusRunning captures enum value "running"
	AbTestStatusRunning string = "running"
)

// prop value enum
func (m *AbTest) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, abTestTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AbTest) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *AbTest) validateTestGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.TestGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.TestGroups); i++ {
		if swag.IsZero(m.TestGroups[i]) { // not required
			continue
		}

		if m.TestGroups[i] != nil {
			if err := m.TestGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("test_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AbTest) validateTestSegments(formats strfmt.Registry) error {

	if swag.IsZero(m.TestSegments) { // not required
		return nil
	}

	for i := 0; i < len(m.TestSegments); i++ {
		if swag.IsZero(m.TestSegments[i]) { // not required
			continue
		}

		if m.TestSegments[i] != nil {
			if err := m.TestSegments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("test_segments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AbTest) validateTrigger(formats strfmt.Registry) error {

	if swag.IsZero(m.Trigger) { // not required
		return nil
	}

	if m.Trigger != nil {
		if err := m.Trigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AbTest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AbTest) UnmarshalBinary(b []byte) error {
	var res AbTest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
