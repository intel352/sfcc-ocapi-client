// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User Document representing a user.
// swagger:model user
type User struct {

	// Flag whether the user is disabled.
	Disabled bool `json:"disabled,omitempty"`

	// The email address.
	// Required: true
	// Max Length: 256
	Email *string `json:"email"`

	// The external id. This attribute is only valid when the user uses centralized authentication.
	// Max Length: 256
	ExternalID string `json:"external_id,omitempty"`

	// The first name.
	// Max Length: 256
	FirstName string `json:"first_name,omitempty"`

	// Last login of the user.
	// Format: date
	LastLoginDate strfmt.Date `json:"last_login_date,omitempty"`

	// The last name.
	// Required: true
	// Max Length: 256
	LastName *string `json:"last_name"`

	// URL that is used to get this instance.  This property is computed and cannot be modified.
	Link string `json:"link,omitempty"`

	// Flag whether the user is locked.
	Locked bool `json:"locked,omitempty"`

	// The user login.
	// Max Length: 256
	Login string `json:"login,omitempty"`

	// The password. This attribute is only used to set the password upon user creation.
	//  This attribute is only valid when the user does not use centralized authentication.
	Password string `json:"password,omitempty"`

	// The user password expiration time
	// Format: date-time
	PasswordExpirationDate strfmt.DateTime `json:"password_expiration_date,omitempty"`

	// The time, where the password was last modified
	// Format: date-time
	PasswordModificationDate strfmt.DateTime `json:"password_modification_date,omitempty"`

	// The effective preferred data locale of the user. A locale is only considered if the user has at least read
	//  permission on the locale.
	PreferredDataLocale string `json:"preferred_data_locale,omitempty"`

	// The preferred UI locale of the user.
	PreferredUILocale string `json:"preferred_ui_locale,omitempty"`

	// List of role ids the user is assigned to.
	Roles []string `json:"roles"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(*m.Email), 256); err != nil {
		return err
	}

	return nil
}

func (m *User) validateExternalID(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalID) { // not required
		return nil
	}

	if err := validate.MaxLength("external_id", "body", string(m.ExternalID), 256); err != nil {
		return err
	}

	return nil
}

func (m *User) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("first_name", "body", string(m.FirstName), 256); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastLoginDate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastLoginDate) { // not required
		return nil
	}

	if err := validate.FormatOf("last_login_date", "body", "date", m.LastLoginDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	if err := validate.MaxLength("last_name", "body", string(*m.LastName), 256); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLogin(formats strfmt.Registry) error {

	if swag.IsZero(m.Login) { // not required
		return nil
	}

	if err := validate.MaxLength("login", "body", string(m.Login), 256); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePasswordExpirationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("password_expiration_date", "body", "date-time", m.PasswordExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePasswordModificationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordModificationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("password_modification_date", "body", "date-time", m.PasswordModificationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
