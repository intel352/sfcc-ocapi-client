// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PromotionCampaignAssignment Document representing a promotion campaign assignment.
// swagger:model promotion_campaign_assignment
type PromotionCampaignAssignment struct {

	// The campaign
	Campaign *Campaign `json:"campaign,omitempty"`

	// The id of the campaign.
	// Max Length: 256
	// Min Length: 1
	CampaignID string `json:"campaign_id,omitempty"`

	// The sorted array of assigned coupon ids.
	Coupons []string `json:"coupons"`

	// The sorted array of assigned customer groups.
	CustomerGroups []string `json:"customer_groups"`

	// The description of the promotion campaign assignment.
	// Max Length: 4000
	Description string `json:"description,omitempty"`

	// True if the assignment resource is enabled
	Enabled bool `json:"enabled,omitempty"`

	// link for convenience
	Link string `json:"link,omitempty"`

	// The promotion
	Promotion *Promotion `json:"promotion,omitempty"`

	// The id of the Promotion.
	// Max Length: 256
	// Min Length: 1
	PromotionID string `json:"promotion_id,omitempty"`

	// The rank of promotion campaign assignment
	Rank int32 `json:"rank,omitempty"`

	// The schedule of the assignment resource
	Schedule *Schedule `json:"schedule,omitempty"`

	// The sorted array of assigned source code groups.
	SourceCodeGroups []string `json:"source_code_groups"`
}

// Validate validates this promotion campaign assignment
func (m *PromotionCampaignAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PromotionCampaignAssignment) validateCampaign(formats strfmt.Registry) error {

	if swag.IsZero(m.Campaign) { // not required
		return nil
	}

	if m.Campaign != nil {
		if err := m.Campaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("campaign")
			}
			return err
		}
	}

	return nil
}

func (m *PromotionCampaignAssignment) validateCampaignID(formats strfmt.Registry) error {

	if swag.IsZero(m.CampaignID) { // not required
		return nil
	}

	if err := validate.MinLength("campaign_id", "body", string(m.CampaignID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("campaign_id", "body", string(m.CampaignID), 256); err != nil {
		return err
	}

	return nil
}

func (m *PromotionCampaignAssignment) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 4000); err != nil {
		return err
	}

	return nil
}

func (m *PromotionCampaignAssignment) validatePromotion(formats strfmt.Registry) error {

	if swag.IsZero(m.Promotion) { // not required
		return nil
	}

	if m.Promotion != nil {
		if err := m.Promotion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotion")
			}
			return err
		}
	}

	return nil
}

func (m *PromotionCampaignAssignment) validatePromotionID(formats strfmt.Registry) error {

	if swag.IsZero(m.PromotionID) { // not required
		return nil
	}

	if err := validate.MinLength("promotion_id", "body", string(m.PromotionID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("promotion_id", "body", string(m.PromotionID), 256); err != nil {
		return err
	}

	return nil
}

func (m *PromotionCampaignAssignment) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PromotionCampaignAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PromotionCampaignAssignment) UnmarshalBinary(b []byte) error {
	var res PromotionCampaignAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
