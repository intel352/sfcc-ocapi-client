// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobExecutionParameter Specification of a parameter for a job execution.
// swagger:model job_execution_parameter
type JobExecutionParameter struct {

	// The name of the parameter.
	// Required: true
	// Max Length: 256
	// Min Length: 1
	// Pattern: \S|(\S(.*)\S)
	Name *string `json:"name"`

	// The value of the parameter.
	// Required: true
	// Max Length: 1000
	// Pattern: \S|(\S(.*)\S)
	Value *string `json:"value"`
}

// Validate validates this job execution parameter
func (m *JobExecutionParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobExecutionParameter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 256); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `\S|(\S(.*)\S)`); err != nil {
		return err
	}

	return nil
}

func (m *JobExecutionParameter) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MaxLength("value", "body", string(*m.Value), 1000); err != nil {
		return err
	}

	if err := validate.Pattern("value", "body", string(*m.Value), `\S|(\S(.*)\S)`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobExecutionParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobExecutionParameter) UnmarshalBinary(b []byte) error {
	var res JobExecutionParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
