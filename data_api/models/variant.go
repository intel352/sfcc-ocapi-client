// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Variant Document representing a product variation.
// swagger:model variant
type Variant struct {

	// Inventory "Available to Sell" of the product.
	Ats float64 `json:"ats,omitempty"`

	// default product variation
	DefaultProductVariation bool `json:"default_product_variation,omitempty"`

	// URL to the preview image.
	Image *MediaFile `json:"image,omitempty"`

	// true if the product is in stock, or false if not.
	InStock bool `json:"in_stock,omitempty"`

	// The URL addressing the product.
	Link string `json:"link,omitempty"`

	// If the product is currently online.
	//  true if online
	//  false if not
	Online bool `json:"online,omitempty"`

	// A flag indicating whether the variant is orderable.
	Orderable bool `json:"orderable,omitempty"`

	// The sales price of the variant.
	Price float64 `json:"price,omitempty"`

	// Currency code for the price of the product.
	PriceCurrency string `json:"price_currency,omitempty"`

	// The id (SKU) of the variant.
	// Required: true
	// Max Length: 100
	// Min Length: 1
	ProductID *string `json:"product_id"`

	// searchable
	Searchable map[string]bool `json:"searchable,omitempty"`

	// variation attributes
	VariationAttributes []*VariationAttribute `json:"variation_attributes"`

	// The actual variation attribute id - value pairs.
	VariationValues map[string]string `json:"variation_values,omitempty"`
}

// Validate validates this variant
func (m *Variant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Variant) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *Variant) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("product_id", "body", m.ProductID); err != nil {
		return err
	}

	if err := validate.MinLength("product_id", "body", string(*m.ProductID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("product_id", "body", string(*m.ProductID), 100); err != nil {
		return err
	}

	return nil
}

func (m *Variant) validateVariationAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.VariationAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.VariationAttributes); i++ {
		if swag.IsZero(m.VariationAttributes[i]) { // not required
			continue
		}

		if m.VariationAttributes[i] != nil {
			if err := m.VariationAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variation_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Variant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Variant) UnmarshalBinary(b []byte) error {
	var res Variant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
