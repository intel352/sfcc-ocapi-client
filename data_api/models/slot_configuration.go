// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SlotConfiguration Document representing a slot configuration.
// swagger:model slot_configuration
type SlotConfiguration struct {

	// Information about the assignments and assignment schedules of this slot configuration
	AssignmentInformation *SlotConfigurationAssignmentInformation `json:"assignment_information,omitempty"`

	// The call out message.
	CalloutMsg map[string]MarkupText `json:"callout_msg,omitempty"`

	// The id of this configuration.
	// Max Length: 256
	// Min Length: 1
	ConfigurationID string `json:"configuration_id,omitempty"`

	// The context of the slot. Ignored in input documents.
	// Enum: [global category folder]
	Context string `json:"context,omitempty"`

	// When the context is category, this is a category_id; when
	//  the context is folder, this is a folder_id; and when the
	//  context is global, this is obsolete. This is ignored in input documents.
	ContextID string `json:"context_id,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The customer groups ids.
	CustomerGroups []string `json:"customer_groups"`

	// A flag indicating whether the configuration is the default one for the slot.
	Default bool `json:"default,omitempty"`

	// The configuration description.
	// Max Length: 4000
	Description string `json:"description,omitempty"`

	// A flag indicating whether the slot is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The link.
	Link string `json:"link,omitempty"`

	// The rank of the slot configuration on its slot. This rank has nothing to do with the rank
	//  on any campaign-assignment, because these are completely different objects. These must be
	//  updated separately.
	// Minimum: 1
	// Enum: [10 20 30 40 50 60 70 80 90 100]
	Rank int32 `json:"rank,omitempty"`

	// The schedule for the slot.
	Schedule *Schedule `json:"schedule,omitempty"`

	// The content of the slot.
	// Required: true
	SlotContent *SlotContent `json:"slot_content"`

	// The ID of the slot. Ignored in input documents.
	// Max Length: 256
	// Min Length: 1
	SlotID string `json:"slot_id,omitempty"`

	// The template.
	// Max Length: 256
	Template string `json:"template,omitempty"`

	// The uuid of the slot configuration. This property cannot be written
	//  and is ignored in input documents.
	// Read Only: true
	// Max Length: 28
	// Min Length: 1
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this slot configuration
func (m *SlotConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignmentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalloutMsg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigurationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SlotConfiguration) validateAssignmentInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignmentInformation) { // not required
		return nil
	}

	if m.AssignmentInformation != nil {
		if err := m.AssignmentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignment_information")
			}
			return err
		}
	}

	return nil
}

func (m *SlotConfiguration) validateCalloutMsg(formats strfmt.Registry) error {

	if swag.IsZero(m.CalloutMsg) { // not required
		return nil
	}

	for k := range m.CalloutMsg {

		if err := validate.Required("callout_msg"+"."+k, "body", m.CalloutMsg[k]); err != nil {
			return err
		}
		if val, ok := m.CalloutMsg[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SlotConfiguration) validateConfigurationID(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigurationID) { // not required
		return nil
	}

	if err := validate.MinLength("configuration_id", "body", string(m.ConfigurationID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("configuration_id", "body", string(m.ConfigurationID), 256); err != nil {
		return err
	}

	return nil
}

var slotConfigurationTypeContextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["global","category","folder"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		slotConfigurationTypeContextPropEnum = append(slotConfigurationTypeContextPropEnum, v)
	}
}

const (

	// SlotConfigurationContextGlobal captures enum value "global"
	SlotConfigurationContextGlobal string = "global"

	// SlotConfigurationContextCategory captures enum value "category"
	SlotConfigurationContextCategory string = "category"

	// SlotConfigurationContextFolder captures enum value "folder"
	SlotConfigurationContextFolder string = "folder"
)

// prop value enum
func (m *SlotConfiguration) validateContextEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, slotConfigurationTypeContextPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SlotConfiguration) validateContext(formats strfmt.Registry) error {

	if swag.IsZero(m.Context) { // not required
		return nil
	}

	// value enum
	if err := m.validateContextEnum("context", "body", m.Context); err != nil {
		return err
	}

	return nil
}

func (m *SlotConfiguration) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SlotConfiguration) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 4000); err != nil {
		return err
	}

	return nil
}

func (m *SlotConfiguration) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

var slotConfigurationTypeRankPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[10,20,30,40,50,60,70,80,90,100]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		slotConfigurationTypeRankPropEnum = append(slotConfigurationTypeRankPropEnum, v)
	}
}

// prop value enum
func (m *SlotConfiguration) validateRankEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, slotConfigurationTypeRankPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SlotConfiguration) validateRank(formats strfmt.Registry) error {

	if swag.IsZero(m.Rank) { // not required
		return nil
	}

	if err := validate.MinimumInt("rank", "body", int64(m.Rank), 1, false); err != nil {
		return err
	}

	// value enum
	if err := m.validateRankEnum("rank", "body", m.Rank); err != nil {
		return err
	}

	return nil
}

func (m *SlotConfiguration) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *SlotConfiguration) validateSlotContent(formats strfmt.Registry) error {

	if err := validate.Required("slot_content", "body", m.SlotContent); err != nil {
		return err
	}

	if m.SlotContent != nil {
		if err := m.SlotContent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slot_content")
			}
			return err
		}
	}

	return nil
}

func (m *SlotConfiguration) validateSlotID(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotID) { // not required
		return nil
	}

	if err := validate.MinLength("slot_id", "body", string(m.SlotID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slot_id", "body", string(m.SlotID), 256); err != nil {
		return err
	}

	return nil
}

func (m *SlotConfiguration) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if err := validate.MaxLength("template", "body", string(m.Template), 256); err != nil {
		return err
	}

	return nil
}

func (m *SlotConfiguration) validateUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.MinLength("uuid", "body", string(m.UUID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("uuid", "body", string(m.UUID), 28); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SlotConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SlotConfiguration) UnmarshalBinary(b []byte) error {
	var res SlotConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
