// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobExecution job execution
// swagger:model job_execution
type JobExecution struct {

	// When the execution was started by a client, this represents the client's id.
	ClientID string `json:"client_id,omitempty"`

	// Time in milliseconds, the job needed to be finished.
	Duration int64 `json:"duration,omitempty"`

	// Timestamp, when execution was finished.
	// Format: date-time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// Sorted set of all execution scopes, used by individual steps.
	ExecutionScopes []string `json:"execution_scopes"`

	// Current execution status. If the execution is running 'running' is returned. If the execution is pending
	//  'pending' is returned. If the execution is finished 'finished' is returned.
	// Enum: [pending running finished]
	ExecutionStatus string `json:"execution_status,omitempty"`

	// The exit status of the execution, if already finished.
	ExitStatus *Status `json:"exit_status,omitempty"`

	// ID of the execution object.
	ID string `json:"id,omitempty"`

	// True if the log file exists, otherwise false.
	IsLogFileExisting bool `json:"is_log_file_existing,omitempty"`

	// True if this execution represents a job restart.
	IsRestart bool `json:"is_restart,omitempty"`

	// Description of the job, this execution belongs to.
	JobDescription string `json:"job_description,omitempty"`

	// ID of the job, this execution belongs to.
	JobID string `json:"job_id,omitempty"`

	// Name of the log file, containing execution log.
	LogFileName string `json:"log_file_name,omitempty"`

	// Timestamp of the last modification time for the execution.
	// Format: date-time
	ModificationTime strfmt.DateTime `json:"modification_time,omitempty"`

	// List of all job execution parameters.
	Parameters []*JobExecutionParameter `json:"parameters"`

	// Timestamp, when execution was started.
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`

	// Current status. If the execution is running 'running' is returned. If the execution is pending 'pending' is
	//  returned. If the execution is finished the exit status code of the execution is returned.
	Status string `json:"status,omitempty"`

	// List of all steps, called for job execution.
	StepExecutions []*JobStepExecution `json:"step_executions"`

	// When the execution was started by a registered user, this represents the user's login.
	UserLogin string `json:"user_login,omitempty"`
}

// Validate validates this job execution
func (m *JobExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExitStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStepExecutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobExecution) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var jobExecutionTypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","running","finished"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobExecutionTypeExecutionStatusPropEnum = append(jobExecutionTypeExecutionStatusPropEnum, v)
	}
}

const (

	// JobExecutionExecutionStatusPending captures enum value "pending"
	JobExecutionExecutionStatusPending string = "pending"

	// JobExecutionExecutionStatusRunning captures enum value "running"
	JobExecutionExecutionStatusRunning string = "running"

	// JobExecutionExecutionStatusFinished captures enum value "finished"
	JobExecutionExecutionStatusFinished string = "finished"
)

// prop value enum
func (m *JobExecution) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobExecutionTypeExecutionStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobExecution) validateExecutionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionStatusEnum("execution_status", "body", m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

func (m *JobExecution) validateExitStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ExitStatus) { // not required
		return nil
	}

	if m.ExitStatus != nil {
		if err := m.ExitStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exit_status")
			}
			return err
		}
	}

	return nil
}

func (m *JobExecution) validateModificationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ModificationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("modification_time", "body", "date-time", m.ModificationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobExecution) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobExecution) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobExecution) validateStepExecutions(formats strfmt.Registry) error {

	if swag.IsZero(m.StepExecutions) { // not required
		return nil
	}

	for i := 0; i < len(m.StepExecutions); i++ {
		if swag.IsZero(m.StepExecutions[i]) { // not required
			continue
		}

		if m.StepExecutions[i] != nil {
			if err := m.StepExecutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("step_executions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobExecution) UnmarshalBinary(b []byte) error {
	var res JobExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
