// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerGroup Document representing a customer group
// swagger:model customer_group
type CustomerGroup struct {

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The description for the customer group.  This property is read-only for system groups.
	Description string `json:"description,omitempty"`

	// The user specific identifier for the customer group, which must be unique across the organization.  Property
	//  is read-only.
	// Required: true
	// Read Only: true
	// Max Length: 256
	// Min Length: 1
	ID string `json:"id"`

	// The deletion status of this customer group.
	InDeletion bool `json:"in_deletion,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// URL that is used to get this instance.  This property is computed and cannot be modified.
	Link string `json:"link,omitempty"`

	// The number of members in this customer group.
	MemberCount int32 `json:"member_count,omitempty"`

	// The rule of this customer group. Only available for dynamic customer groups.
	Rule *Rule `json:"rule,omitempty"`

	// The type of the customer group.  This property is read-only.
	// Enum: [system dynamic static]
	Type string `json:"type,omitempty"`
}

// Validate validates this customer group
func (m *CustomerGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerGroup) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerGroup) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerGroup) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerGroup) validateRule(formats strfmt.Registry) error {

	if swag.IsZero(m.Rule) { // not required
		return nil
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

var customerGroupTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["system","dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerGroupTypeTypePropEnum = append(customerGroupTypeTypePropEnum, v)
	}
}

const (

	// CustomerGroupTypeSystem captures enum value "system"
	CustomerGroupTypeSystem string = "system"

	// CustomerGroupTypeDynamic captures enum value "dynamic"
	CustomerGroupTypeDynamic string = "dynamic"

	// CustomerGroupTypeStatic captures enum value "static"
	CustomerGroupTypeStatic string = "static"
)

// prop value enum
func (m *CustomerGroup) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerGroupTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomerGroup) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerGroup) UnmarshalBinary(b []byte) error {
	var res CustomerGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
