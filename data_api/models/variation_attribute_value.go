// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VariationAttributeValue Document representing a variation attribute value.
// swagger:model variation_attribute_value
type VariationAttributeValue struct {

	// The localized description of the variation value.
	Description map[string]string `json:"description,omitempty"`

	// The first product image for the configured viewtype and this variation value.
	Image *MediaFile `json:"image,omitempty"`

	// The first product image for the configured viewtype and this variation value. (typically the swatch image)
	ImageSwatch *MediaFile `json:"image_swatch,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// The localized display name of the variation value.
	Name map[string]string `json:"name,omitempty"`

	// A flag indicating whether at least one variant with this variation attribute value is available to sell.
	Orderable bool `json:"orderable,omitempty"`

	// The position of the value among all values of a variation attribute.
	Position float64 `json:"position,omitempty"`

	// The actual variation value.
	// Required: true
	// Min Length: 1
	Value *string `json:"value"`
}

// Validate validates this variation attribute value
func (m *VariationAttributeValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageSwatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VariationAttributeValue) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *VariationAttributeValue) validateImageSwatch(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageSwatch) { // not required
		return nil
	}

	if m.ImageSwatch != nil {
		if err := m.ImageSwatch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image_swatch")
			}
			return err
		}
	}

	return nil
}

func (m *VariationAttributeValue) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", string(*m.Value), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VariationAttributeValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VariationAttributeValue) UnmarshalBinary(b []byte) error {
	var res VariationAttributeValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
