// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Slot Document representing a slot
// swagger:model slot
type Slot struct {

	// A slot context
	// Enum: [global category folder]
	ContextType string `json:"context_type,omitempty"`

	// The user supplied description of the slot
	// Max Length: 4000
	Description string `json:"description,omitempty"`

	// A link to the slot
	Link string `json:"link,omitempty"`

	// A preview URL the slot
	PreviewURL string `json:"preview_url,omitempty"`

	// A list of slotconfigurations this slot has
	SlotConfigurations []*SlotConfiguration `json:"slot_configurations"`

	// The id for the slot
	// Required: true
	// Max Length: 256
	// Min Length: 1
	SlotID *string `json:"slot_id"`
}

// Validate validates this slot
func (m *Slot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContextType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var slotTypeContextTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["global","category","folder"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		slotTypeContextTypePropEnum = append(slotTypeContextTypePropEnum, v)
	}
}

const (

	// SlotContextTypeGlobal captures enum value "global"
	SlotContextTypeGlobal string = "global"

	// SlotContextTypeCategory captures enum value "category"
	SlotContextTypeCategory string = "category"

	// SlotContextTypeFolder captures enum value "folder"
	SlotContextTypeFolder string = "folder"
)

// prop value enum
func (m *Slot) validateContextTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, slotTypeContextTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Slot) validateContextType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContextType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContextTypeEnum("context_type", "body", m.ContextType); err != nil {
		return err
	}

	return nil
}

func (m *Slot) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 4000); err != nil {
		return err
	}

	return nil
}

func (m *Slot) validateSlotConfigurations(formats strfmt.Registry) error {

	if swag.IsZero(m.SlotConfigurations) { // not required
		return nil
	}

	for i := 0; i < len(m.SlotConfigurations); i++ {
		if swag.IsZero(m.SlotConfigurations[i]) { // not required
			continue
		}

		if m.SlotConfigurations[i] != nil {
			if err := m.SlotConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slot_configurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Slot) validateSlotID(formats strfmt.Registry) error {

	if err := validate.Required("slot_id", "body", m.SlotID); err != nil {
		return err
	}

	if err := validate.MinLength("slot_id", "body", string(*m.SlotID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("slot_id", "body", string(*m.SlotID), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Slot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Slot) UnmarshalBinary(b []byte) error {
	var res Slot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
