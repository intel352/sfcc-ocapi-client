// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// AbTestSegmentStats ab test segment stats
// swagger:model ab_test_segment_stats
type AbTestSegmentStats struct {

	// adds to baskets
	AddsToBaskets int32 `json:"adds_to_baskets,omitempty"`

	// average adds per basket
	AverageAddsPerBasket float64 `json:"average_adds_per_basket,omitempty"`

	// average adds per basket std error
	AverageAddsPerBasketStdError float64 `json:"average_adds_per_basket_std_error,omitempty"`

	// average discount amount
	AverageDiscountAmount float64 `json:"average_discount_amount,omitempty"`

	// average discount amount std error
	AverageDiscountAmountStdError float64 `json:"average_discount_amount_std_error,omitempty"`

	// average discount amount with coupon
	AverageDiscountAmountWithCoupon float64 `json:"average_discount_amount_with_coupon,omitempty"`

	// average discount amount with coupon std error
	AverageDiscountAmountWithCouponStdError float64 `json:"average_discount_amount_with_coupon_std_error,omitempty"`

	// The standard error for the average amount discounted for orders without using a coupon
	AverageDiscountAmountWithoutCoupon float64 `json:"average_discount_amount_without_coupon,omitempty"`

	// Units sold per hour
	AverageDiscountAmountWithoutCouponStdError float64 `json:"average_discount_amount_without_coupon_std_error,omitempty"`

	// average order value
	AverageOrderValue float64 `json:"average_order_value,omitempty"`

	// average order value std error
	AverageOrderValueStdError float64 `json:"average_order_value_std_error,omitempty"`

	// average revenue per visit
	AverageRevenuePerVisit float64 `json:"average_revenue_per_visit,omitempty"`

	// average revenue per visit std error
	AverageRevenuePerVisitStdError float64 `json:"average_revenue_per_visit_std_error,omitempty"`

	// average units added per basket
	AverageUnitsAddedPerBasket float64 `json:"average_units_added_per_basket,omitempty"`

	// average units adder per basket std error
	AverageUnitsAdderPerBasketStdError float64 `json:"average_units_adder_per_basket_std_error,omitempty"`

	// average units per order std error
	AverageUnitsPerOrderStdError float64 `json:"average_units_per_order_std_error,omitempty"`

	// average units per visit
	AverageUnitsPerVisit float64 `json:"average_units_per_visit,omitempty"`

	// average units per visit std error
	AverageUnitsPerVisitStdError float64 `json:"average_units_per_visit_std_error,omitempty"`

	// basket rate
	BasketRate float64 `json:"basket_rate,omitempty"`

	// baskets
	Baskets float64 `json:"baskets,omitempty"`

	// checkout rate
	CheckoutRate float64 `json:"checkout_rate,omitempty"`

	// checkouts
	Checkouts int32 `json:"checkouts,omitempty"`

	// conversion rate
	ConversionRate float64 `json:"conversion_rate,omitempty"`

	// discount amount with coupon
	DiscountAmountWithCoupon float64 `json:"discount_amount_with_coupon,omitempty"`

	// discount amount without coupon
	DiscountAmountWithoutCoupon float64 `json:"discount_amount_without_coupon,omitempty"`

	// orders
	Orders int32 `json:"orders,omitempty"`

	// revenue
	Revenue float64 `json:"revenue,omitempty"`

	// total discount amount
	TotalDiscountAmount float64 `json:"total_discount_amount,omitempty"`

	// units
	Units float64 `json:"units,omitempty"`

	// units added to baskets
	UnitsAddedToBaskets float64 `json:"units_added_to_baskets,omitempty"`

	// visitors
	Visitors int32 `json:"visitors,omitempty"`

	// visits
	Visits int32 `json:"visits,omitempty"`
}

// Validate validates this ab test segment stats
func (m *AbTestSegmentStats) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AbTestSegmentStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AbTestSegmentStats) UnmarshalBinary(b []byte) error {
	var res AbTestSegmentStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
