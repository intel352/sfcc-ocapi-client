// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceInfo resource info
// swagger:model resource_info
type ResourceInfo struct {

	// Allowed Origins
	AllowedOrigins []string `json:"allowed_origins"`

	// API Type
	// Required: true
	// Enum: [data shop]
	APIType *string `json:"api_type"`

	// An array of resources
	// Required: true
	// Min Items: 1
	Resources []*ResourceObject `json:"resources"`

	// Response Header
	ResponseHeaders map[string]string `json:"response_headers,omitempty"`
}

// Validate validates this resource info
func (m *ResourceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resourceInfoTypeAPITypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["data","shop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceInfoTypeAPITypePropEnum = append(resourceInfoTypeAPITypePropEnum, v)
	}
}

const (

	// ResourceInfoAPITypeData captures enum value "data"
	ResourceInfoAPITypeData string = "data"

	// ResourceInfoAPITypeShop captures enum value "shop"
	ResourceInfoAPITypeShop string = "shop"
)

// prop value enum
func (m *ResourceInfo) validateAPITypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceInfoTypeAPITypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceInfo) validateAPIType(formats strfmt.Registry) error {

	if err := validate.Required("api_type", "body", m.APIType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAPITypeEnum("api_type", "body", *m.APIType); err != nil {
		return err
	}

	return nil
}

func (m *ResourceInfo) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	iResourcesSize := int64(len(m.Resources))

	if err := validate.MinItems("resources", "body", iResourcesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceInfo) UnmarshalBinary(b []byte) error {
	var res ResourceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
