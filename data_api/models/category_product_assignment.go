// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CategoryProductAssignment Document representing a category product assignment.
// swagger:model category_product_assignment
type CategoryProductAssignment struct {

	// The id of the catalog.
	// Max Length: 256
	// Min Length: 1
	CatalogID string `json:"catalog_id,omitempty"`

	// The id of the category.
	// Max Length: 256
	// Min Length: 1
	CategoryID string `json:"category_id,omitempty"`

	// The URL used to get the product category assignment.
	Link string `json:"link,omitempty"`

	// The name of the catalog that owns the product.
	OwningCatalogName map[string]string `json:"owning_catalog_name,omitempty"`

	// The position of product category assignment.
	Position float64 `json:"position,omitempty"`

	// The product that is assigned to the category.
	Product *Product `json:"product,omitempty"`

	// The id of the Product.
	// Max Length: 256
	// Min Length: 1
	ProductID string `json:"product_id,omitempty"`

	// The name of the product.
	ProductName map[string]string `json:"product_name,omitempty"`
}

// Validate validates this category product assignment
func (m *CategoryProductAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCatalogID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CategoryProductAssignment) validateCatalogID(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogID) { // not required
		return nil
	}

	if err := validate.MinLength("catalog_id", "body", string(m.CatalogID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("catalog_id", "body", string(m.CatalogID), 256); err != nil {
		return err
	}

	return nil
}

func (m *CategoryProductAssignment) validateCategoryID(formats strfmt.Registry) error {

	if swag.IsZero(m.CategoryID) { // not required
		return nil
	}

	if err := validate.MinLength("category_id", "body", string(m.CategoryID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("category_id", "body", string(m.CategoryID), 256); err != nil {
		return err
	}

	return nil
}

func (m *CategoryProductAssignment) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *CategoryProductAssignment) validateProductID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductID) { // not required
		return nil
	}

	if err := validate.MinLength("product_id", "body", string(m.ProductID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("product_id", "body", string(m.ProductID), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CategoryProductAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CategoryProductAssignment) UnmarshalBinary(b []byte) error {
	var res CategoryProductAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
