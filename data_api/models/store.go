// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Store Document representing a store
// swagger:model store
type Store struct {

	// Returns the first address.
	// Max Length: 256
	Address1 string `json:"address1,omitempty"`

	// Returns the second address value.
	// Max Length: 256
	Address2 string `json:"address2,omitempty"`

	// c test attribute
	CTestAttribute []string `json:"c_TestAttribute"`

	// Country Code Value - for the form values
	CCountryCodeValue string `json:"c_countryCodeValue,omitempty"`

	// Store Inventory List ID
	CInventoryListID string `json:"c_inventoryListId,omitempty"`

	// Returns the city.
	// Max Length: 256
	City string `json:"city,omitempty"`

	// The two-character country code per ISO 3166-1 alpha-2.
	// Max Length: 2
	// Enum: [US CA DE]
	CountryCode string `json:"country_code,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// Email address to contact the store
	// Max Length: 256
	Email string `json:"email,omitempty"`

	// Returns the fax number .
	// Max Length: 256
	Fax string `json:"fax,omitempty"`

	// The id for the store
	// Required: true
	// Max Length: 256
	ID *string `json:"id"`

	// The image associated with the store
	Image *MediaFile `json:"image,omitempty"`

	// The inventory list associated with the store
	// Max Length: 256
	InventoryID string `json:"inventory_id,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The latitude of the store
	// Maximum: 90
	// Minimum: -90
	Latitude *float64 `json:"latitude,omitempty"`

	// a URL that is used to get this instance.  The property is computed and cannot be changed.
	Link string `json:"link,omitempty"`

	// The longitude of the store
	// Maximum: 180
	// Minimum: -180
	Longitude *float64 `json:"longitude,omitempty"`

	// The name of the store
	Name string `json:"name,omitempty"`

	// Returns the phone number.
	// Max Length: 256
	Phone string `json:"phone,omitempty"`

	// Whether this store uses our Store product for Point-of-Sale
	PosEnabled bool `json:"pos_enabled,omitempty"`

	// The postal code for the store
	// Max Length: 10
	PostalCode string `json:"postal_code,omitempty"`

	// Returns the customer's state.
	// Max Length: 256
	StateCode string `json:"state_code,omitempty"`

	// The store events (localized)
	StoreEvents map[string]MarkupText `json:"store_events,omitempty"`

	// The store opening hours (localized)
	StoreHours map[string]MarkupText `json:"store_hours,omitempty"`

	// Whether this store should appear in store locator searches
	StoreLocatorEnabled bool `json:"store_locator_enabled,omitempty"`
}

// Validate validates this store
func (m *Store) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreHours(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Store) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("address1", "body", string(m.Address1), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("address2", "body", string(m.Address2), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MaxLength("city", "body", string(m.City), 256); err != nil {
		return err
	}

	return nil
}

var storeTypeCountryCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["US","CA","DE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storeTypeCountryCodePropEnum = append(storeTypeCountryCodePropEnum, v)
	}
}

const (

	// StoreCountryCodeUS captures enum value "US"
	StoreCountryCodeUS string = "US"

	// StoreCountryCodeCA captures enum value "CA"
	StoreCountryCodeCA string = "CA"

	// StoreCountryCodeDE captures enum value "DE"
	StoreCountryCodeDE string = "DE"
)

// prop value enum
func (m *Store) validateCountryCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storeTypeCountryCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Store) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.MaxLength("country_code", "body", string(m.CountryCode), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryCodeEnum("country_code", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("email", "body", string(m.Email), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateFax(formats strfmt.Registry) error {

	if swag.IsZero(m.Fax) { // not required
		return nil
	}

	if err := validate.MaxLength("fax", "body", string(m.Fax), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *Store) validateInventoryID(formats strfmt.Registry) error {

	if swag.IsZero(m.InventoryID) { // not required
		return nil
	}

	if err := validate.MaxLength("inventory_id", "body", string(m.InventoryID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateLatitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Latitude) { // not required
		return nil
	}

	if err := validate.Minimum("latitude", "body", float64(*m.Latitude), -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("latitude", "body", float64(*m.Latitude), 90, false); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateLongitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Longitude) { // not required
		return nil
	}

	if err := validate.Minimum("longitude", "body", float64(*m.Longitude), -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("longitude", "body", float64(*m.Longitude), 180, false); err != nil {
		return err
	}

	return nil
}

func (m *Store) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MaxLength("phone", "body", string(m.Phone), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("postal_code", "body", string(m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateStateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.StateCode) { // not required
		return nil
	}

	if err := validate.MaxLength("state_code", "body", string(m.StateCode), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateStoreEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreEvents) { // not required
		return nil
	}

	for k := range m.StoreEvents {

		if err := validate.Required("store_events"+"."+k, "body", m.StoreEvents[k]); err != nil {
			return err
		}
		if val, ok := m.StoreEvents[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Store) validateStoreHours(formats strfmt.Registry) error {

	if swag.IsZero(m.StoreHours) { // not required
		return nil
	}

	for k := range m.StoreHours {

		if err := validate.Required("store_hours"+"."+k, "body", m.StoreHours[k]); err != nil {
			return err
		}
		if val, ok := m.StoreHours[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Store) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Store) UnmarshalBinary(b []byte) error {
	var res Store
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
