// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleSearchRequest Document representing an role search.
//
//  Note that only either an user ID or a permission can be provided (or none), but not both. When one of them is provided,
//  the further query elements will filter the respective role set (meaning the user ID / permission is AND-connected to the query definition).
//
//  When a permission definition is using a site scope, it can contain only one site.
//
//  When optional fields in the permission definitions are not provided, they will be treated as 'don't care' (so its e.g. possible so search for
//  permission to site-specific BM modules without providing a site, and the search will return all roles having that permission for any site).
// swagger:model role_search_request
type RoleSearchRequest struct {

	// The number of returned documents
	// Maximum: 200
	// Minimum: 1
	Count int32 `json:"count,omitempty"`

	// The zero-based index of the record that we want to start with, used to optimize special handling
	// Minimum: 0
	DbStartRecord *int32 `json:"db_start_record_,omitempty"`

	// List of expansions to be applied to each search results. Expands are optional
	Expand []string `json:"expand"`

	// The permission to search for. Note that even though this is a container that can hold multiple permissions definitions,
	//  for a search request only one permission can be provided (otherwise an error will be returned).
	Permissions *RolePermissions `json:"permissions,omitempty"`

	// The query to apply
	// Required: true
	Query Query `json:"query"`

	// The field to be selected.
	Select string `json:"select,omitempty"`

	// The list of sort clauses configured for the search request. Sort clauses are optional.
	Sorts []*Sort `json:"sorts"`

	// The zero-based index of the first search hit to include in the result.
	// Minimum: 0
	Start *int32 `json:"start,omitempty"`

	// The id of the user whose roles are to be searched.
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this role search request
func (m *RoleSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbStartRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleSearchRequest) validateCount(formats strfmt.Registry) error {

	if swag.IsZero(m.Count) { // not required
		return nil
	}

	if err := validate.MinimumInt("count", "body", int64(m.Count), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("count", "body", int64(m.Count), 200, false); err != nil {
		return err
	}

	return nil
}

func (m *RoleSearchRequest) validateDbStartRecord(formats strfmt.Registry) error {

	if swag.IsZero(m.DbStartRecord) { // not required
		return nil
	}

	if err := validate.MinimumInt("db_start_record_", "body", int64(*m.DbStartRecord), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RoleSearchRequest) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *RoleSearchRequest) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

func (m *RoleSearchRequest) validateSorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Sorts) { // not required
		return nil
	}

	for i := 0; i < len(m.Sorts); i++ {
		if swag.IsZero(m.Sorts[i]) { // not required
			continue
		}

		if m.Sorts[i] != nil {
			if err := m.Sorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RoleSearchRequest) validateStart(formats strfmt.Registry) error {

	if swag.IsZero(m.Start) { // not required
		return nil
	}

	if err := validate.MinimumInt("start", "body", int64(*m.Start), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleSearchRequest) UnmarshalBinary(b []byte) error {
	var res RoleSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
