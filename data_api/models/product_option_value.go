// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductOptionValue Document representing a product option Value
// swagger:model product_option_value
type ProductOptionValue struct {

	// Flag indicating if the product option value is the default value for the product option.
	DefaultProductOptionValue bool `json:"default_product_option_value,omitempty"`

	// The id of the product option value.
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// The URL link to the product option value.
	Link string `json:"link,omitempty"`

	// The list of prices in the product option value.
	OptionPrices []*Money `json:"option_prices"`

	// The sku extension of the product option value.
	SkuExtension string `json:"sku_extension,omitempty"`

	// The localized value of the product option.
	Value map[string]string `json:"value,omitempty"`
}

// Validate validates this product option value
func (m *ProductOptionValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionPrices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductOptionValue) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProductOptionValue) validateOptionPrices(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionPrices) { // not required
		return nil
	}

	for i := 0; i < len(m.OptionPrices); i++ {
		if swag.IsZero(m.OptionPrices[i]) { // not required
			continue
		}

		if m.OptionPrices[i] != nil {
			if err := m.OptionPrices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("option_prices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductOptionValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductOptionValue) UnmarshalBinary(b []byte) error {
	var res ProductOptionValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
