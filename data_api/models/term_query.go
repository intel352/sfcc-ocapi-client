// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TermQuery A term query matches one (or more) value(s) against one (or more) document field(s). A document is considered a hit
//  if one of the values matches (exactly) with at least one of the given fields.  The operator "is" can only take
//  one value, while "one_of" can take multiple. If multiple fields are specified, they are combined using the OR operator.
//
// swagger:model term_query
type TermQuery struct {

	// The document field(s), the value(s) are matched against, combined with the operator.
	// Required: true
	// Min Items: 1
	Fields []string `json:"fields"`

	// Returns the operator to use for the term query.
	// Required: true
	// Enum: [is one_of is_null is_not_null less greater not_in neq]
	Operator *string `json:"operator"`

	// The values, the field(s) are compared against, combined with the operator.
	Values []interface{} `json:"values"`
}

// Validate validates this term query
func (m *TermQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TermQuery) validateFields(formats strfmt.Registry) error {

	if err := validate.Required("fields", "body", m.Fields); err != nil {
		return err
	}

	iFieldsSize := int64(len(m.Fields))

	if err := validate.MinItems("fields", "body", iFieldsSize, 1); err != nil {
		return err
	}

	return nil
}

var termQueryTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["is","one_of","is_null","is_not_null","less","greater","not_in","neq"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		termQueryTypeOperatorPropEnum = append(termQueryTypeOperatorPropEnum, v)
	}
}

const (

	// TermQueryOperatorIs captures enum value "is"
	TermQueryOperatorIs string = "is"

	// TermQueryOperatorOneOf captures enum value "one_of"
	TermQueryOperatorOneOf string = "one_of"

	// TermQueryOperatorIsNull captures enum value "is_null"
	TermQueryOperatorIsNull string = "is_null"

	// TermQueryOperatorIsNotNull captures enum value "is_not_null"
	TermQueryOperatorIsNotNull string = "is_not_null"

	// TermQueryOperatorLess captures enum value "less"
	TermQueryOperatorLess string = "less"

	// TermQueryOperatorGreater captures enum value "greater"
	TermQueryOperatorGreater string = "greater"

	// TermQueryOperatorNotIn captures enum value "not_in"
	TermQueryOperatorNotIn string = "not_in"

	// TermQueryOperatorNeq captures enum value "neq"
	TermQueryOperatorNeq string = "neq"
)

// prop value enum
func (m *TermQuery) validateOperatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, termQueryTypeOperatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TermQuery) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TermQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TermQuery) UnmarshalBinary(b []byte) error {
	var res TermQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
