// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Promotion Document representing a promotion. Unless otherwise stated, attributes of this document are not supported when using
//  the Open Commerce API to update multiple promotions at once.
// swagger:model promotion
type Promotion struct {

	// Determines whether or not this promotion is archived. This attribute is allowed to be updated when using the Open
	//  Commerce API to update multiple promotions at once.
	Archived bool `json:"archived,omitempty"`

	// Information about the assignments and assignment schedules of this promotion
	AssignmentInformation *PromotionAssignmentInformation `json:"assignment_information,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The ISO 4217 mnemonic code of the currency this promotion is restricted to. If not populated, then there is no
	//  currency restriction on the promotion.
	// Max Length: 3
	CurrencyCode string `json:"currency_code,omitempty"`

	// Determines whether or not this promotion ignores the global product exclusions for promotions.
	DisableGloballyExcluded bool `json:"disable_globally_excluded,omitempty"`

	// Determines whether or not this promotion is enabled. This attribute is allowed to be updated when using the Open
	//  Commerce API to update multiple promotions at once.
	Enabled bool `json:"enabled,omitempty"`

	// Determines if the promotion can be combined with other promotions of the same promotion class or if it cannot be
	//  combined with any other promotions. This attribute is allowed to be updated when using the Open Commerce API to
	//  update multiple promotions at once.
	// Required: true
	// Enum: [no class global]
	Exclusivity *string `json:"exclusivity"`

	// The id for the promotion.
	// Required: true
	ID *string `json:"id"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// A URL that is used to get the details of this promotion.
	Link string `json:"link,omitempty"`

	// The user supplied name of this promotion, which can be localized
	Name map[string]string `json:"name,omitempty"`

	// The class of the promotion. If the promotion class is modified, then the promotion rule and all of its values,
	//  such as whether or not to disable global product exclusions, will be reset.
	// Enum: [product shipping order]
	PromotionClass string `json:"promotion_class,omitempty"`

	// Returns the list of tags assigned to this promotion. If used to set the tags on a promotion, the promotion will
	//  only have the tags passed in the input. Any existing tags will be removed.
	Tags []*Tag `json:"tags"`
}

// Validate validates this promotion
func (m *Promotion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignmentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExclusivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotionClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Promotion) validateAssignmentInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.AssignmentInformation) { // not required
		return nil
	}

	if m.AssignmentInformation != nil {
		if err := m.AssignmentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignment_information")
			}
			return err
		}
	}

	return nil
}

func (m *Promotion) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Promotion) validateCurrencyCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrencyCode) { // not required
		return nil
	}

	if err := validate.MaxLength("currency_code", "body", string(m.CurrencyCode), 3); err != nil {
		return err
	}

	return nil
}

var promotionTypeExclusivityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["no","class","global"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		promotionTypeExclusivityPropEnum = append(promotionTypeExclusivityPropEnum, v)
	}
}

const (

	// PromotionExclusivityNo captures enum value "no"
	PromotionExclusivityNo string = "no"

	// PromotionExclusivityClass captures enum value "class"
	PromotionExclusivityClass string = "class"

	// PromotionExclusivityGlobal captures enum value "global"
	PromotionExclusivityGlobal string = "global"
)

// prop value enum
func (m *Promotion) validateExclusivityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, promotionTypeExclusivityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Promotion) validateExclusivity(formats strfmt.Registry) error {

	if err := validate.Required("exclusivity", "body", m.Exclusivity); err != nil {
		return err
	}

	// value enum
	if err := m.validateExclusivityEnum("exclusivity", "body", *m.Exclusivity); err != nil {
		return err
	}

	return nil
}

func (m *Promotion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Promotion) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

var promotionTypePromotionClassPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["product","shipping","order"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		promotionTypePromotionClassPropEnum = append(promotionTypePromotionClassPropEnum, v)
	}
}

const (

	// PromotionPromotionClassProduct captures enum value "product"
	PromotionPromotionClassProduct string = "product"

	// PromotionPromotionClassShipping captures enum value "shipping"
	PromotionPromotionClassShipping string = "shipping"

	// PromotionPromotionClassOrder captures enum value "order"
	PromotionPromotionClassOrder string = "order"
)

// prop value enum
func (m *Promotion) validatePromotionClassEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, promotionTypePromotionClassPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Promotion) validatePromotionClass(formats strfmt.Registry) error {

	if swag.IsZero(m.PromotionClass) { // not required
		return nil
	}

	// value enum
	if err := m.validatePromotionClassEnum("promotion_class", "body", m.PromotionClass); err != nil {
		return err
	}

	return nil
}

func (m *Promotion) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Promotion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Promotion) UnmarshalBinary(b []byte) error {
	var res Promotion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
