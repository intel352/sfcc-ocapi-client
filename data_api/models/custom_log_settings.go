// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomLogSettings Document representing custom logging settings.
// swagger:model custom_log_settings
type CustomLogSettings struct {

	// False if the current instance is production.
	DebugPermitted bool `json:"debug_permitted,omitempty"`

	// Indicates if custom debug logs are written to file.
	DebugToFile bool `json:"debug_to_file,omitempty"`

	// Email addresses for fatal log messages with a maximum length of 1000 characters.
	// Max Length: 1000
	EmailTo string `json:"email_to,omitempty"`

	// Indicates if custom error logs are written to file.
	ErrorToFile bool `json:"error_to_file,omitempty"`

	// Indicates if custom fatal logs are written to file.
	FatalToFile bool `json:"fatal_to_file,omitempty"`

	// Indicates if custom info logs are written to file.
	InfoToFile bool `json:"info_to_file,omitempty"`

	// Defined custom log categories.
	LogCategories []*LogCategory `json:"log_categories"`

	// Custom root category log level.
	RootLevel string `json:"root_level,omitempty"`

	// Indicates if custom warn logs are written to file.
	WarnToFile bool `json:"warn_to_file,omitempty"`
}

// Validate validates this custom log settings
func (m *CustomLogSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomLogSettings) validateEmailTo(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailTo) { // not required
		return nil
	}

	if err := validate.MaxLength("email_to", "body", string(m.EmailTo), 1000); err != nil {
		return err
	}

	return nil
}

func (m *CustomLogSettings) validateLogCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.LogCategories) { // not required
		return nil
	}

	for i := 0; i < len(m.LogCategories); i++ {
		if swag.IsZero(m.LogCategories[i]) { // not required
			continue
		}

		if m.LogCategories[i] != nil {
			if err := m.LogCategories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("log_categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomLogSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomLogSettings) UnmarshalBinary(b []byte) error {
	var res CustomLogSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
