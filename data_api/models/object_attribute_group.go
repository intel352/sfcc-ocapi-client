// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectAttributeGroup Document representing a attribute group
// swagger:model object_attribute_group
type ObjectAttributeGroup struct {

	// Attributes with the group displayed when expand=definition
	AttributeDefinitions []*ObjectAttributeDefinition `json:"attribute_definitions"`

	// The count of the attributes within the group.  This is a computed attribute and is read-only
	AttributeDefinitionsCount int32 `json:"attribute_definitions_count,omitempty"`

	// The free-form text description of the group by locale
	Description map[string]string `json:"description,omitempty"`

	// The name used to display the group by locale.
	DisplayName map[string]string `json:"display_name,omitempty"`

	// The group's user specified identifier, used to retrieve the group
	ID string `json:"id,omitempty"`

	// True if the group is meant only for internal use, false otherwise.  This property is read-only.
	Internal bool `json:"internal,omitempty"`

	// URL that is used to get this instance.  This is a computed attribute and is read-only
	Link string `json:"link,omitempty"`

	// The position of the group relative to other groups.
	// Minimum: 0
	Position *float64 `json:"position,omitempty"`
}

// Validate validates this object attribute group
func (m *ObjectAttributeGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectAttributeGroup) validateAttributeDefinitions(formats strfmt.Registry) error {

	if swag.IsZero(m.AttributeDefinitions) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeDefinitions); i++ {
		if swag.IsZero(m.AttributeDefinitions[i]) { // not required
			continue
		}

		if m.AttributeDefinitions[i] != nil {
			if err := m.AttributeDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attribute_definitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectAttributeGroup) validatePosition(formats strfmt.Registry) error {

	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := validate.Minimum("position", "body", float64(*m.Position), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectAttributeGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectAttributeGroup) UnmarshalBinary(b []byte) error {
	var res ObjectAttributeGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
