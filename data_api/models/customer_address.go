// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerAddress Document representing a customer address.
// swagger:model customer_address
type CustomerAddress struct {

	// The customer's first address.
	// Max Length: 256
	Address1 string `json:"address1,omitempty"`

	// The customer's second address value.
	// Max Length: 256
	Address2 string `json:"address2,omitempty"`

	// The customer address id.
	// Required: true
	// Max Length: 256
	AddressID *string `json:"address_id"`

	// The customer's city.
	// Max Length: 256
	City string `json:"city,omitempty"`

	// The customer's company name.
	// Max Length: 256
	CompanyName string `json:"company_name,omitempty"`

	// The customer's two-character country code per ISO 3166-1 alpha-2.
	// Required: true
	// Max Length: 2
	// Enum: [US FR IT JP CN GB]
	CountryCode *string `json:"country_code"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The generated eTag representing the state of the customer address.
	Etag string `json:"etag,omitempty"`

	// The customer's first name.
	// Max Length: 256
	FirstName string `json:"first_name,omitempty"`

	// The concatenation of the customer's first, middle, and last names and its suffix.
	FullName string `json:"full_name,omitempty"`

	// The customer's job title.
	// Max Length: 256
	JobTitle string `json:"job_title,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The customer's last name.
	// Required: true
	// Max Length: 256
	LastName *string `json:"last_name"`

	// The customer's phone number.
	// Max Length: 32
	Phone string `json:"phone,omitempty"`

	// The customer's post box.
	// Max Length: 256
	PostBox string `json:"post_box,omitempty"`

	// The customer's postal code.
	// Max Length: 256
	PostalCode string `json:"postal_code,omitempty"`

	// The customer's salutation.
	// Max Length: 256
	Salutation string `json:"salutation,omitempty"`

	// The customer's second name.
	// Max Length: 256
	SecondName string `json:"second_name,omitempty"`

	// The customer's state.
	// Max Length: 256
	StateCode string `json:"state_code,omitempty"`

	// The customer's suffix.
	// Max Length: 256
	Suffix string `json:"suffix,omitempty"`

	// The customer's suite.
	// Max Length: 32
	Suite string `json:"suite,omitempty"`

	// The customer's title.
	// Max Length: 256
	Title string `json:"title,omitempty"`
}

// Validate validates this customer address
func (m *CustomerAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompanyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostBox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalutation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerAddress) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("address1", "body", string(m.Address1), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("address2", "body", string(m.Address2), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateAddressID(formats strfmt.Registry) error {

	if err := validate.Required("address_id", "body", m.AddressID); err != nil {
		return err
	}

	if err := validate.MaxLength("address_id", "body", string(*m.AddressID), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MaxLength("city", "body", string(m.City), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateCompanyName(formats strfmt.Registry) error {

	if swag.IsZero(m.CompanyName) { // not required
		return nil
	}

	if err := validate.MaxLength("company_name", "body", string(m.CompanyName), 256); err != nil {
		return err
	}

	return nil
}

var customerAddressTypeCountryCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["US","FR","IT","JP","CN","GB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerAddressTypeCountryCodePropEnum = append(customerAddressTypeCountryCodePropEnum, v)
	}
}

const (

	// CustomerAddressCountryCodeUS captures enum value "US"
	CustomerAddressCountryCodeUS string = "US"

	// CustomerAddressCountryCodeFR captures enum value "FR"
	CustomerAddressCountryCodeFR string = "FR"

	// CustomerAddressCountryCodeIT captures enum value "IT"
	CustomerAddressCountryCodeIT string = "IT"

	// CustomerAddressCountryCodeJP captures enum value "JP"
	CustomerAddressCountryCodeJP string = "JP"

	// CustomerAddressCountryCodeCN captures enum value "CN"
	CustomerAddressCountryCodeCN string = "CN"

	// CustomerAddressCountryCodeGB captures enum value "GB"
	CustomerAddressCountryCodeGB string = "GB"
)

// prop value enum
func (m *CustomerAddress) validateCountryCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerAddressTypeCountryCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomerAddress) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("country_code", "body", m.CountryCode); err != nil {
		return err
	}

	if err := validate.MaxLength("country_code", "body", string(*m.CountryCode), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryCodeEnum("country_code", "body", *m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("first_name", "body", string(m.FirstName), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateJobTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.JobTitle) { // not required
		return nil
	}

	if err := validate.MaxLength("job_title", "body", string(m.JobTitle), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	if err := validate.MaxLength("last_name", "body", string(*m.LastName), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MaxLength("phone", "body", string(m.Phone), 32); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validatePostBox(formats strfmt.Registry) error {

	if swag.IsZero(m.PostBox) { // not required
		return nil
	}

	if err := validate.MaxLength("post_box", "body", string(m.PostBox), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("postal_code", "body", string(m.PostalCode), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateSalutation(formats strfmt.Registry) error {

	if swag.IsZero(m.Salutation) { // not required
		return nil
	}

	if err := validate.MaxLength("salutation", "body", string(m.Salutation), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateSecondName(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondName) { // not required
		return nil
	}

	if err := validate.MaxLength("second_name", "body", string(m.SecondName), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateStateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.StateCode) { // not required
		return nil
	}

	if err := validate.MaxLength("state_code", "body", string(m.StateCode), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.Suffix) { // not required
		return nil
	}

	if err := validate.MaxLength("suffix", "body", string(m.Suffix), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateSuite(formats strfmt.Registry) error {

	if swag.IsZero(m.Suite) { // not required
		return nil
	}

	if err := validate.MaxLength("suite", "body", string(m.Suite), 32); err != nil {
		return err
	}

	return nil
}

func (m *CustomerAddress) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerAddress) UnmarshalBinary(b []byte) error {
	var res CustomerAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
