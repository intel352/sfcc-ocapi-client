// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PriceAdjustmentLimit
//  A price adjustment limit specifies the amount of manual adjustment that can be applied by a user at the specified
//  level.
//
// swagger:model price_adjustment_limit
type PriceAdjustmentLimit struct {

	// The value for the currency or null if no currency value is specified.
	Amount float64 `json:"amount,omitempty"`

	// Returns the currency of the Price Adjustment Limit or null if not applicable.
	//
	//  Will be null if this is a percent limit only.
	//
	//  Price adjustment limits can be given up to a fixed amount (unit=a currency unit).
	Currency string `json:"currency,omitempty"`

	// Returns percentage value of the Price Adjustment Limit or null if not applicable.
	//
	//  Will be null if this is a currency limit only.
	//
	Percent float64 `json:"percent,omitempty"`

	// The Price Adjustment Limit type - ITEM, SHIPPING or ORDER. It identifies the level at which the Price Adjustment
	//  is applicable.
	// Enum: [item shipping order]
	Type string `json:"type,omitempty"`
}

// Validate validates this price adjustment limit
func (m *PriceAdjustmentLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var priceAdjustmentLimitTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["item","shipping","order"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priceAdjustmentLimitTypeTypePropEnum = append(priceAdjustmentLimitTypeTypePropEnum, v)
	}
}

const (

	// PriceAdjustmentLimitTypeItem captures enum value "item"
	PriceAdjustmentLimitTypeItem string = "item"

	// PriceAdjustmentLimitTypeShipping captures enum value "shipping"
	PriceAdjustmentLimitTypeShipping string = "shipping"

	// PriceAdjustmentLimitTypeOrder captures enum value "order"
	PriceAdjustmentLimitTypeOrder string = "order"
)

// prop value enum
func (m *PriceAdjustmentLimit) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, priceAdjustmentLimitTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PriceAdjustmentLimit) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PriceAdjustmentLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PriceAdjustmentLimit) UnmarshalBinary(b []byte) error {
	var res PriceAdjustmentLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
