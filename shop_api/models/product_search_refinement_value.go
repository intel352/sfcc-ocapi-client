// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ProductSearchRefinementValue Document representing a product search refinement value.
// swagger:model product_search_refinement_value
type ProductSearchRefinementValue struct {

	// The localized description of the refinement value.
	Description string `json:"description,omitempty"`

	// The number of search hits when selecting the refinement value. Can be 0.
	HitCount int32 `json:"hit_count,omitempty"`

	// The localized label of the refinement value.
	Label string `json:"label,omitempty"`

	// The optional presentation id associated with the refinement value.
	//  The presentation id can be used, for example, to associate an id with
	//  an HTML widget.
	PresentationID string `json:"presentation_id,omitempty"`

	// The refinement value. In the case of an attribute refinement, this is the bucket,
	//  the attribute value, or a value range. In the case of a category refinement, this is the
	//  category id. In the case of a price refinement,k this is the price range. Ranges are
	//  enclosed by parentheses and separated by ".."; for example, "(100..999)" and "(Aa..Fa)"
	//  are valid ranges.
	Value string `json:"value,omitempty"`

	// The array of hierarchical refinement values. This array can be empty.
	Values []*ProductSearchRefinementValue `json:"values"`
}

// Validate validates this product search refinement value
func (m *ProductSearchRefinementValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductSearchRefinementValue) validateValues(formats strfmt.Registry) error {

	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductSearchRefinementValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductSearchRefinementValue) UnmarshalBinary(b []byte) error {
	var res ProductSearchRefinementValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
