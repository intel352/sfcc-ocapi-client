// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SuggestionResult Document representing a search suggestion result.
// swagger:model suggestion_result
type SuggestionResult struct {

	// Returns the suggested brands.
	BrandSuggestions *Suggestion `json:"brand_suggestions,omitempty"`

	// Returns the suggested categories.
	CategorySuggestions *Suggestion `json:"category_suggestions,omitempty"`

	// Returns the suggested content.
	ContentSuggestions *Suggestion `json:"content_suggestions,omitempty"`

	// Returns the suggested custom suggestions.
	CustomSuggestions *Suggestion `json:"custom_suggestions,omitempty"`

	// Returns the suggested products.
	ProductSuggestions *Suggestion `json:"product_suggestions,omitempty"`

	// The query phrase to search for.
	Query string `json:"query,omitempty"`
}

// Validate validates this suggestion result
func (m *SuggestionResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrandSuggestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategorySuggestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentSuggestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomSuggestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductSuggestions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SuggestionResult) validateBrandSuggestions(formats strfmt.Registry) error {

	if swag.IsZero(m.BrandSuggestions) { // not required
		return nil
	}

	if m.BrandSuggestions != nil {
		if err := m.BrandSuggestions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brand_suggestions")
			}
			return err
		}
	}

	return nil
}

func (m *SuggestionResult) validateCategorySuggestions(formats strfmt.Registry) error {

	if swag.IsZero(m.CategorySuggestions) { // not required
		return nil
	}

	if m.CategorySuggestions != nil {
		if err := m.CategorySuggestions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category_suggestions")
			}
			return err
		}
	}

	return nil
}

func (m *SuggestionResult) validateContentSuggestions(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentSuggestions) { // not required
		return nil
	}

	if m.ContentSuggestions != nil {
		if err := m.ContentSuggestions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content_suggestions")
			}
			return err
		}
	}

	return nil
}

func (m *SuggestionResult) validateCustomSuggestions(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomSuggestions) { // not required
		return nil
	}

	if m.CustomSuggestions != nil {
		if err := m.CustomSuggestions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom_suggestions")
			}
			return err
		}
	}

	return nil
}

func (m *SuggestionResult) validateProductSuggestions(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductSuggestions) { // not required
		return nil
	}

	if m.ProductSuggestions != nil {
		if err := m.ProductSuggestions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product_suggestions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SuggestionResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SuggestionResult) UnmarshalBinary(b []byte) error {
	var res SuggestionResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
