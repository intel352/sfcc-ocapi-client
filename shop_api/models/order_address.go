// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderAddress Document representing an order address.
// swagger:model order_address
type OrderAddress struct {

	// The first address.
	// Required: true
	Address1 *string `json:"address1"`

	// The second address.
	Address2 string `json:"address2,omitempty"`

	// The city.
	// Required: true
	City *string `json:"city"`

	// The company name.
	CompanyName string `json:"company_name,omitempty"`

	// The two-letter ISO 3166-1 (Alpha-2) country code.
	// Required: true
	// Enum: [US FR IT JP CN GB]
	CountryCode *string `json:"country_code"`

	// The first name.
	// Required: true
	FirstName *string `json:"first_name"`

	// The full name.
	FullName string `json:"full_name,omitempty"`

	// Id used to identify this address
	ID string `json:"id,omitempty"`

	// The job title.
	JobTitle string `json:"job_title,omitempty"`

	// The last name.
	// Required: true
	LastName *string `json:"last_name"`

	// The phone number.
	Phone string `json:"phone,omitempty"`

	// The post box.
	PostBox string `json:"post_box,omitempty"`

	// The postal code.
	// Required: true
	PostalCode *string `json:"postal_code"`

	// The salutation.
	Salutation string `json:"salutation,omitempty"`

	// The second name.
	SecondName string `json:"second_name,omitempty"`

	// The state code.
	StateCode string `json:"state_code,omitempty"`

	// The suffix.
	Suffix string `json:"suffix,omitempty"`

	// The suite.
	Suite string `json:"suite,omitempty"`

	// The title.
	Title string `json:"title,omitempty"`
}

// Validate validates this order address
func (m *OrderAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderAddress) validateAddress1(formats strfmt.Registry) error {

	if err := validate.Required("address1", "body", m.Address1); err != nil {
		return err
	}

	return nil
}

func (m *OrderAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	return nil
}

var orderAddressTypeCountryCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["US","FR","IT","JP","CN","GB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderAddressTypeCountryCodePropEnum = append(orderAddressTypeCountryCodePropEnum, v)
	}
}

const (

	// OrderAddressCountryCodeUS captures enum value "US"
	OrderAddressCountryCodeUS string = "US"

	// OrderAddressCountryCodeFR captures enum value "FR"
	OrderAddressCountryCodeFR string = "FR"

	// OrderAddressCountryCodeIT captures enum value "IT"
	OrderAddressCountryCodeIT string = "IT"

	// OrderAddressCountryCodeJP captures enum value "JP"
	OrderAddressCountryCodeJP string = "JP"

	// OrderAddressCountryCodeCN captures enum value "CN"
	OrderAddressCountryCodeCN string = "CN"

	// OrderAddressCountryCodeGB captures enum value "GB"
	OrderAddressCountryCodeGB string = "GB"
)

// prop value enum
func (m *OrderAddress) validateCountryCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, orderAddressTypeCountryCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OrderAddress) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("country_code", "body", m.CountryCode); err != nil {
		return err
	}

	// value enum
	if err := m.validateCountryCodeEnum("country_code", "body", *m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *OrderAddress) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *OrderAddress) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *OrderAddress) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postal_code", "body", m.PostalCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderAddress) UnmarshalBinary(b []byte) error {
	var res OrderAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
