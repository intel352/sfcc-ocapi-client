// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ShippingItem Document representing a shipping item.
// swagger:model shipping_item
type ShippingItem struct {

	// The tax of the product item after adjustments applying.
	AdjustedTax float64 `json:"adjusted_tax,omitempty"`

	// The base price for the line item, which is the
	//  price of the unit before applying adjustments, in the purchase
	//  currency. The base price may be net or gross of tax depending
	//  on the configured taxation policy.
	BasePrice float64 `json:"base_price,omitempty"`

	// The item identifier. Use this to identify an item when
	//  updating the item quantity or creating a custom price adjustment for an
	//  item.
	ItemID string `json:"item_id,omitempty"`

	// The text describing the item in more detail.
	ItemText string `json:"item_text,omitempty"`

	// The price of the line item before applying any adjustments. If the line item is based on net pricing
	//  then the net price is returned. If the line item is based on gross
	//  pricing then the gross price is returned.
	Price float64 `json:"price,omitempty"`

	// Array of price adjustments. Can be empty.
	PriceAdjustments []*PriceAdjustment `json:"price_adjustments"`

	// The price of the product line item after applying all product-level
	//  adjustments. For net pricing the adjusted net price is returned. For gross pricing, the adjusted
	//  gross price is returned.
	PriceAfterItemDiscount float64 `json:"price_after_item_discount,omitempty"`

	// The identifier of the shipment to which this item belongs.
	ShipmentID string `json:"shipment_id,omitempty"`

	// The tax of the product item before adjustments applying.
	Tax float64 `json:"tax,omitempty"`

	// The price used to calculate the tax for this product item.
	TaxBasis float64 `json:"tax_basis,omitempty"`

	// The tax class ID for the product item or null
	//  if no tax class ID is associated with the product item.
	TaxClassID string `json:"tax_class_id,omitempty"`

	// The tax rate, which is the decimal tax rate to be applied
	//  to the product represented by this item.
	TaxRate float64 `json:"tax_rate,omitempty"`
}

// Validate validates this shipping item
func (m *ShippingItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePriceAdjustments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingItem) validatePriceAdjustments(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceAdjustments) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceAdjustments); i++ {
		if swag.IsZero(m.PriceAdjustments[i]) { // not required
			continue
		}

		if m.PriceAdjustments[i] != nil {
			if err := m.PriceAdjustments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("price_adjustments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShippingItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingItem) UnmarshalBinary(b []byte) error {
	var res ShippingItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
