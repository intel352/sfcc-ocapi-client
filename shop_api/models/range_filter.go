// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RangeFilter Document representing a range filter.
//
// swagger:model range_filter
type RangeFilter struct {

	// The search field.
	// Required: true
	Field *string `json:"field"`

	// The configured lower bound of the filter range. The lower bound is optional. If not given, the range is  open ended with respect to the lower bound.
	From interface{} `json:"from,omitempty"`

	// A flag indicating whether the lower bound of the range is inclusive (or exclusive). The default is true (which means that the given  lower bound is inclusive).
	FromInclusive bool `json:"from_inclusive,omitempty"`

	// The configured upper bound of the filter range. The upper bound is optional. If not given, the range is  open ended with respect to the upper bound.
	To interface{} `json:"to,omitempty"`

	// A flag indicating whether the upper bound of the range is inclusive (or exclusive). The default is true (which means that the given  upper bound is inclusive).
	ToInclusive bool `json:"to_inclusive,omitempty"`
}

// Validate validates this range filter
func (m *RangeFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RangeFilter) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RangeFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RangeFilter) UnmarshalBinary(b []byte) error {
	var res RangeFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
