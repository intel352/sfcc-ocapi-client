// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Store Document representing a store.
// swagger:model store
type Store struct {

	// The first address of the store.
	// Min Length: 1
	Address1 string `json:"address1,omitempty"`

	// The second address of the store.
	Address2 string `json:"address2,omitempty"`

	// c test attribute
	CTestAttribute []string `json:"c_TestAttribute"`

	// Country Code Value - for the form values
	CCountryCodeValue string `json:"c_countryCodeValue,omitempty"`

	// Store Inventory List ID
	CInventoryListID string `json:"c_inventoryListId,omitempty"`

	// The city of the store.
	City string `json:"city,omitempty"`

	// The country code of the store.
	// Enum: [US CA DE]
	CountryCode string `json:"country_code,omitempty"`

	// The distance to the given geo location in the unit of attribute distance (miles or kilometers).
	Distance float64 `json:"distance,omitempty"`

	// The distance unit the distance attribute is measured in (either in miles or kilometers).
	DistanceUnit string `json:"distance_unit,omitempty"`

	// The email address of the store.
	Email string `json:"email,omitempty"`

	// The fax number of the store.
	Fax string `json:"fax,omitempty"`

	// The id of the store.
	// Required: true
	// Max Length: 256
	// Min Length: 1
	ID *string `json:"id"`

	// The store image.
	Image string `json:"image,omitempty"`

	// The inventory list id associated with this store.
	// Max Length: 256
	InventoryID string `json:"inventory_id,omitempty"`

	// The latitude of the store.
	// Maximum: 90
	// Minimum: -90
	Latitude *float64 `json:"latitude,omitempty"`

	// The longitude of the store.
	// Maximum: 180
	// Minimum: -180
	Longitude *float64 `json:"longitude,omitempty"`

	// The store name.
	Name string `json:"name,omitempty"`

	// The phone number of the store.
	Phone string `json:"phone,omitempty"`

	// Whether this store uses Store Point-of-Sale.
	PosEnabled bool `json:"pos_enabled,omitempty"`

	// The postal code of the store.
	PostalCode string `json:"postal_code,omitempty"`

	// The state code of the store.
	StateCode string `json:"state_code,omitempty"`

	// The store events.
	StoreEvents string `json:"store_events,omitempty"`

	// The store opening hours.
	StoreHours string `json:"store_hours,omitempty"`

	// Whether this store should show up in store locator results.
	StoreLocatorEnabled bool `json:"store_locator_enabled,omitempty"`
}

// Validate validates this store
func (m *Store) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Store) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MinLength("address1", "body", string(m.Address1), 1); err != nil {
		return err
	}

	return nil
}

var storeTypeCountryCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["US","CA","DE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storeTypeCountryCodePropEnum = append(storeTypeCountryCodePropEnum, v)
	}
}

const (

	// StoreCountryCodeUS captures enum value "US"
	StoreCountryCodeUS string = "US"

	// StoreCountryCodeCA captures enum value "CA"
	StoreCountryCodeCA string = "CA"

	// StoreCountryCodeDE captures enum value "DE"
	StoreCountryCodeDE string = "DE"
)

// prop value enum
func (m *Store) validateCountryCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storeTypeCountryCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Store) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateCountryCodeEnum("country_code", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateInventoryID(formats strfmt.Registry) error {

	if swag.IsZero(m.InventoryID) { // not required
		return nil
	}

	if err := validate.MaxLength("inventory_id", "body", string(m.InventoryID), 256); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateLatitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Latitude) { // not required
		return nil
	}

	if err := validate.Minimum("latitude", "body", float64(*m.Latitude), -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("latitude", "body", float64(*m.Latitude), 90, false); err != nil {
		return err
	}

	return nil
}

func (m *Store) validateLongitude(formats strfmt.Registry) error {

	if swag.IsZero(m.Longitude) { // not required
		return nil
	}

	if err := validate.Minimum("longitude", "body", float64(*m.Longitude), -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("longitude", "body", float64(*m.Longitude), 180, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Store) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Store) UnmarshalBinary(b []byte) error {
	var res Store
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
