// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerPaymentInstrumentRequest Document representing a customer payment instrument request.
// swagger:model customer_payment_instrument_request
type CustomerPaymentInstrumentRequest struct {

	// The bank routing number.
	// Max Length: 256
	BankRoutingNumber string `json:"bank_routing_number,omitempty"`

	// The gift certificate code.
	// Max Length: 256
	GiftCertificateCode string `json:"gift_certificate_code,omitempty"`

	// The payment bank account request data.
	PaymentBankAccount *PaymentBankAccountRequest `json:"payment_bank_account,omitempty"`

	// The customer payment card.
	PaymentCard *CustomerPaymentCardRequest `json:"payment_card,omitempty"`

	// The payment method id. Optional if a customer payment instrument id is specified.
	// Max Length: 256
	PaymentMethodID string `json:"payment_method_id,omitempty"`
}

// Validate validates this customer payment instrument request
func (m *CustomerPaymentInstrumentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiftCertificateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethodID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerPaymentInstrumentRequest) validateBankRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.BankRoutingNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("bank_routing_number", "body", string(m.BankRoutingNumber), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerPaymentInstrumentRequest) validateGiftCertificateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.GiftCertificateCode) { // not required
		return nil
	}

	if err := validate.MaxLength("gift_certificate_code", "body", string(m.GiftCertificateCode), 256); err != nil {
		return err
	}

	return nil
}

func (m *CustomerPaymentInstrumentRequest) validatePaymentBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentBankAccount) { // not required
		return nil
	}

	if m.PaymentBankAccount != nil {
		if err := m.PaymentBankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_bank_account")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerPaymentInstrumentRequest) validatePaymentCard(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentCard) { // not required
		return nil
	}

	if m.PaymentCard != nil {
		if err := m.PaymentCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_card")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerPaymentInstrumentRequest) validatePaymentMethodID(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMethodID) { // not required
		return nil
	}

	if err := validate.MaxLength("payment_method_id", "body", string(m.PaymentMethodID), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerPaymentInstrumentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerPaymentInstrumentRequest) UnmarshalBinary(b []byte) error {
	var res CustomerPaymentInstrumentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
