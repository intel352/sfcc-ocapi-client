// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PriceAdjustmentRequest Document representing a price adjustment request.
//
// swagger:model price_adjustment_request
type PriceAdjustmentRequest struct {

	// A discount that you can specify instead of a price.
	//  When defining a discount, you must specify a type and
	//  a value.
	Discount *DiscountRequest `json:"discount,omitempty"`

	// The item to which the price adjustment should be added, depending on the specified level.
	//  If the level is 'order', you need not specify an item id. If 'shipping', specify the uuid
	//  of the shipping item. If 'product', specify the uuid of the product item.
	ItemID string `json:"item_id,omitempty"`

	// The text describing the item in more detail.
	ItemText string `json:"item_text,omitempty"`

	// The level at which the adjustment is applied. When a product or shipping
	//  level is specified, you must also specify the item id.
	// Required: true
	// Enum: [product shipping order]
	Level *string `json:"level"`

	// The id of the related promotion. Custom price adjustments
	//  can be assigned any promotion id so long it is not
	//  used by a price adjustment belonging to the same item
	//  and is not used by promotion defined in the promotion engine.
	//  If not specified, a promotion id is generated.
	PromotionID string `json:"promotion_id,omitempty"`

	// The reason why this price adjustment was made.
	// Enum: [PRICE_MATCH BACKORDER EVEN_EXCHANGE]
	ReasonCode string `json:"reason_code,omitempty"`
}

// Validate validates this price adjustment request
func (m *PriceAdjustmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PriceAdjustmentRequest) validateDiscount(formats strfmt.Registry) error {

	if swag.IsZero(m.Discount) { // not required
		return nil
	}

	if m.Discount != nil {
		if err := m.Discount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discount")
			}
			return err
		}
	}

	return nil
}

var priceAdjustmentRequestTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["product","shipping","order"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priceAdjustmentRequestTypeLevelPropEnum = append(priceAdjustmentRequestTypeLevelPropEnum, v)
	}
}

const (

	// PriceAdjustmentRequestLevelProduct captures enum value "product"
	PriceAdjustmentRequestLevelProduct string = "product"

	// PriceAdjustmentRequestLevelShipping captures enum value "shipping"
	PriceAdjustmentRequestLevelShipping string = "shipping"

	// PriceAdjustmentRequestLevelOrder captures enum value "order"
	PriceAdjustmentRequestLevelOrder string = "order"
)

// prop value enum
func (m *PriceAdjustmentRequest) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, priceAdjustmentRequestTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PriceAdjustmentRequest) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", *m.Level); err != nil {
		return err
	}

	return nil
}

var priceAdjustmentRequestTypeReasonCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PRICE_MATCH","BACKORDER","EVEN_EXCHANGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priceAdjustmentRequestTypeReasonCodePropEnum = append(priceAdjustmentRequestTypeReasonCodePropEnum, v)
	}
}

const (

	// PriceAdjustmentRequestReasonCodePRICEMATCH captures enum value "PRICE_MATCH"
	PriceAdjustmentRequestReasonCodePRICEMATCH string = "PRICE_MATCH"

	// PriceAdjustmentRequestReasonCodeBACKORDER captures enum value "BACKORDER"
	PriceAdjustmentRequestReasonCodeBACKORDER string = "BACKORDER"

	// PriceAdjustmentRequestReasonCodeEVENEXCHANGE captures enum value "EVEN_EXCHANGE"
	PriceAdjustmentRequestReasonCodeEVENEXCHANGE string = "EVEN_EXCHANGE"
)

// prop value enum
func (m *PriceAdjustmentRequest) validateReasonCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, priceAdjustmentRequestTypeReasonCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PriceAdjustmentRequest) validateReasonCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReasonCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonCodeEnum("reason_code", "body", m.ReasonCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PriceAdjustmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PriceAdjustmentRequest) UnmarshalBinary(b []byte) error {
	var res PriceAdjustmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
