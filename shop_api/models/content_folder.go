// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentFolder Document representing a content folder.
// swagger:model content_folder
type ContentFolder struct {

	// Use this attribute to apply custom styles for this category.
	CCustomCSSFile string `json:"c_customCSSFile,omitempty"`

	// The localized content folder description.
	Description string `json:"description,omitempty"`

	// The array of content subfolders. This array can be empty.
	Folders []*ContentFolder `json:"folders"`

	// The id of the content folder.
	// Required: true
	// Max Length: 256
	// Min Length: 1
	ID *string `json:"id"`

	// The localized content folder name.
	Name string `json:"name,omitempty"`

	// The localized content folder page description.
	PageDescription string `json:"page_description,omitempty"`

	// The localized content folder page description.
	PageKeywords string `json:"page_keywords,omitempty"`

	// The localized content folder page title.
	PageTitle string `json:"page_title,omitempty"`

	// The id of the parent content folder.
	ParentFolderID string `json:"parent_folder_id,omitempty"`
}

// Validate validates this content folder
func (m *ContentFolder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFolders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentFolder) validateFolders(formats strfmt.Registry) error {

	if swag.IsZero(m.Folders) { // not required
		return nil
	}

	for i := 0; i < len(m.Folders); i++ {
		if swag.IsZero(m.Folders[i]) { // not required
			continue
		}

		if m.Folders[i] != nil {
			if err := m.Folders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("folders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ContentFolder) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentFolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentFolder) UnmarshalBinary(b []byte) error {
	var res ContentFolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
