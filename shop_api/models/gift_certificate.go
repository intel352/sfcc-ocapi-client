// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GiftCertificate Document representing a gift certificate.
// swagger:model gift_certificate
type GiftCertificate struct {

	// The gift certificate original amount.
	Amount float64 `json:"amount,omitempty"`

	// The gift certificate balance.
	Balance float64 `json:"balance,omitempty"`

	// The gift certificate description.
	Description string `json:"description,omitempty"`

	// Is the gift certificate is enabled?
	Enabled bool `json:"enabled,omitempty"`

	// The masked gift certificate code.
	MaskedGiftCertificateCode string `json:"masked_gift_certificate_code,omitempty"`

	// The merchant ID.
	MerchantID string `json:"merchant_id,omitempty"`

	// The message.
	Message string `json:"message,omitempty"`

	// The recipient email.
	RecipientEmail string `json:"recipient_email,omitempty"`

	// The recipient name.
	RecipientName string `json:"recipient_name,omitempty"`

	// The sender name.
	SenderName string `json:"sender_name,omitempty"`

	// The gift certificate status.
	// Enum: [pending issued partially_redeemed redeemed]
	Status string `json:"status,omitempty"`
}

// Validate validates this gift certificate
func (m *GiftCertificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var giftCertificateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","issued","partially_redeemed","redeemed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		giftCertificateTypeStatusPropEnum = append(giftCertificateTypeStatusPropEnum, v)
	}
}

const (

	// GiftCertificateStatusPending captures enum value "pending"
	GiftCertificateStatusPending string = "pending"

	// GiftCertificateStatusIssued captures enum value "issued"
	GiftCertificateStatusIssued string = "issued"

	// GiftCertificateStatusPartiallyRedeemed captures enum value "partially_redeemed"
	GiftCertificateStatusPartiallyRedeemed string = "partially_redeemed"

	// GiftCertificateStatusRedeemed captures enum value "redeemed"
	GiftCertificateStatusRedeemed string = "redeemed"
)

// prop value enum
func (m *GiftCertificate) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, giftCertificateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GiftCertificate) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GiftCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GiftCertificate) UnmarshalBinary(b []byte) error {
	var res GiftCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
