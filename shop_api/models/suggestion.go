// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Suggestion Document representing a suggestion.
// swagger:model suggestion
type Suggestion struct {

	// The sorted list of suggested brands. This list can be empty.
	Brands []string `json:"brands"`

	// The sorted list of suggested categories. This list can be empty.
	Categories []*SuggestedCategory `json:"categories"`

	// The sorted list of suggested content. This list can be empty.
	Content []*SuggestedContent `json:"content"`

	// The sorted list of suggested custom suggestions. This list can be empty.
	CustomSuggestions []string `json:"custom_suggestions"`

	// The sorted list of suggested products. This list can be empty.
	Products []*SuggestedProduct `json:"products"`

	// A list of suggested phrases. This list can be empty.
	SuggestedPhrases []*SuggestedPhrase `json:"suggested_phrases"`

	// A list of suggested terms. This list can be empty.
	SuggestedTerms []*SuggestedTerms `json:"suggested_terms"`
}

// Validate validates this suggestion
func (m *Suggestion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuggestedPhrases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuggestedTerms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Suggestion) validateCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.Categories) { // not required
		return nil
	}

	for i := 0; i < len(m.Categories); i++ {
		if swag.IsZero(m.Categories[i]) { // not required
			continue
		}

		if m.Categories[i] != nil {
			if err := m.Categories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Suggestion) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(m.Content) { // not required
		return nil
	}

	for i := 0; i < len(m.Content); i++ {
		if swag.IsZero(m.Content[i]) { // not required
			continue
		}

		if m.Content[i] != nil {
			if err := m.Content[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Suggestion) validateProducts(formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	for i := 0; i < len(m.Products); i++ {
		if swag.IsZero(m.Products[i]) { // not required
			continue
		}

		if m.Products[i] != nil {
			if err := m.Products[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Suggestion) validateSuggestedPhrases(formats strfmt.Registry) error {

	if swag.IsZero(m.SuggestedPhrases) { // not required
		return nil
	}

	for i := 0; i < len(m.SuggestedPhrases); i++ {
		if swag.IsZero(m.SuggestedPhrases[i]) { // not required
			continue
		}

		if m.SuggestedPhrases[i] != nil {
			if err := m.SuggestedPhrases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suggested_phrases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Suggestion) validateSuggestedTerms(formats strfmt.Registry) error {

	if swag.IsZero(m.SuggestedTerms) { // not required
		return nil
	}

	for i := 0; i < len(m.SuggestedTerms); i++ {
		if swag.IsZero(m.SuggestedTerms[i]) { // not required
			continue
		}

		if m.SuggestedTerms[i] != nil {
			if err := m.SuggestedTerms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suggested_terms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Suggestion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Suggestion) UnmarshalBinary(b []byte) error {
	var res Suggestion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
