// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ApproachingDiscount Document representing a note to an object.
// swagger:model approaching_discount
type ApproachingDiscount struct {

	// The total amount needed to receive the discount.
	ConditionThreshold float64 `json:"condition_threshold,omitempty"`

	// The discount the customer can receive if eligible.
	Discount *Discount `json:"discount,omitempty"`

	// The amount the customer basket contributes towards the purchase condition.
	MerchandiseTotal float64 `json:"merchandise_total,omitempty"`

	// The link to details of the promotion associated with this discount.
	PromotionLink *PromotionLink `json:"promotion_link,omitempty"`

	// The unique id of the shipment the discount relates to.
	ShipmentID string `json:"shipment_id,omitempty"`

	// The shipping methods the promotion relates to.
	ShippingMethods []*ShippingMethod `json:"shipping_methods"`

	// The type of the approaching discount ("order" or "shipping").
	Type string `json:"type,omitempty"`
}

// Validate validates this approaching discount
func (m *ApproachingDiscount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotionLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingMethods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApproachingDiscount) validateDiscount(formats strfmt.Registry) error {

	if swag.IsZero(m.Discount) { // not required
		return nil
	}

	if m.Discount != nil {
		if err := m.Discount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discount")
			}
			return err
		}
	}

	return nil
}

func (m *ApproachingDiscount) validatePromotionLink(formats strfmt.Registry) error {

	if swag.IsZero(m.PromotionLink) { // not required
		return nil
	}

	if m.PromotionLink != nil {
		if err := m.PromotionLink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotion_link")
			}
			return err
		}
	}

	return nil
}

func (m *ApproachingDiscount) validateShippingMethods(formats strfmt.Registry) error {

	if swag.IsZero(m.ShippingMethods) { // not required
		return nil
	}

	for i := 0; i < len(m.ShippingMethods); i++ {
		if swag.IsZero(m.ShippingMethods[i]) { // not required
			continue
		}

		if m.ShippingMethods[i] != nil {
			if err := m.ShippingMethods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipping_methods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApproachingDiscount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApproachingDiscount) UnmarshalBinary(b []byte) error {
	var res ApproachingDiscount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
