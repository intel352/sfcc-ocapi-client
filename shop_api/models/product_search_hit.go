// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductSearchHit Document representing a product search hit.
// swagger:model product_search_hit
type ProductSearchHit struct {

	// The ISO 4217 mnemonic code of the currency.
	Currency string `json:"currency,omitempty"`

	// The type information for the search hit.
	HitType string `json:"hit_type,omitempty"`

	// The first image of the product hit for the configured viewtype.
	Image *Image `json:"image,omitempty"`

	// The URL addressing the product.
	Link string `json:"link,omitempty"`

	// A flag indicating whether the product is orderable.
	Orderable bool `json:"orderable,omitempty"`

	// The sales price of the product. In case of complex products like master or set this is the minimum price of
	//  related child products.
	Price float64 `json:"price,omitempty"`

	// The maximum sales of related child products in case of complex products like master or set.
	PriceMax float64 `json:"price_max,omitempty"`

	// The prices map with price book ids and their values.
	Prices map[string]float64 `json:"prices,omitempty"`

	// The id (SKU) of the product.
	// Required: true
	ProductID *string `json:"product_id"`

	// The localized name of the product.
	ProductName string `json:"product_name,omitempty"`

	// The type information for the product.
	ProductType *ProductType `json:"product_type,omitempty"`

	// The first represented product.
	RepresentedProduct *ProductRef `json:"represented_product,omitempty"`

	// All the represented products.
	RepresentedProducts []*ProductRef `json:"represented_products"`

	// The array of represented variation attributes (for the master product only). This array can be empty.
	VariationAttributes []*VariationAttribute `json:"variation_attributes"`
}

// Validate validates this product search hit
func (m *ProductSearchHit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepresentedProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepresentedProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariationAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductSearchHit) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *ProductSearchHit) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("product_id", "body", m.ProductID); err != nil {
		return err
	}

	return nil
}

func (m *ProductSearchHit) validateProductType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductType) { // not required
		return nil
	}

	if m.ProductType != nil {
		if err := m.ProductType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product_type")
			}
			return err
		}
	}

	return nil
}

func (m *ProductSearchHit) validateRepresentedProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.RepresentedProduct) { // not required
		return nil
	}

	if m.RepresentedProduct != nil {
		if err := m.RepresentedProduct.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("represented_product")
			}
			return err
		}
	}

	return nil
}

func (m *ProductSearchHit) validateRepresentedProducts(formats strfmt.Registry) error {

	if swag.IsZero(m.RepresentedProducts) { // not required
		return nil
	}

	for i := 0; i < len(m.RepresentedProducts); i++ {
		if swag.IsZero(m.RepresentedProducts[i]) { // not required
			continue
		}

		if m.RepresentedProducts[i] != nil {
			if err := m.RepresentedProducts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("represented_products" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductSearchHit) validateVariationAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.VariationAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.VariationAttributes); i++ {
		if swag.IsZero(m.VariationAttributes[i]) { // not required
			continue
		}

		if m.VariationAttributes[i] != nil {
			if err := m.VariationAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("variation_attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductSearchHit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductSearchHit) UnmarshalBinary(b []byte) error {
	var res ProductSearchHit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
