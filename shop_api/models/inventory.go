// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Inventory Document representing inventory information of the current product for a particular inventory list.
// swagger:model inventory
type Inventory struct {

	// The ats of the product. If it is infinity, the return value is 999999. The value can be overwritten by the
	//  OCAPI setting 'product.inventory.ats.max_threshold'.
	Ats float64 `json:"ats,omitempty"`

	// A flag indicating whether the product is back orderable.
	Backorderable bool `json:"backorderable,omitempty"`

	// The inventory id.
	// Required: true
	ID *string `json:"id"`

	// A flag indicating the date when the product will be in stock.
	// Format: date-time
	InStockDate strfmt.DateTime `json:"in_stock_date,omitempty"`

	// A flag indicating whether at least one of products is available to sell.
	Orderable bool `json:"orderable,omitempty"`

	// A flag indicating whether the product is pre orderable.
	Preorderable bool `json:"preorderable,omitempty"`

	// The stock level of the product. If it is infinity, the return value is 999999. The value can be overwritten by the
	//  OCAPI setting 'product.inventory.stock_level.max_threshold'.
	StockLevel float64 `json:"stock_level,omitempty"`
}

// Validate validates this inventory
func (m *Inventory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInStockDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Inventory) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Inventory) validateInStockDate(formats strfmt.Registry) error {

	if swag.IsZero(m.InStockDate) { // not required
		return nil
	}

	if err := validate.FormatOf("in_stock_date", "body", "date-time", m.InStockDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Inventory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Inventory) UnmarshalBinary(b []byte) error {
	var res Inventory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
