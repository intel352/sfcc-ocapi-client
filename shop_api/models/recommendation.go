// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Recommendation Document representing a product recommendation.
// swagger:model recommendation
type Recommendation struct {

	// The localized callout message of the recommendation.
	CalloutMsg string `json:"callout_msg,omitempty"`

	// The image of the recommendation.
	Image *Image `json:"image,omitempty"`

	// The localized long description of the recommendation.
	LongDescription string `json:"long_description,omitempty"`

	// The localized name of the recommendation.
	Name string `json:"name,omitempty"`

	// The recommendation type of the recommendation.
	// Required: true
	RecommendationType *RecommendationType `json:"recommendation_type"`

	// The recommended item id of the recommendation.
	RecommendedItemID string `json:"recommended_item_id,omitempty"`

	// The recommended item link of the recommendation.
	RecommendedItemLink string `json:"recommended_item_link,omitempty"`

	// The localized short description of the recommendation.
	ShortDescription string `json:"short_description,omitempty"`
}

// Validate validates this recommendation
func (m *Recommendation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recommendation) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *Recommendation) validateRecommendationType(formats strfmt.Registry) error {

	if err := validate.Required("recommendation_type", "body", m.RecommendationType); err != nil {
		return err
	}

	if m.RecommendationType != nil {
		if err := m.RecommendationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommendation_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Recommendation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Recommendation) UnmarshalBinary(b []byte) error {
	var res Recommendation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
