// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthRequest Document representing the authentication request type.
// swagger:model auth_request
type AuthRequest struct {

	// Type of authentication request: guest, login (credentials), refresh or session.
	// Required: true
	// Enum: [guest credentials refresh session]
	Type *string `json:"type"`
}

// Validate validates this auth request
func (m *AuthRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var authRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["guest","credentials","refresh","session"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authRequestTypeTypePropEnum = append(authRequestTypeTypePropEnum, v)
	}
}

const (

	// AuthRequestTypeGuest captures enum value "guest"
	AuthRequestTypeGuest string = "guest"

	// AuthRequestTypeCredentials captures enum value "credentials"
	AuthRequestTypeCredentials string = "credentials"

	// AuthRequestTypeRefresh captures enum value "refresh"
	AuthRequestTypeRefresh string = "refresh"

	// AuthRequestTypeSession captures enum value "session"
	AuthRequestTypeSession string = "session"
)

// prop value enum
func (m *AuthRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, authRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AuthRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthRequest) UnmarshalBinary(b []byte) error {
	var res AuthRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
