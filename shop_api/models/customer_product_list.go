// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerProductList Document representing a customer product List.
// swagger:model customer_product_list
type CustomerProductList struct {

	// The coRegistrant of this product list.
	CoRegistrant *CustomerProductListRegistrant `json:"co_registrant,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The resource link to the current shipping address of this customer product list.
	CurrentShippingAddressLink *CustomerAddressLink `json:"current_shipping_address_link,omitempty"`

	// The list of customer product list items.
	CustomerProductListItems []*CustomerProductListItem `json:"customer_product_list_items"`

	// The description of this product list.
	Description string `json:"description,omitempty"`

	// The event of this product list.
	Event *ProductListEvent `json:"event,omitempty"`

	// The id of this product list.
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// The resource link to the items of this customer product list.
	ItemsLink *CustomerProductListItemLink `json:"items_link,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The name of this product list.
	Name string `json:"name,omitempty"`

	// The resource link to the post event shipping address of this customer product list.
	PostEventShippingAddressLink *CustomerAddressLink `json:"post_event_shipping_address_link,omitempty"`

	// The abbreviated shipping address of this product list representing what anonymous user can see.
	ProductListShippingAddress *ProductListShippingAddress `json:"product_list_shipping_address,omitempty"`

	// Indicates whether the owner made this product list available for access by other customers.
	Public bool `json:"public,omitempty"`

	// The registrant of this product list.
	Registrant *CustomerProductListRegistrant `json:"registrant,omitempty"`

	// The resource link to the shipping address of this customer product list.
	ShippingAddressLink *CustomerAddressLink `json:"shipping_address_link,omitempty"`

	// The type of the product list.
	// Enum: [wish_list gift_registry shopping_list custom_1 custom_2 custom_3]
	Type string `json:"type,omitempty"`
}

// Validate validates this customer product list
func (m *CustomerProductList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoRegistrant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentShippingAddressLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerProductListItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemsLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostEventShippingAddressLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductListShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddressLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerProductList) validateCoRegistrant(formats strfmt.Registry) error {

	if swag.IsZero(m.CoRegistrant) { // not required
		return nil
	}

	if m.CoRegistrant != nil {
		if err := m.CoRegistrant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("co_registrant")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerProductList) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerProductList) validateCurrentShippingAddressLink(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentShippingAddressLink) { // not required
		return nil
	}

	if m.CurrentShippingAddressLink != nil {
		if err := m.CurrentShippingAddressLink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_shipping_address_link")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerProductList) validateCustomerProductListItems(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerProductListItems) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomerProductListItems); i++ {
		if swag.IsZero(m.CustomerProductListItems[i]) { // not required
			continue
		}

		if m.CustomerProductListItems[i] != nil {
			if err := m.CustomerProductListItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customer_product_list_items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomerProductList) validateEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerProductList) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *CustomerProductList) validateItemsLink(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemsLink) { // not required
		return nil
	}

	if m.ItemsLink != nil {
		if err := m.ItemsLink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("items_link")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerProductList) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerProductList) validatePostEventShippingAddressLink(formats strfmt.Registry) error {

	if swag.IsZero(m.PostEventShippingAddressLink) { // not required
		return nil
	}

	if m.PostEventShippingAddressLink != nil {
		if err := m.PostEventShippingAddressLink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post_event_shipping_address_link")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerProductList) validateProductListShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductListShippingAddress) { // not required
		return nil
	}

	if m.ProductListShippingAddress != nil {
		if err := m.ProductListShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product_list_shipping_address")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerProductList) validateRegistrant(formats strfmt.Registry) error {

	if swag.IsZero(m.Registrant) { // not required
		return nil
	}

	if m.Registrant != nil {
		if err := m.Registrant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrant")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerProductList) validateShippingAddressLink(formats strfmt.Registry) error {

	if swag.IsZero(m.ShippingAddressLink) { // not required
		return nil
	}

	if m.ShippingAddressLink != nil {
		if err := m.ShippingAddressLink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipping_address_link")
			}
			return err
		}
	}

	return nil
}

var customerProductListTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wish_list","gift_registry","shopping_list","custom_1","custom_2","custom_3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerProductListTypeTypePropEnum = append(customerProductListTypeTypePropEnum, v)
	}
}

const (

	// CustomerProductListTypeWishList captures enum value "wish_list"
	CustomerProductListTypeWishList string = "wish_list"

	// CustomerProductListTypeGiftRegistry captures enum value "gift_registry"
	CustomerProductListTypeGiftRegistry string = "gift_registry"

	// CustomerProductListTypeShoppingList captures enum value "shopping_list"
	CustomerProductListTypeShoppingList string = "shopping_list"

	// CustomerProductListTypeCustom1 captures enum value "custom_1"
	CustomerProductListTypeCustom1 string = "custom_1"

	// CustomerProductListTypeCustom2 captures enum value "custom_2"
	CustomerProductListTypeCustom2 string = "custom_2"

	// CustomerProductListTypeCustom3 captures enum value "custom_3"
	CustomerProductListTypeCustom3 string = "custom_3"
)

// prop value enum
func (m *CustomerProductList) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerProductListTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CustomerProductList) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerProductList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerProductList) UnmarshalBinary(b []byte) error {
	var res CustomerProductList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
