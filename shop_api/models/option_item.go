// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OptionItem Document representing an option item.
// swagger:model option_item
type OptionItem struct {

	// The tax of the product item after adjustments applying.
	AdjustedTax float64 `json:"adjusted_tax,omitempty"`

	// The base price for the line item, which is the
	//  price of the unit before applying adjustments, in the purchase
	//  currency. The base price may be net or gross of tax depending
	//  on the configured taxation policy.
	BasePrice float64 `json:"base_price,omitempty"`

	// The id of the bonus discount line item this bonus product relates to.
	BonusDiscountLineItemID string `json:"bonus_discount_line_item_id,omitempty"`

	// A flag indicating whether the product item is a bonus.
	BonusProductLineItem bool `json:"bonus_product_line_item,omitempty"`

	// The array of bundled product items. Can be empty.
	BundledProductItems []*ProductItem `json:"bundled_product_items"`

	// Returns true if the item is a gift.
	Gift bool `json:"gift,omitempty"`

	// The gift message.
	GiftMessage string `json:"gift_message,omitempty"`

	// The inventory list id associated with this item.
	// Max Length: 256
	InventoryID string `json:"inventory_id,omitempty"`

	// The item identifier. Use this to identify an item when updating the item quantity or creating a custom price
	//  adjustment for an item.
	ItemID string `json:"item_id,omitempty"`

	// The text describing the item in more detail.
	ItemText string `json:"item_text,omitempty"`

	// The id of the option.
	// Required: true
	// Max Length: 256
	OptionID *string `json:"option_id"`

	// The array of option items. This array can be empty.
	OptionItems []*OptionItem `json:"option_items"`

	// The id of the option value.
	// Required: true
	// Max Length: 256
	OptionValueID *string `json:"option_value_id"`

	// The price of the line item before applying any adjustments. If the line item is based on net pricing
	//  then the net price is returned. If the line item is based on gross
	//  pricing then the gross price is returned.
	Price float64 `json:"price,omitempty"`

	// Array of price adjustments. Can be empty.
	PriceAdjustments []*PriceAdjustment `json:"price_adjustments"`

	// The price of the product line item after applying all product-level
	//  adjustments. For net pricing the adjusted net price is returned. For gross pricing, the adjusted
	//  gross price is returned.
	PriceAfterItemDiscount float64 `json:"price_after_item_discount,omitempty"`

	// The price of this product line item after considering all
	//  dependent price adjustments and prorating all order-level
	//  price adjustments. For net pricing the net price is returned. For gross
	//  pricing, the gross price is returned.
	PriceAfterOrderDiscount float64 `json:"price_after_order_discount,omitempty"`

	// product id
	// Max Length: 100
	ProductID string `json:"product_id,omitempty"`

	// product list item
	ProductListItem *ProductListItemReference `json:"product_list_item,omitempty"`

	// The name of the product.
	ProductName string `json:"product_name,omitempty"`

	// The quantity of the products represented by this item.
	// Maximum: 999
	// Minimum: 0
	Quantity *float64 `json:"quantity,omitempty"`

	// The id of the shipment which includes the product item.
	ShipmentID string `json:"shipment_id,omitempty"`

	// The reference to the related shipping item if it exists. This is the case if for example when a surcharge is
	//  defined for individual products using a particular a shipping method.
	ShippingItemID string `json:"shipping_item_id,omitempty"`

	// The tax of the product item before adjustments applying.
	Tax float64 `json:"tax,omitempty"`

	// The price used to calculate the tax for this product item.
	TaxBasis float64 `json:"tax_basis,omitempty"`

	// The tax class ID for the product item or null
	//  if no tax class ID is associated with the product item.
	TaxClassID string `json:"tax_class_id,omitempty"`

	// The tax rate, which is the decimal tax rate to be applied
	//  to the product represented by this item.
	TaxRate float64 `json:"tax_rate,omitempty"`
}

// Validate validates this option item
func (m *OptionItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundledProductItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionValueID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceAdjustments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductListItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OptionItem) validateBundledProductItems(formats strfmt.Registry) error {

	if swag.IsZero(m.BundledProductItems) { // not required
		return nil
	}

	for i := 0; i < len(m.BundledProductItems); i++ {
		if swag.IsZero(m.BundledProductItems[i]) { // not required
			continue
		}

		if m.BundledProductItems[i] != nil {
			if err := m.BundledProductItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundled_product_items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OptionItem) validateInventoryID(formats strfmt.Registry) error {

	if swag.IsZero(m.InventoryID) { // not required
		return nil
	}

	if err := validate.MaxLength("inventory_id", "body", string(m.InventoryID), 256); err != nil {
		return err
	}

	return nil
}

func (m *OptionItem) validateOptionID(formats strfmt.Registry) error {

	if err := validate.Required("option_id", "body", m.OptionID); err != nil {
		return err
	}

	if err := validate.MaxLength("option_id", "body", string(*m.OptionID), 256); err != nil {
		return err
	}

	return nil
}

func (m *OptionItem) validateOptionItems(formats strfmt.Registry) error {

	if swag.IsZero(m.OptionItems) { // not required
		return nil
	}

	for i := 0; i < len(m.OptionItems); i++ {
		if swag.IsZero(m.OptionItems[i]) { // not required
			continue
		}

		if m.OptionItems[i] != nil {
			if err := m.OptionItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("option_items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OptionItem) validateOptionValueID(formats strfmt.Registry) error {

	if err := validate.Required("option_value_id", "body", m.OptionValueID); err != nil {
		return err
	}

	if err := validate.MaxLength("option_value_id", "body", string(*m.OptionValueID), 256); err != nil {
		return err
	}

	return nil
}

func (m *OptionItem) validatePriceAdjustments(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceAdjustments) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceAdjustments); i++ {
		if swag.IsZero(m.PriceAdjustments[i]) { // not required
			continue
		}

		if m.PriceAdjustments[i] != nil {
			if err := m.PriceAdjustments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("price_adjustments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OptionItem) validateProductID(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductID) { // not required
		return nil
	}

	if err := validate.MaxLength("product_id", "body", string(m.ProductID), 100); err != nil {
		return err
	}

	return nil
}

func (m *OptionItem) validateProductListItem(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductListItem) { // not required
		return nil
	}

	if m.ProductListItem != nil {
		if err := m.ProductListItem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product_list_item")
			}
			return err
		}
	}

	return nil
}

func (m *OptionItem) validateQuantity(formats strfmt.Registry) error {

	if swag.IsZero(m.Quantity) { // not required
		return nil
	}

	if err := validate.Minimum("quantity", "body", float64(*m.Quantity), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("quantity", "body", float64(*m.Quantity), 999, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OptionItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OptionItem) UnmarshalBinary(b []byte) error {
	var res OptionItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
