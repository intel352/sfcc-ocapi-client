// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Promotion Document representing a promotion.
// swagger:model promotion
type Promotion struct {

	// The localized call-out message of the promotion.
	CalloutMsg string `json:"callout_msg,omitempty"`

	// The currency that a promotion can be applied to. A null value means that the promotion applies to all allowed
	//  currencies.
	Currency string `json:"currency,omitempty"`

	// The localized detailed description of the promotion.
	Details string `json:"details,omitempty"`

	// An optional product search link. Product promotions that are marked searchable provide a product search link with the promotion id as
	//  refinement.
	DiscountedProductsLink string `json:"discounted_products_link,omitempty"`

	// The end date of the promotion. This property follows the ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ . The time
	//  zone of the date time is always UTC.
	// Format: date-time
	EndDate strfmt.DateTime `json:"end_date,omitempty"`

	// The unique id of the promotion.
	// Required: true
	ID *string `json:"id"`

	// The URL to the promotion image.
	Image string `json:"image,omitempty"`

	// The localized name of the promotion.
	Name string `json:"name,omitempty"`

	// The start date of the promotion. This property follows the ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ. The
	//  time zone of the date time is always UTC.
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty"`
}

// Validate validates this promotion
func (m *Promotion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Promotion) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Promotion) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Promotion) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Promotion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Promotion) UnmarshalBinary(b []byte) error {
	var res Promotion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
