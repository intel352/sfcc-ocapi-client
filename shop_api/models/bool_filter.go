// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BoolFilter Document representing a boolean filter.
//
// swagger:model bool_filter
type BoolFilter struct {

	// A list of filters, which are logically combined by an operator.
	Filters []Filter `json:"filters"`

	// The logical operator the filters are combined with.
	// Required: true
	// Enum: [and or not]
	Operator *string `json:"operator"`
}

// Validate validates this bool filter
func (m *BoolFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var boolFilterTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["and","or","not"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		boolFilterTypeOperatorPropEnum = append(boolFilterTypeOperatorPropEnum, v)
	}
}

const (

	// BoolFilterOperatorAnd captures enum value "and"
	BoolFilterOperatorAnd string = "and"

	// BoolFilterOperatorOr captures enum value "or"
	BoolFilterOperatorOr string = "or"

	// BoolFilterOperatorNot captures enum value "not"
	BoolFilterOperatorNot string = "not"
)

// prop value enum
func (m *BoolFilter) validateOperatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, boolFilterTypeOperatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BoolFilter) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BoolFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BoolFilter) UnmarshalBinary(b []byte) error {
	var res BoolFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
