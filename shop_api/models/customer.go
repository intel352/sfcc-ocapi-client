// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer Document representing a customer.
// swagger:model customer
type Customer struct {

	// The customer's addresses.
	Addresses []*CustomerAddress `json:"addresses"`

	// The customer's authorization type (indicates if the customer is a guest
	//  or a registered customer).
	// Enum: [guest registered]
	AuthType string `json:"auth_type,omitempty"`

	// The customer's birthday.
	// Format: date
	Birthday strfmt.Date `json:"birthday,omitempty"`

	// c family status
	CFamilyStatus string `json:"c_familyStatus,omitempty"`

	// The customer's company name.
	// Max Length: 256
	CompanyName string `json:"company_name,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Read Only: true
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The customer's number (id). Both registered and guest customers have a
	//  customer id.
	// Read Only: true
	// Max Length: 28
	CustomerID string `json:"customer_id,omitempty"`

	// The customer's number (id). Only a registered customer has a customer
	//  number.
	// Required: true
	// Max Length: 100
	CustomerNo *string `json:"customer_no"`

	// The customer's email address.
	// Max Length: 256
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// A flag indicating whether this customer is is enabled and can log in.
	Enabled bool `json:"enabled,omitempty"`

	// The customer's fax number. The length is restricted to 32 characters.
	// Max Length: 32
	Fax string `json:"fax,omitempty"`

	// The customer's first name.
	// Max Length: 256
	FirstName string `json:"first_name,omitempty"`

	// The customer's gender.
	// Enum: [1 2]
	Gender int32 `json:"gender,omitempty"`

	// The customer's job title.
	// Max Length: 256
	JobTitle string `json:"job_title,omitempty"`

	// The time when the customer last logged in.
	// Read Only: true
	// Format: date-time
	LastLoginTime strfmt.DateTime `json:"last_login_time,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Read Only: true
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The customer's last name.
	// Required: true
	// Max Length: 256
	LastName *string `json:"last_name"`

	// The time when the customer last visited.
	// Read Only: true
	// Format: date-time
	LastVisitTime strfmt.DateTime `json:"last_visit_time,omitempty"`

	// The customer's login.
	// Max Length: 256
	Login string `json:"login,omitempty"`

	// The customer's note.
	Note string `json:"note,omitempty"`

	// The customer's payment instruments.
	PaymentInstruments []*CustomerPaymentInstrument `json:"payment_instruments"`

	// The customer's business phone number.
	// Max Length: 32
	PhoneBusiness string `json:"phone_business,omitempty"`

	// The customer's home phone number.
	// Max Length: 32
	PhoneHome string `json:"phone_home,omitempty"`

	// The customer's mobile phone number.
	// Max Length: 32
	PhoneMobile string `json:"phone_mobile,omitempty"`

	// The customer's preferred locale.
	// Read Only: true
	PreferredLocale string `json:"preferred_locale,omitempty"`

	// The time when the customer logged in previously.
	// Format: date-time
	PreviousLoginTime strfmt.DateTime `json:"previous_login_time,omitempty"`

	// The time when the customer last visited the store.
	// Format: date-time
	PreviousVisitTime strfmt.DateTime `json:"previous_visit_time,omitempty"`

	// The salutation to use for the customer.
	// Max Length: 256
	Salutation string `json:"salutation,omitempty"`

	// The customer's second name.
	// Max Length: 256
	SecondName string `json:"second_name,omitempty"`

	// The customer's suffix (for example, "Jr." or "Sr.").
	// Max Length: 256
	Suffix string `json:"suffix,omitempty"`

	// The customer's title (for example, "Mrs" or "Mr").
	// Max Length: 256
	Title string `json:"title,omitempty"`
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompanyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastVisitTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneBusiness(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneHome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousLoginTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousVisitTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalutation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.Addresses) { // not required
		return nil
	}

	for i := 0; i < len(m.Addresses); i++ {
		if swag.IsZero(m.Addresses[i]) { // not required
			continue
		}

		if m.Addresses[i] != nil {
			if err := m.Addresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var customerTypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["guest","registered"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeAuthTypePropEnum = append(customerTypeAuthTypePropEnum, v)
	}
}

const (

	// CustomerAuthTypeGuest captures enum value "guest"
	CustomerAuthTypeGuest string = "guest"

	// CustomerAuthTypeRegistered captures enum value "registered"
	CustomerAuthTypeRegistered string = "registered"
)

// prop value enum
func (m *Customer) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerTypeAuthTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateAuthType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("auth_type", "body", m.AuthType); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateBirthday(formats strfmt.Registry) error {

	if swag.IsZero(m.Birthday) { // not required
		return nil
	}

	if err := validate.FormatOf("birthday", "body", "date", m.Birthday.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateCompanyName(formats strfmt.Registry) error {

	if swag.IsZero(m.CompanyName) { // not required
		return nil
	}

	if err := validate.MaxLength("company_name", "body", string(m.CompanyName), 256); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateCustomerID(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("customer_id", "body", string(m.CustomerID), 28); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateCustomerNo(formats strfmt.Registry) error {

	if err := validate.Required("customer_no", "body", m.CustomerNo); err != nil {
		return err
	}

	if err := validate.MaxLength("customer_no", "body", string(*m.CustomerNo), 100); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("email", "body", string(m.Email), 256); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateFax(formats strfmt.Registry) error {

	if swag.IsZero(m.Fax) { // not required
		return nil
	}

	if err := validate.MaxLength("fax", "body", string(m.Fax), 32); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("first_name", "body", string(m.FirstName), 256); err != nil {
		return err
	}

	return nil
}

var customerTypeGenderPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeGenderPropEnum = append(customerTypeGenderPropEnum, v)
	}
}

// prop value enum
func (m *Customer) validateGenderEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, customerTypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateJobTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.JobTitle) { // not required
		return nil
	}

	if err := validate.MaxLength("job_title", "body", string(m.JobTitle), 256); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateLastLoginTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastLoginTime) { // not required
		return nil
	}

	if err := validate.FormatOf("last_login_time", "body", "date-time", m.LastLoginTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	if err := validate.MaxLength("last_name", "body", string(*m.LastName), 256); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateLastVisitTime(formats strfmt.Registry) error {

	if swag.IsZero(m.LastVisitTime) { // not required
		return nil
	}

	if err := validate.FormatOf("last_visit_time", "body", "date-time", m.LastVisitTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateLogin(formats strfmt.Registry) error {

	if swag.IsZero(m.Login) { // not required
		return nil
	}

	if err := validate.MaxLength("login", "body", string(m.Login), 256); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePaymentInstruments(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentInstruments) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentInstruments); i++ {
		if swag.IsZero(m.PaymentInstruments[i]) { // not required
			continue
		}

		if m.PaymentInstruments[i] != nil {
			if err := m.PaymentInstruments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payment_instruments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customer) validatePhoneBusiness(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneBusiness) { // not required
		return nil
	}

	if err := validate.MaxLength("phone_business", "body", string(m.PhoneBusiness), 32); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePhoneHome(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneHome) { // not required
		return nil
	}

	if err := validate.MaxLength("phone_home", "body", string(m.PhoneHome), 32); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePhoneMobile(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneMobile) { // not required
		return nil
	}

	if err := validate.MaxLength("phone_mobile", "body", string(m.PhoneMobile), 32); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePreviousLoginTime(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousLoginTime) { // not required
		return nil
	}

	if err := validate.FormatOf("previous_login_time", "body", "date-time", m.PreviousLoginTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validatePreviousVisitTime(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousVisitTime) { // not required
		return nil
	}

	if err := validate.FormatOf("previous_visit_time", "body", "date-time", m.PreviousVisitTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateSalutation(formats strfmt.Registry) error {

	if swag.IsZero(m.Salutation) { // not required
		return nil
	}

	if err := validate.MaxLength("salutation", "body", string(m.Salutation), 256); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateSecondName(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondName) { // not required
		return nil
	}

	if err := validate.MaxLength("second_name", "body", string(m.SecondName), 256); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.Suffix) { // not required
		return nil
	}

	if err := validate.MaxLength("suffix", "body", string(m.Suffix), 256); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 256); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
