// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordReset Document representing a password reset request.
// swagger:model password_reset
type PasswordReset struct {

	// The customer's login or the customer's email depending on the type value.
	Identification string `json:"identification,omitempty"`

	// The type of customer identification.
	// Enum: [email login]
	Type string `json:"type,omitempty"`
}

// Validate validates this password reset
func (m *PasswordReset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var passwordResetTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","login"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		passwordResetTypeTypePropEnum = append(passwordResetTypeTypePropEnum, v)
	}
}

const (

	// PasswordResetTypeEmail captures enum value "email"
	PasswordResetTypeEmail string = "email"

	// PasswordResetTypeLogin captures enum value "login"
	PasswordResetTypeLogin string = "login"
)

// prop value enum
func (m *PasswordReset) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, passwordResetTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PasswordReset) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PasswordReset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordReset) UnmarshalBinary(b []byte) error {
	var res PasswordReset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
