// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerInfo Document representing information used to identify a customer.
// swagger:model customer_info
type CustomerInfo struct {

	// c family status
	CFamilyStatus string `json:"c_familyStatus,omitempty"`

	// The customer's number (id).
	// Max Length: 100
	CustomerID string `json:"customer_id,omitempty"`

	// customer name
	CustomerName string `json:"customer_name,omitempty"`

	// The customer's number (id).
	// Required: true
	// Max Length: 100
	CustomerNo *string `json:"customer_no"`

	// The customer's email address.
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`
}

// Validate validates this customer info
func (m *CustomerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerNo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerInfo) validateCustomerID(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("customer_id", "body", string(m.CustomerID), 100); err != nil {
		return err
	}

	return nil
}

func (m *CustomerInfo) validateCustomerNo(formats strfmt.Registry) error {

	if err := validate.Required("customer_no", "body", m.CustomerNo); err != nil {
		return err
	}

	if err := validate.MaxLength("customer_no", "body", string(*m.CustomerNo), 100); err != nil {
		return err
	}

	return nil
}

func (m *CustomerInfo) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerInfo) UnmarshalBinary(b []byte) error {
	var res CustomerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
