// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Note Document representing a note to an object.
// swagger:model note
type Note struct {

	// The author of the note.
	CreatedBy string `json:"created_by,omitempty"`

	// The creation date of the note.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The ID of the note.
	ID string `json:"id,omitempty"`

	// The note's subject.
	// Max Length: 256
	Subject string `json:"subject,omitempty"`

	// The note's text.
	// Max Length: 4000
	Text string `json:"text,omitempty"`
}

// Validate validates this note
func (m *Note) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Note) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Note) validateSubject(formats strfmt.Registry) error {

	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if err := validate.MaxLength("subject", "body", string(m.Subject), 256); err != nil {
		return err
	}

	return nil
}

func (m *Note) validateText(formats strfmt.Registry) error {

	if swag.IsZero(m.Text) { // not required
		return nil
	}

	if err := validate.MaxLength("text", "body", string(m.Text), 4000); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Note) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Note) UnmarshalBinary(b []byte) error {
	var res Note
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
