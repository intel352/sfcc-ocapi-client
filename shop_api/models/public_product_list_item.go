// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicProductListItem Document representing a product list item.
// swagger:model public_product_list_item
type PublicProductListItem struct {

	// The id of this product list item.
	ID string `json:"id,omitempty"`

	// The priority of the item.
	Priority int32 `json:"priority,omitempty"`

	// The product item
	Product *Product `json:"product,omitempty"`

	// A link to the product.
	ProductDetailsLink *ProductSimpleLink `json:"product_details_link,omitempty"`

	// The type of the item.
	// Enum: [product gift_certificate]
	Type string `json:"type,omitempty"`
}

// Validate validates this public product list item
func (m *PublicProductListItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductDetailsLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicProductListItem) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *PublicProductListItem) validateProductDetailsLink(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductDetailsLink) { // not required
		return nil
	}

	if m.ProductDetailsLink != nil {
		if err := m.ProductDetailsLink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product_details_link")
			}
			return err
		}
	}

	return nil
}

var publicProductListItemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["product","gift_certificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicProductListItemTypeTypePropEnum = append(publicProductListItemTypeTypePropEnum, v)
	}
}

const (

	// PublicProductListItemTypeProduct captures enum value "product"
	PublicProductListItemTypeProduct string = "product"

	// PublicProductListItemTypeGiftCertificate captures enum value "gift_certificate"
	PublicProductListItemTypeGiftCertificate string = "gift_certificate"
)

// prop value enum
func (m *PublicProductListItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, publicProductListItemTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PublicProductListItem) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicProductListItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicProductListItem) UnmarshalBinary(b []byte) error {
	var res PublicProductListItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
