// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicProductList public product list
// swagger:model public_product_list
type PublicProductList struct {

	// The coRegistrant of this product list.
	CoRegistrant *ProductListRegistrant `json:"co_registrant,omitempty"`

	// Returns the value of attribute 'creationDate'.
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creation_date,omitempty"`

	// The description of this product list.
	Description string `json:"description,omitempty"`

	// The event of this product list.
	Event *ProductListEvent `json:"event,omitempty"`

	// The id of this product list.
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// The resource link to the items of this product list.
	ItemsLink *ProductSimpleLink `json:"items_link,omitempty"`

	// Returns the value of attribute 'lastModified'.
	// Format: date-time
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// The name of this product list.
	Name string `json:"name,omitempty"`

	// The product list items
	ProductListItems []*PublicProductListItem `json:"product_list_items"`

	// The abbreviated shipping address of this product list representing what anonymous user can see.
	ProductListShippingAddress *ProductListShippingAddress `json:"product_list_shipping_address,omitempty"`

	// Indicates whether the owner made this product list available for access by other customers.
	Public bool `json:"public,omitempty"`

	// The registrant of this product list.
	Registrant *ProductListRegistrant `json:"registrant,omitempty"`

	// The type of the product list.
	// Enum: [wish_list gift_registry shopping_list custom_1 custom_2 custom_3]
	Type string `json:"type,omitempty"`
}

// Validate validates this public product list
func (m *PublicProductList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoRegistrant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemsLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductListItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductListShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicProductList) validateCoRegistrant(formats strfmt.Registry) error {

	if swag.IsZero(m.CoRegistrant) { // not required
		return nil
	}

	if m.CoRegistrant != nil {
		if err := m.CoRegistrant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("co_registrant")
			}
			return err
		}
	}

	return nil
}

func (m *PublicProductList) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_date", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PublicProductList) validateEvent(formats strfmt.Registry) error {

	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *PublicProductList) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *PublicProductList) validateItemsLink(formats strfmt.Registry) error {

	if swag.IsZero(m.ItemsLink) { // not required
		return nil
	}

	if m.ItemsLink != nil {
		if err := m.ItemsLink.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("items_link")
			}
			return err
		}
	}

	return nil
}

func (m *PublicProductList) validateLastModified(formats strfmt.Registry) error {

	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "date-time", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PublicProductList) validateProductListItems(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductListItems) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductListItems); i++ {
		if swag.IsZero(m.ProductListItems[i]) { // not required
			continue
		}

		if m.ProductListItems[i] != nil {
			if err := m.ProductListItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("product_list_items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicProductList) validateProductListShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductListShippingAddress) { // not required
		return nil
	}

	if m.ProductListShippingAddress != nil {
		if err := m.ProductListShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product_list_shipping_address")
			}
			return err
		}
	}

	return nil
}

func (m *PublicProductList) validateRegistrant(formats strfmt.Registry) error {

	if swag.IsZero(m.Registrant) { // not required
		return nil
	}

	if m.Registrant != nil {
		if err := m.Registrant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrant")
			}
			return err
		}
	}

	return nil
}

var publicProductListTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["wish_list","gift_registry","shopping_list","custom_1","custom_2","custom_3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicProductListTypeTypePropEnum = append(publicProductListTypeTypePropEnum, v)
	}
}

const (

	// PublicProductListTypeWishList captures enum value "wish_list"
	PublicProductListTypeWishList string = "wish_list"

	// PublicProductListTypeGiftRegistry captures enum value "gift_registry"
	PublicProductListTypeGiftRegistry string = "gift_registry"

	// PublicProductListTypeShoppingList captures enum value "shopping_list"
	PublicProductListTypeShoppingList string = "shopping_list"

	// PublicProductListTypeCustom1 captures enum value "custom_1"
	PublicProductListTypeCustom1 string = "custom_1"

	// PublicProductListTypeCustom2 captures enum value "custom_2"
	PublicProductListTypeCustom2 string = "custom_2"

	// PublicProductListTypeCustom3 captures enum value "custom_3"
	PublicProductListTypeCustom3 string = "custom_3"
)

// prop value enum
func (m *PublicProductList) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, publicProductListTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PublicProductList) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicProductList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicProductList) UnmarshalBinary(b []byte) error {
	var res PublicProductList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
