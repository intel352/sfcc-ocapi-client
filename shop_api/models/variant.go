// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Variant Document representing a product variation.
// swagger:model variant
type Variant struct {

	// The URL addressing the product.
	// Required: true
	// Min Length: 1
	Link *string `json:"link"`

	// A flag indicating whether the variant is orderable.
	Orderable bool `json:"orderable,omitempty"`

	// The sales price of the variant.
	Price float64 `json:"price,omitempty"`

	// The id (SKU) of the variant.
	// Required: true
	// Max Length: 100
	// Min Length: 1
	ProductID *string `json:"product_id"`

	// The actual variation attribute id - value pairs.
	VariationValues map[string]string `json:"variation_values,omitempty"`
}

// Validate validates this variant
func (m *Variant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Variant) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	if err := validate.MinLength("link", "body", string(*m.Link), 1); err != nil {
		return err
	}

	return nil
}

func (m *Variant) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("product_id", "body", m.ProductID); err != nil {
		return err
	}

	if err := validate.MinLength("product_id", "body", string(*m.ProductID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("product_id", "body", string(*m.ProductID), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Variant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Variant) UnmarshalBinary(b []byte) error {
	var res Variant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
