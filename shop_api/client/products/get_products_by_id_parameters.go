// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProductsByIDParams creates a new GetProductsByIDParams object
// with the default values initialized.
func NewGetProductsByIDParams() *GetProductsByIDParams {
	var ()
	return &GetProductsByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProductsByIDParamsWithTimeout creates a new GetProductsByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProductsByIDParamsWithTimeout(timeout time.Duration) *GetProductsByIDParams {
	var ()
	return &GetProductsByIDParams{

		timeout: timeout,
	}
}

// NewGetProductsByIDParamsWithContext creates a new GetProductsByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProductsByIDParamsWithContext(ctx context.Context) *GetProductsByIDParams {
	var ()
	return &GetProductsByIDParams{

		Context: ctx,
	}
}

// NewGetProductsByIDParamsWithHTTPClient creates a new GetProductsByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProductsByIDParamsWithHTTPClient(client *http.Client) *GetProductsByIDParams {
	var ()
	return &GetProductsByIDParams{
		HTTPClient: client,
	}
}

/*GetProductsByIDParams contains all the parameters to send to the API endpoint
for the get products by ID operation typically these are written to a http.Request
*/
type GetProductsByIDParams struct {

	/*AllImages*/
	AllImages *bool
	/*Currency*/
	Currency *string
	/*Expand*/
	Expand []string
	/*ID
	  The id of the requested product.

	*/
	ID string
	/*InventoryIds*/
	InventoryIds []string
	/*Locale*/
	Locale *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get products by ID params
func (o *GetProductsByIDParams) WithTimeout(timeout time.Duration) *GetProductsByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get products by ID params
func (o *GetProductsByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get products by ID params
func (o *GetProductsByIDParams) WithContext(ctx context.Context) *GetProductsByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get products by ID params
func (o *GetProductsByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get products by ID params
func (o *GetProductsByIDParams) WithHTTPClient(client *http.Client) *GetProductsByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get products by ID params
func (o *GetProductsByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllImages adds the allImages to the get products by ID params
func (o *GetProductsByIDParams) WithAllImages(allImages *bool) *GetProductsByIDParams {
	o.SetAllImages(allImages)
	return o
}

// SetAllImages adds the allImages to the get products by ID params
func (o *GetProductsByIDParams) SetAllImages(allImages *bool) {
	o.AllImages = allImages
}

// WithCurrency adds the currency to the get products by ID params
func (o *GetProductsByIDParams) WithCurrency(currency *string) *GetProductsByIDParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the get products by ID params
func (o *GetProductsByIDParams) SetCurrency(currency *string) {
	o.Currency = currency
}

// WithExpand adds the expand to the get products by ID params
func (o *GetProductsByIDParams) WithExpand(expand []string) *GetProductsByIDParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get products by ID params
func (o *GetProductsByIDParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithID adds the id to the get products by ID params
func (o *GetProductsByIDParams) WithID(id string) *GetProductsByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get products by ID params
func (o *GetProductsByIDParams) SetID(id string) {
	o.ID = id
}

// WithInventoryIds adds the inventoryIds to the get products by ID params
func (o *GetProductsByIDParams) WithInventoryIds(inventoryIds []string) *GetProductsByIDParams {
	o.SetInventoryIds(inventoryIds)
	return o
}

// SetInventoryIds adds the inventoryIds to the get products by ID params
func (o *GetProductsByIDParams) SetInventoryIds(inventoryIds []string) {
	o.InventoryIds = inventoryIds
}

// WithLocale adds the locale to the get products by ID params
func (o *GetProductsByIDParams) WithLocale(locale *string) *GetProductsByIDParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the get products by ID params
func (o *GetProductsByIDParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WriteToRequest writes these params to a swagger request
func (o *GetProductsByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllImages != nil {

		// query param all_images
		var qrAllImages bool
		if o.AllImages != nil {
			qrAllImages = *o.AllImages
		}
		qAllImages := swag.FormatBool(qrAllImages)
		if qAllImages != "" {
			if err := r.SetQueryParam("all_images", qAllImages); err != nil {
				return err
			}
		}

	}

	if o.Currency != nil {

		// query param currency
		var qrCurrency string
		if o.Currency != nil {
			qrCurrency = *o.Currency
		}
		qCurrency := qrCurrency
		if qCurrency != "" {
			if err := r.SetQueryParam("currency", qCurrency); err != nil {
				return err
			}
		}

	}

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	valuesInventoryIds := o.InventoryIds

	joinedInventoryIds := swag.JoinByFormat(valuesInventoryIds, "")
	// query array param inventory_ids
	if err := r.SetQueryParam("inventory_ids", joinedInventoryIds...); err != nil {
		return err
	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string
		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {
			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
