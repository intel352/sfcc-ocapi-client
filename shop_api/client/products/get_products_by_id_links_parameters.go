// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProductsByIDLinksParams creates a new GetProductsByIDLinksParams object
// with the default values initialized.
func NewGetProductsByIDLinksParams() *GetProductsByIDLinksParams {
	var ()
	return &GetProductsByIDLinksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProductsByIDLinksParamsWithTimeout creates a new GetProductsByIDLinksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProductsByIDLinksParamsWithTimeout(timeout time.Duration) *GetProductsByIDLinksParams {
	var ()
	return &GetProductsByIDLinksParams{

		timeout: timeout,
	}
}

// NewGetProductsByIDLinksParamsWithContext creates a new GetProductsByIDLinksParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProductsByIDLinksParamsWithContext(ctx context.Context) *GetProductsByIDLinksParams {
	var ()
	return &GetProductsByIDLinksParams{

		Context: ctx,
	}
}

// NewGetProductsByIDLinksParamsWithHTTPClient creates a new GetProductsByIDLinksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProductsByIDLinksParamsWithHTTPClient(client *http.Client) *GetProductsByIDLinksParams {
	var ()
	return &GetProductsByIDLinksParams{
		HTTPClient: client,
	}
}

/*GetProductsByIDLinksParams contains all the parameters to send to the API endpoint
for the get products by ID links operation typically these are written to a http.Request
*/
type GetProductsByIDLinksParams struct {

	/*Direction*/
	Direction *string
	/*ID
	  The requested product id.

	*/
	ID string
	/*Locale*/
	Locale *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get products by ID links params
func (o *GetProductsByIDLinksParams) WithTimeout(timeout time.Duration) *GetProductsByIDLinksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get products by ID links params
func (o *GetProductsByIDLinksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get products by ID links params
func (o *GetProductsByIDLinksParams) WithContext(ctx context.Context) *GetProductsByIDLinksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get products by ID links params
func (o *GetProductsByIDLinksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get products by ID links params
func (o *GetProductsByIDLinksParams) WithHTTPClient(client *http.Client) *GetProductsByIDLinksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get products by ID links params
func (o *GetProductsByIDLinksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirection adds the direction to the get products by ID links params
func (o *GetProductsByIDLinksParams) WithDirection(direction *string) *GetProductsByIDLinksParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the get products by ID links params
func (o *GetProductsByIDLinksParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithID adds the id to the get products by ID links params
func (o *GetProductsByIDLinksParams) WithID(id string) *GetProductsByIDLinksParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get products by ID links params
func (o *GetProductsByIDLinksParams) SetID(id string) {
	o.ID = id
}

// WithLocale adds the locale to the get products by ID links params
func (o *GetProductsByIDLinksParams) WithLocale(locale *string) *GetProductsByIDLinksParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the get products by ID links params
func (o *GetProductsByIDLinksParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithType adds the typeVar to the get products by ID links params
func (o *GetProductsByIDLinksParams) WithType(typeVar *string) *GetProductsByIDLinksParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get products by ID links params
func (o *GetProductsByIDLinksParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetProductsByIDLinksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Direction != nil {

		// query param direction
		var qrDirection string
		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {
			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string
		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {
			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
