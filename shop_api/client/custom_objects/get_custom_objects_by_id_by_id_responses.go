// Code generated by go-swagger; DO NOT EDIT.

package custom_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// GetCustomObjectsByIDByIDReader is a Reader for the GetCustomObjectsByIDByID structure.
type GetCustomObjectsByIDByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCustomObjectsByIDByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewGetCustomObjectsByIDByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCustomObjectsByIDByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetCustomObjectsByIDByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCustomObjectsByIDByIDBadRequest creates a GetCustomObjectsByIDByIDBadRequest with default headers values
func NewGetCustomObjectsByIDByIDBadRequest() *GetCustomObjectsByIDByIDBadRequest {
	return &GetCustomObjectsByIDByIDBadRequest{}
}

/*GetCustomObjectsByIDByIDBadRequest handles this case with default header values.

If the object key must be an
              integer, but the path parameter has an invalid format
*/
type GetCustomObjectsByIDByIDBadRequest struct {
}

func (o *GetCustomObjectsByIDByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /custom_objects/{object_type}/{key}][%d] getCustomObjectsByIdByIdBadRequest ", 400)
}

func (o *GetCustomObjectsByIDByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCustomObjectsByIDByIDNotFound creates a GetCustomObjectsByIDByIDNotFound with default headers values
func NewGetCustomObjectsByIDByIDNotFound() *GetCustomObjectsByIDByIDNotFound {
	return &GetCustomObjectsByIDByIDNotFound{}
}

/*GetCustomObjectsByIDByIDNotFound handles this case with default header values.

For an unknown object type ID or If the custom object cannot be found
*/
type GetCustomObjectsByIDByIDNotFound struct {
}

func (o *GetCustomObjectsByIDByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /custom_objects/{object_type}/{key}][%d] getCustomObjectsByIdByIdNotFound ", 404)
}

func (o *GetCustomObjectsByIDByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCustomObjectsByIDByIDDefault creates a GetCustomObjectsByIDByIDDefault with default headers values
func NewGetCustomObjectsByIDByIDDefault(code int) *GetCustomObjectsByIDByIDDefault {
	return &GetCustomObjectsByIDByIDDefault{
		_statusCode: code,
	}
}

/*GetCustomObjectsByIDByIDDefault handles this case with default header values.

GetCustomObjectsByIDByIDDefault get custom objects by ID by ID default
*/
type GetCustomObjectsByIDByIDDefault struct {
	_statusCode int

	Payload *models.CustomObject
}

// Code gets the status code for the get custom objects by ID by ID default response
func (o *GetCustomObjectsByIDByIDDefault) Code() int {
	return o._statusCode
}

func (o *GetCustomObjectsByIDByIDDefault) Error() string {
	return fmt.Sprintf("[GET /custom_objects/{object_type}/{key}][%d] getCustomObjectsByIDByID default  %+v", o._statusCode, o.Payload)
}

func (o *GetCustomObjectsByIDByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
