// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PatchBasketsByIDShipmentsByIDReader is a Reader for the PatchBasketsByIDShipmentsByID structure.
type PatchBasketsByIDShipmentsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchBasketsByIDShipmentsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchBasketsByIDShipmentsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchBasketsByIDShipmentsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchBasketsByIDShipmentsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchBasketsByIDShipmentsByIDBadRequest creates a PatchBasketsByIDShipmentsByIDBadRequest with default headers values
func NewPatchBasketsByIDShipmentsByIDBadRequest() *PatchBasketsByIDShipmentsByIDBadRequest {
	return &PatchBasketsByIDShipmentsByIDBadRequest{}
}

/*PatchBasketsByIDShipmentsByIDBadRequest handles this case with default header values.

Indicates that the given shipment id was invalid. or Indicates that a shipment with the provided id already
             exists for the basket. or Indicates that a shipment with the provided shipment number
             already exists for the basket. or Indicates a missing shipping method. or Indicates an invalid shipping method. or Indicates that the customer assigned to the basket does not match the
             verified customer represented by the JWT token, not relevant
             when using OAuth.
*/
type PatchBasketsByIDShipmentsByIDBadRequest struct {
}

func (o *PatchBasketsByIDShipmentsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /baskets/{basket_id}/shipments/{shipment_id}][%d] patchBasketsByIdShipmentsByIdBadRequest ", 400)
}

func (o *PatchBasketsByIDShipmentsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchBasketsByIDShipmentsByIDNotFound creates a PatchBasketsByIDShipmentsByIDNotFound with default headers values
func NewPatchBasketsByIDShipmentsByIDNotFound() *PatchBasketsByIDShipmentsByIDNotFound {
	return &PatchBasketsByIDShipmentsByIDNotFound{}
}

/*PatchBasketsByIDShipmentsByIDNotFound handles this case with default header values.

Indicates that the basket with the given basket id is
             unknown.
*/
type PatchBasketsByIDShipmentsByIDNotFound struct {
}

func (o *PatchBasketsByIDShipmentsByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /baskets/{basket_id}/shipments/{shipment_id}][%d] patchBasketsByIdShipmentsByIdNotFound ", 404)
}

func (o *PatchBasketsByIDShipmentsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchBasketsByIDShipmentsByIDDefault creates a PatchBasketsByIDShipmentsByIDDefault with default headers values
func NewPatchBasketsByIDShipmentsByIDDefault(code int) *PatchBasketsByIDShipmentsByIDDefault {
	return &PatchBasketsByIDShipmentsByIDDefault{
		_statusCode: code,
	}
}

/*PatchBasketsByIDShipmentsByIDDefault handles this case with default header values.

PatchBasketsByIDShipmentsByIDDefault patch baskets by ID shipments by ID default
*/
type PatchBasketsByIDShipmentsByIDDefault struct {
	_statusCode int

	Payload *models.Basket
}

// Code gets the status code for the patch baskets by ID shipments by ID default response
func (o *PatchBasketsByIDShipmentsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchBasketsByIDShipmentsByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /baskets/{basket_id}/shipments/{shipment_id}][%d] patchBasketsByIDShipmentsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchBasketsByIDShipmentsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Basket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
