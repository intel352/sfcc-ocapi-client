// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PutBasketsByIDShipmentsByIDShippingMethodReader is a Reader for the PutBasketsByIDShipmentsByIDShippingMethod structure.
type PutBasketsByIDShipmentsByIDShippingMethodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutBasketsByIDShipmentsByIDShippingMethodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutBasketsByIDShipmentsByIDShippingMethodBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutBasketsByIDShipmentsByIDShippingMethodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutBasketsByIDShipmentsByIDShippingMethodDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutBasketsByIDShipmentsByIDShippingMethodBadRequest creates a PutBasketsByIDShipmentsByIDShippingMethodBadRequest with default headers values
func NewPutBasketsByIDShipmentsByIDShippingMethodBadRequest() *PutBasketsByIDShipmentsByIDShippingMethodBadRequest {
	return &PutBasketsByIDShipmentsByIDShippingMethodBadRequest{}
}

/*PutBasketsByIDShipmentsByIDShippingMethodBadRequest handles this case with default header values.

Indicates that the id of the shipping method is missing. or Indicates that a shipping method with an id was specified
             which is not a valid shipping method id. or Indicates that the customer assigned to the basket does not match the
             verified customer represented by the JWT token, not relevant
             when using OAuth.
*/
type PutBasketsByIDShipmentsByIDShippingMethodBadRequest struct {
}

func (o *PutBasketsByIDShipmentsByIDShippingMethodBadRequest) Error() string {
	return fmt.Sprintf("[PUT /baskets/{basket_id}/shipments/{shipment_id}/shipping_method][%d] putBasketsByIdShipmentsByIdShippingMethodBadRequest ", 400)
}

func (o *PutBasketsByIDShipmentsByIDShippingMethodBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBasketsByIDShipmentsByIDShippingMethodNotFound creates a PutBasketsByIDShipmentsByIDShippingMethodNotFound with default headers values
func NewPutBasketsByIDShipmentsByIDShippingMethodNotFound() *PutBasketsByIDShipmentsByIDShippingMethodNotFound {
	return &PutBasketsByIDShipmentsByIDShippingMethodNotFound{}
}

/*PutBasketsByIDShipmentsByIDShippingMethodNotFound handles this case with default header values.

Indicates that the basket with the given basket id is
             unknown.
*/
type PutBasketsByIDShipmentsByIDShippingMethodNotFound struct {
}

func (o *PutBasketsByIDShipmentsByIDShippingMethodNotFound) Error() string {
	return fmt.Sprintf("[PUT /baskets/{basket_id}/shipments/{shipment_id}/shipping_method][%d] putBasketsByIdShipmentsByIdShippingMethodNotFound ", 404)
}

func (o *PutBasketsByIDShipmentsByIDShippingMethodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBasketsByIDShipmentsByIDShippingMethodDefault creates a PutBasketsByIDShipmentsByIDShippingMethodDefault with default headers values
func NewPutBasketsByIDShipmentsByIDShippingMethodDefault(code int) *PutBasketsByIDShipmentsByIDShippingMethodDefault {
	return &PutBasketsByIDShipmentsByIDShippingMethodDefault{
		_statusCode: code,
	}
}

/*PutBasketsByIDShipmentsByIDShippingMethodDefault handles this case with default header values.

PutBasketsByIDShipmentsByIDShippingMethodDefault put baskets by ID shipments by ID shipping method default
*/
type PutBasketsByIDShipmentsByIDShippingMethodDefault struct {
	_statusCode int

	Payload *models.Basket
}

// Code gets the status code for the put baskets by ID shipments by ID shipping method default response
func (o *PutBasketsByIDShipmentsByIDShippingMethodDefault) Code() int {
	return o._statusCode
}

func (o *PutBasketsByIDShipmentsByIDShippingMethodDefault) Error() string {
	return fmt.Sprintf("[PUT /baskets/{basket_id}/shipments/{shipment_id}/shipping_method][%d] putBasketsByIDShipmentsByIDShippingMethod default  %+v", o._statusCode, o.Payload)
}

func (o *PutBasketsByIDShipmentsByIDShippingMethodDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Basket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
