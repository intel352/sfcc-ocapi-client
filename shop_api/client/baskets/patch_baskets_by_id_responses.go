// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PatchBasketsByIDReader is a Reader for the PatchBasketsByID structure.
type PatchBasketsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchBasketsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchBasketsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchBasketsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchBasketsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchBasketsByIDBadRequest creates a PatchBasketsByIDBadRequest with default headers values
func NewPatchBasketsByIDBadRequest() *PatchBasketsByIDBadRequest {
	return &PatchBasketsByIDBadRequest{}
}

/*PatchBasketsByIDBadRequest handles this case with default header values.

Indicates that the customer assigned to the basket does not
             match the verified customer represented by the JWT token, not
             relevant when using OAuth. or Indicates that the basket cannot be updated because the
             requested currency is not supported by the site. or Indicates that the given shipping item id is null or empty. or Indicates that a few shipping items with the same item id are
             provided. or Indicates that the provided code is not currently active.
*/
type PatchBasketsByIDBadRequest struct {
}

func (o *PatchBasketsByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /baskets/{basket_id}][%d] patchBasketsByIdBadRequest ", 400)
}

func (o *PatchBasketsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchBasketsByIDNotFound creates a PatchBasketsByIDNotFound with default headers values
func NewPatchBasketsByIDNotFound() *PatchBasketsByIDNotFound {
	return &PatchBasketsByIDNotFound{}
}

/*PatchBasketsByIDNotFound handles this case with default header values.

Indicates that the basket with the given basket id is unknown. or Indicates that the shipping item with the given item id is
             unknown for the basket or Indicates that the provided code was not found.
*/
type PatchBasketsByIDNotFound struct {
}

func (o *PatchBasketsByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /baskets/{basket_id}][%d] patchBasketsByIdNotFound ", 404)
}

func (o *PatchBasketsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchBasketsByIDDefault creates a PatchBasketsByIDDefault with default headers values
func NewPatchBasketsByIDDefault(code int) *PatchBasketsByIDDefault {
	return &PatchBasketsByIDDefault{
		_statusCode: code,
	}
}

/*PatchBasketsByIDDefault handles this case with default header values.

PatchBasketsByIDDefault patch baskets by ID default
*/
type PatchBasketsByIDDefault struct {
	_statusCode int

	Payload *models.Basket
}

// Code gets the status code for the patch baskets by ID default response
func (o *PatchBasketsByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchBasketsByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /baskets/{basket_id}][%d] patchBasketsByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchBasketsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Basket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
