// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutBasketsByIDStorefrontParams creates a new PutBasketsByIDStorefrontParams object
// with the default values initialized.
func NewPutBasketsByIDStorefrontParams() *PutBasketsByIDStorefrontParams {
	var ()
	return &PutBasketsByIDStorefrontParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutBasketsByIDStorefrontParamsWithTimeout creates a new PutBasketsByIDStorefrontParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutBasketsByIDStorefrontParamsWithTimeout(timeout time.Duration) *PutBasketsByIDStorefrontParams {
	var ()
	return &PutBasketsByIDStorefrontParams{

		timeout: timeout,
	}
}

// NewPutBasketsByIDStorefrontParamsWithContext creates a new PutBasketsByIDStorefrontParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutBasketsByIDStorefrontParamsWithContext(ctx context.Context) *PutBasketsByIDStorefrontParams {
	var ()
	return &PutBasketsByIDStorefrontParams{

		Context: ctx,
	}
}

// NewPutBasketsByIDStorefrontParamsWithHTTPClient creates a new PutBasketsByIDStorefrontParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutBasketsByIDStorefrontParamsWithHTTPClient(client *http.Client) *PutBasketsByIDStorefrontParams {
	var ()
	return &PutBasketsByIDStorefrontParams{
		HTTPClient: client,
	}
}

/*PutBasketsByIDStorefrontParams contains all the parameters to send to the API endpoint
for the put baskets by ID storefront operation typically these are written to a http.Request
*/
type PutBasketsByIDStorefrontParams struct {

	/*BasketID
	  the basket id

	*/
	BasketID string
	/*Exchange*/
	Exchange *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) WithTimeout(timeout time.Duration) *PutBasketsByIDStorefrontParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) WithContext(ctx context.Context) *PutBasketsByIDStorefrontParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) WithHTTPClient(client *http.Client) *PutBasketsByIDStorefrontParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBasketID adds the basketID to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) WithBasketID(basketID string) *PutBasketsByIDStorefrontParams {
	o.SetBasketID(basketID)
	return o
}

// SetBasketID adds the basketId to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) SetBasketID(basketID string) {
	o.BasketID = basketID
}

// WithExchange adds the exchange to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) WithExchange(exchange *bool) *PutBasketsByIDStorefrontParams {
	o.SetExchange(exchange)
	return o
}

// SetExchange adds the exchange to the put baskets by ID storefront params
func (o *PutBasketsByIDStorefrontParams) SetExchange(exchange *bool) {
	o.Exchange = exchange
}

// WriteToRequest writes these params to a swagger request
func (o *PutBasketsByIDStorefrontParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param basket_id
	if err := r.SetPathParam("basket_id", o.BasketID); err != nil {
		return err
	}

	if o.Exchange != nil {

		// query param exchange
		var qrExchange bool
		if o.Exchange != nil {
			qrExchange = *o.Exchange
		}
		qExchange := swag.FormatBool(qrExchange)
		if qExchange != "" {
			if err := r.SetQueryParam("exchange", qExchange); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
