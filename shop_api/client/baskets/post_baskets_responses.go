// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PostBasketsReader is a Reader for the PostBaskets structure.
type PostBasketsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostBasketsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPostBasketsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostBasketsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostBasketsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostBasketsBadRequest creates a PostBasketsBadRequest with default headers values
func NewPostBasketsBadRequest() *PostBasketsBadRequest {
	return &PostBasketsBadRequest{}
}

/*PostBasketsBadRequest handles this case with default header values.

Indicates that the provided payment method is invalid or not applicable. or Thrown if the customerId URL parameter does not match the verified customer
             represented by the JWT, not relevant when using OAuth. or Thrown if a new basket cannot be created because the maximum number
             of baskets per customer would be exceeded. or Indicates that the same shipment id appeared twice in the body. or Thrown if the coupon number is not provided. or Indicates that a fixed price adjustment was added at order level
             which is disallowed. or When attempting to add a price adjustment, indicates that a promotion id was
             used twice. or When attempting to add a price adjustment, indicates that a system promotion
             id was used as a manual promotion id. or Indicates that more than one hundred price adjustments would have been
             created.
*/
type PostBasketsBadRequest struct {
}

func (o *PostBasketsBadRequest) Error() string {
	return fmt.Sprintf("[POST /baskets][%d] postBasketsBadRequest ", 400)
}

func (o *PostBasketsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostBasketsNotFound creates a PostBasketsNotFound with default headers values
func NewPostBasketsNotFound() *PostBasketsNotFound {
	return &PostBasketsNotFound{}
}

/*PostBasketsNotFound handles this case with default header values.

Thrown if the shipment with the given shipment id is unknown.
*/
type PostBasketsNotFound struct {
}

func (o *PostBasketsNotFound) Error() string {
	return fmt.Sprintf("[POST /baskets][%d] postBasketsNotFound ", 404)
}

func (o *PostBasketsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostBasketsDefault creates a PostBasketsDefault with default headers values
func NewPostBasketsDefault(code int) *PostBasketsDefault {
	return &PostBasketsDefault{
		_statusCode: code,
	}
}

/*PostBasketsDefault handles this case with default header values.

PostBasketsDefault post baskets default
*/
type PostBasketsDefault struct {
	_statusCode int

	Payload *models.Basket
}

// Code gets the status code for the post baskets default response
func (o *PostBasketsDefault) Code() int {
	return o._statusCode
}

func (o *PostBasketsDefault) Error() string {
	return fmt.Sprintf("[POST /baskets][%d] postBaskets default  %+v", o._statusCode, o.Payload)
}

func (o *PostBasketsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Basket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
