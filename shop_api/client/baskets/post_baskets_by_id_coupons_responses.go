// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PostBasketsByIDCouponsReader is a Reader for the PostBasketsByIDCoupons structure.
type PostBasketsByIDCouponsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostBasketsByIDCouponsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPostBasketsByIDCouponsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostBasketsByIDCouponsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostBasketsByIDCouponsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostBasketsByIDCouponsBadRequest creates a PostBasketsByIDCouponsBadRequest with default headers values
func NewPostBasketsByIDCouponsBadRequest() *PostBasketsByIDCouponsBadRequest {
	return &PostBasketsByIDCouponsBadRequest{}
}

/*PostBasketsByIDCouponsBadRequest handles this case with default header values.

Indicates that the customer assigned to the basket does not
             match the verified customer represented by the JWT token, not
             relevant when using OAuth. or Thrown if the coupon number is not provided. or Thrown if the coupon code specified is invalid.
*/
type PostBasketsByIDCouponsBadRequest struct {
}

func (o *PostBasketsByIDCouponsBadRequest) Error() string {
	return fmt.Sprintf("[POST /baskets/{basket_id}/coupons][%d] postBasketsByIdCouponsBadRequest ", 400)
}

func (o *PostBasketsByIDCouponsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostBasketsByIDCouponsNotFound creates a PostBasketsByIDCouponsNotFound with default headers values
func NewPostBasketsByIDCouponsNotFound() *PostBasketsByIDCouponsNotFound {
	return &PostBasketsByIDCouponsNotFound{}
}

/*PostBasketsByIDCouponsNotFound handles this case with default header values.

Indicates that the basket with the given basket id is
             unknown.
*/
type PostBasketsByIDCouponsNotFound struct {
}

func (o *PostBasketsByIDCouponsNotFound) Error() string {
	return fmt.Sprintf("[POST /baskets/{basket_id}/coupons][%d] postBasketsByIdCouponsNotFound ", 404)
}

func (o *PostBasketsByIDCouponsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostBasketsByIDCouponsDefault creates a PostBasketsByIDCouponsDefault with default headers values
func NewPostBasketsByIDCouponsDefault(code int) *PostBasketsByIDCouponsDefault {
	return &PostBasketsByIDCouponsDefault{
		_statusCode: code,
	}
}

/*PostBasketsByIDCouponsDefault handles this case with default header values.

PostBasketsByIDCouponsDefault post baskets by ID coupons default
*/
type PostBasketsByIDCouponsDefault struct {
	_statusCode int

	Payload *models.Basket
}

// Code gets the status code for the post baskets by ID coupons default response
func (o *PostBasketsByIDCouponsDefault) Code() int {
	return o._statusCode
}

func (o *PostBasketsByIDCouponsDefault) Error() string {
	return fmt.Sprintf("[POST /baskets/{basket_id}/coupons][%d] postBasketsByIDCoupons default  %+v", o._statusCode, o.Payload)
}

func (o *PostBasketsByIDCouponsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Basket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
