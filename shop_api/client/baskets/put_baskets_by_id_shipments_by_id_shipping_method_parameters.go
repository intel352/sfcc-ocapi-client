// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// NewPutBasketsByIDShipmentsByIDShippingMethodParams creates a new PutBasketsByIDShipmentsByIDShippingMethodParams object
// with the default values initialized.
func NewPutBasketsByIDShipmentsByIDShippingMethodParams() *PutBasketsByIDShipmentsByIDShippingMethodParams {
	var ()
	return &PutBasketsByIDShipmentsByIDShippingMethodParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutBasketsByIDShipmentsByIDShippingMethodParamsWithTimeout creates a new PutBasketsByIDShipmentsByIDShippingMethodParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutBasketsByIDShipmentsByIDShippingMethodParamsWithTimeout(timeout time.Duration) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	var ()
	return &PutBasketsByIDShipmentsByIDShippingMethodParams{

		timeout: timeout,
	}
}

// NewPutBasketsByIDShipmentsByIDShippingMethodParamsWithContext creates a new PutBasketsByIDShipmentsByIDShippingMethodParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutBasketsByIDShipmentsByIDShippingMethodParamsWithContext(ctx context.Context) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	var ()
	return &PutBasketsByIDShipmentsByIDShippingMethodParams{

		Context: ctx,
	}
}

// NewPutBasketsByIDShipmentsByIDShippingMethodParamsWithHTTPClient creates a new PutBasketsByIDShipmentsByIDShippingMethodParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutBasketsByIDShipmentsByIDShippingMethodParamsWithHTTPClient(client *http.Client) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	var ()
	return &PutBasketsByIDShipmentsByIDShippingMethodParams{
		HTTPClient: client,
	}
}

/*PutBasketsByIDShipmentsByIDShippingMethodParams contains all the parameters to send to the API endpoint
for the put baskets by ID shipments by ID shipping method operation typically these are written to a http.Request
*/
type PutBasketsByIDShipmentsByIDShippingMethodParams struct {

	/*BasketID
	  the id of the basket to be modified

	*/
	BasketID string
	/*Body*/
	Body *models.ShippingMethod
	/*ShipmentID
	  the id of the shipment to be modified

	*/
	ShipmentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) WithTimeout(timeout time.Duration) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) WithContext(ctx context.Context) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) WithHTTPClient(client *http.Client) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBasketID adds the basketID to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) WithBasketID(basketID string) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	o.SetBasketID(basketID)
	return o
}

// SetBasketID adds the basketId to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) SetBasketID(basketID string) {
	o.BasketID = basketID
}

// WithBody adds the body to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) WithBody(body *models.ShippingMethod) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) SetBody(body *models.ShippingMethod) {
	o.Body = body
}

// WithShipmentID adds the shipmentID to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) WithShipmentID(shipmentID string) *PutBasketsByIDShipmentsByIDShippingMethodParams {
	o.SetShipmentID(shipmentID)
	return o
}

// SetShipmentID adds the shipmentId to the put baskets by ID shipments by ID shipping method params
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) SetShipmentID(shipmentID string) {
	o.ShipmentID = shipmentID
}

// WriteToRequest writes these params to a swagger request
func (o *PutBasketsByIDShipmentsByIDShippingMethodParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param basket_id
	if err := r.SetPathParam("basket_id", o.BasketID); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param shipment_id
	if err := r.SetPathParam("shipment_id", o.ShipmentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
