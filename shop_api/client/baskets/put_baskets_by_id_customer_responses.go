// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PutBasketsByIDCustomerReader is a Reader for the PutBasketsByIDCustomer structure.
type PutBasketsByIDCustomerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutBasketsByIDCustomerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutBasketsByIDCustomerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutBasketsByIDCustomerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutBasketsByIDCustomerDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutBasketsByIDCustomerBadRequest creates a PutBasketsByIDCustomerBadRequest with default headers values
func NewPutBasketsByIDCustomerBadRequest() *PutBasketsByIDCustomerBadRequest {
	return &PutBasketsByIDCustomerBadRequest{}
}

/*PutBasketsByIDCustomerBadRequest handles this case with default header values.

Indicates that the customer assigned to the basket does not match the verified
             customer represented by the JWT token, not relevant when using OAuth. or Indicates that the customer cannot be set to the basket because the
             max number of baskets per customer would be exceeded.
*/
type PutBasketsByIDCustomerBadRequest struct {
}

func (o *PutBasketsByIDCustomerBadRequest) Error() string {
	return fmt.Sprintf("[PUT /baskets/{basket_id}/customer][%d] putBasketsByIdCustomerBadRequest ", 400)
}

func (o *PutBasketsByIDCustomerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBasketsByIDCustomerNotFound creates a PutBasketsByIDCustomerNotFound with default headers values
func NewPutBasketsByIDCustomerNotFound() *PutBasketsByIDCustomerNotFound {
	return &PutBasketsByIDCustomerNotFound{}
}

/*PutBasketsByIDCustomerNotFound handles this case with default header values.

Indicates that the customer with the given customer number is unknown. or Indicates that the basket with the given basket id is unknown.
*/
type PutBasketsByIDCustomerNotFound struct {
}

func (o *PutBasketsByIDCustomerNotFound) Error() string {
	return fmt.Sprintf("[PUT /baskets/{basket_id}/customer][%d] putBasketsByIdCustomerNotFound ", 404)
}

func (o *PutBasketsByIDCustomerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBasketsByIDCustomerDefault creates a PutBasketsByIDCustomerDefault with default headers values
func NewPutBasketsByIDCustomerDefault(code int) *PutBasketsByIDCustomerDefault {
	return &PutBasketsByIDCustomerDefault{
		_statusCode: code,
	}
}

/*PutBasketsByIDCustomerDefault handles this case with default header values.

PutBasketsByIDCustomerDefault put baskets by ID customer default
*/
type PutBasketsByIDCustomerDefault struct {
	_statusCode int

	Payload *models.Basket
}

// Code gets the status code for the put baskets by ID customer default response
func (o *PutBasketsByIDCustomerDefault) Code() int {
	return o._statusCode
}

func (o *PutBasketsByIDCustomerDefault) Error() string {
	return fmt.Sprintf("[PUT /baskets/{basket_id}/customer][%d] putBasketsByIDCustomer default  %+v", o._statusCode, o.Payload)
}

func (o *PutBasketsByIDCustomerDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Basket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
