// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new baskets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for baskets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteBasketsByID Removes a basket.
*/
func (a *Client) DeleteBasketsByID(params *DeleteBasketsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteBasketsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBasketsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBasketsByID",
		Method:             "DELETE",
		PathPattern:        "/baskets/{basket_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBasketsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBasketsByIDNoContent), nil

}

/*
DeleteBasketsByIDCouponsByID Removes a coupon from the basket.
*/
func (a *Client) DeleteBasketsByIDCouponsByID(params *DeleteBasketsByIDCouponsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBasketsByIDCouponsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBasketsByIDCouponsByID",
		Method:             "DELETE",
		PathPattern:        "/baskets/{basket_id}/coupons/{coupon_item_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBasketsByIDCouponsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteBasketsByIDGiftCertificateItemsByID Deletes a gift certificate item from an existing basket.
*/
func (a *Client) DeleteBasketsByIDGiftCertificateItemsByID(params *DeleteBasketsByIDGiftCertificateItemsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBasketsByIDGiftCertificateItemsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBasketsByIDGiftCertificateItemsByID",
		Method:             "DELETE",
		PathPattern:        "/baskets/{basket_id}/gift_certificate_items/{gift_certificate_item_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBasketsByIDGiftCertificateItemsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteBasketsByIDItemsByID Removes a product item from the basket.
*/
func (a *Client) DeleteBasketsByIDItemsByID(params *DeleteBasketsByIDItemsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBasketsByIDItemsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBasketsByIDItemsByID",
		Method:             "DELETE",
		PathPattern:        "/baskets/{basket_id}/items/{item_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBasketsByIDItemsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteBasketsByIDNotesByID Removes a basket note.
*/
func (a *Client) DeleteBasketsByIDNotesByID(params *DeleteBasketsByIDNotesByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBasketsByIDNotesByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBasketsByIDNotesByID",
		Method:             "DELETE",
		PathPattern:        "/baskets/{basket_id}/notes/{note_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBasketsByIDNotesByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteBasketsByIDPaymentInstrumentsByID Removes a payment instrument of a basket.
*/
func (a *Client) DeleteBasketsByIDPaymentInstrumentsByID(params *DeleteBasketsByIDPaymentInstrumentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBasketsByIDPaymentInstrumentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBasketsByIDPaymentInstrumentsByID",
		Method:             "DELETE",
		PathPattern:        "/baskets/{basket_id}/payment_instruments/{payment_instrument_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBasketsByIDPaymentInstrumentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteBasketsByIDPriceAdjustmentsByID Removes a custom manual price adjustment from the basket.
*/
func (a *Client) DeleteBasketsByIDPriceAdjustmentsByID(params *DeleteBasketsByIDPriceAdjustmentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBasketsByIDPriceAdjustmentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBasketsByIDPriceAdjustmentsByID",
		Method:             "DELETE",
		PathPattern:        "/baskets/{basket_id}/price_adjustments/{price_adjustment_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBasketsByIDPriceAdjustmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteBasketsByIDShipmentsByID Removes a specified shipment and all associated product, gift certificate,
 shipping and price adjustment line items from a basket.
 It is not permissible to remove the default shipment.
*/
func (a *Client) DeleteBasketsByIDShipmentsByID(params *DeleteBasketsByIDShipmentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBasketsByIDShipmentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBasketsByIDShipmentsByID",
		Method:             "DELETE",
		PathPattern:        "/baskets/{basket_id}/shipments/{shipment_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBasketsByIDShipmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetBasketsByID Gets a basket.
*/
func (a *Client) GetBasketsByID(params *GetBasketsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBasketsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBasketsByID",
		Method:             "GET",
		PathPattern:        "/baskets/{basket_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBasketsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetBasketsByIDApproachingDiscounts Gets the approaching discounts of a basket
*/
func (a *Client) GetBasketsByIDApproachingDiscounts(params *GetBasketsByIDApproachingDiscountsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBasketsByIDApproachingDiscountsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBasketsByIDApproachingDiscounts",
		Method:             "GET",
		PathPattern:        "/baskets/{basket_id}/approaching_discounts",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBasketsByIDApproachingDiscountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetBasketsByIDNotes Retrieves notes for a basket.
*/
func (a *Client) GetBasketsByIDNotes(params *GetBasketsByIDNotesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBasketsByIDNotesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBasketsByIDNotes",
		Method:             "GET",
		PathPattern:        "/baskets/{basket_id}/notes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBasketsByIDNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetBasketsByIDPaymentMethods Gets applicable payment methods for an existing basket considering the open payment amount only.
*/
func (a *Client) GetBasketsByIDPaymentMethods(params *GetBasketsByIDPaymentMethodsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBasketsByIDPaymentMethodsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBasketsByIDPaymentMethods",
		Method:             "GET",
		PathPattern:        "/baskets/{basket_id}/payment_methods",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBasketsByIDPaymentMethodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetBasketsByIDShipmentsByIDShippingMethods Gets the applicable shipping methods for a certain shipment of a
 basket.
*/
func (a *Client) GetBasketsByIDShipmentsByIDShippingMethods(params *GetBasketsByIDShipmentsByIDShippingMethodsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBasketsByIDShipmentsByIDShippingMethodsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBasketsByIDShipmentsByIDShippingMethods",
		Method:             "GET",
		PathPattern:        "/baskets/{basket_id}/shipments/{shipment_id}/shipping_methods",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBasketsByIDShipmentsByIDShippingMethodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchBasketsByID Updates a basket. Only the currency of the basket, source code, and the custom
 properties of the basket and of the shipping items will be considered.
*/
func (a *Client) PatchBasketsByID(params *PatchBasketsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBasketsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBasketsByID",
		Method:             "PATCH",
		PathPattern:        "/baskets/{basket_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchBasketsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchBasketsByIDGiftCertificateItemsByID Updates a gift certificate item of an existing basket.
*/
func (a *Client) PatchBasketsByIDGiftCertificateItemsByID(params *PatchBasketsByIDGiftCertificateItemsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBasketsByIDGiftCertificateItemsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBasketsByIDGiftCertificateItemsByID",
		Method:             "PATCH",
		PathPattern:        "/baskets/{basket_id}/gift_certificate_items/{gift_certificate_item_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchBasketsByIDGiftCertificateItemsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchBasketsByIDItemsByID Updates an item in a basket.  The
 following values in the request body are considered by the server:

 product_id: a valid product id. The purpose of this
 value is to exchange a variation of a variation product.
 shipment_id: a valid shipment id. The purpose of
 this value is to move a product item to another shipment.
 quantity: a number between 0 and 999. The purpose of
 this value is to change quantity of the product item. If quantity is 0,
 the product item is removed.
 option_items/option_value_id: a valid option value
 id. The purpose of this value is to exchange an option value for an
 option item of an option product.
 This is only possible if the product item is an option product. To change
 option values a collection of option items to be changed need to be
 provided in property option_items. Those
 option_items need to contain option_id
 and option_value_id. The provided values must be valid
 for the option product that this product item represents. Otherwise
 InvalidProductOptionItemException or
 InvalidProductOptionValueItemException will be thrown.
 custom properties c_<CUSTOM_NAME>: a
 value corresponding to the type defined for custom attribute
 <CUSTOM_NAME> of ProductLineItem. The purpose of this value is to
 add or change the value of a custom attribute defined for
 ProductLineItem.

*/
func (a *Client) PatchBasketsByIDItemsByID(params *PatchBasketsByIDItemsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBasketsByIDItemsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBasketsByIDItemsByID",
		Method:             "PATCH",
		PathPattern:        "/baskets/{basket_id}/items/{item_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchBasketsByIDItemsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchBasketsByIDPaymentInstrumentsByID Updates a payment instrument of a basket.

 Payment instruments are usually authorized after order creation, for example in a custom hook. The default
 payment authorization process executes an authorization when a payment instrument is added to an order or
 updated. See POST /orders/{order_no}/payment_instruments and PATCH
 /orders/{order_no}/payment_instruments/{payment_instrument_id}

*/
func (a *Client) PatchBasketsByIDPaymentInstrumentsByID(params *PatchBasketsByIDPaymentInstrumentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBasketsByIDPaymentInstrumentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBasketsByIDPaymentInstrumentsByID",
		Method:             "PATCH",
		PathPattern:        "/baskets/{basket_id}/payment_instruments/{payment_instrument_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchBasketsByIDPaymentInstrumentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchBasketsByIDPriceAdjustmentsByID Updates a custom manual price adjustment on the basket. Only the following PATH values are considered for the
 update: discount, item_text, reason_code and custom properties; all other attributes are ignored. The discount
 type of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an
 adjustment of type PERCENTAGE, the 'percentage' attribute is mandatory. For adjustments of type AMOUNT and
 FIXED_PRICE, the 'amount' attribute is mandatory.
*/
func (a *Client) PatchBasketsByIDPriceAdjustmentsByID(params *PatchBasketsByIDPriceAdjustmentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBasketsByIDPriceAdjustmentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBasketsByIDPriceAdjustmentsByID",
		Method:             "PATCH",
		PathPattern:        "/baskets/{basket_id}/price_adjustments/{price_adjustment_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchBasketsByIDPriceAdjustmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PatchBasketsByIDShipmentsByID Updates a shipment for a basket.

 The shipment is initialized with values provided in the body
 document and can be updated with further data API calls. Considered from
 the body are the following properties if specified

 the id
 the shipping address
 the shipping method
 gift boolean flag
 gift message
 custom properties

*/
func (a *Client) PatchBasketsByIDShipmentsByID(params *PatchBasketsByIDShipmentsByIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBasketsByIDShipmentsByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBasketsByIDShipmentsByID",
		Method:             "PATCH",
		PathPattern:        "/baskets/{basket_id}/shipments/{shipment_id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchBasketsByIDShipmentsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBaskets Creates a new basket. The created basket is initialized with default values. Data provided in the body document
 will be populated into the created basket. It can be updated with further Shop API calls.
  Considered values from the request body are:

 customer information: PUT /baskets/{basket_id}/customer
 billing address: PUT /baskets/{basket_id}/billing_address
 shipments including shipping address and shipping method: POST /baskets/{basket_id}/shipments
 product items: POST /baskets/{basket_id}/items
 coupon items: POST /baskets/{basket_id}/coupons
 gift certificate items: POST /baskets/{basket_id}/gift_certificates
 payment method and card type: POST /baskets/{basket_id}/payment_instruments
 custom properties: PATCH /baskets/{basket_id}

 Related resource means with which resource you can specify the same data after the basket creation.
  Identify the basket using the basket_id property, which
 should be integrated into the path of an update request, for example a POST to
 /baskets/{basket_id}/items.  The resource supports JWT or
 OAuth tokens for authentication:

 A customer must provide a JWT, which specifies exactly one customer (it may be a guest or a registered
 customer). In this case the resource creates a basket for this customer.
 An agent must provide an OAuth token. The agent can use this resource to create a basket for a new created
 guest customer, and can later update the customer if desired.

  The number of baskets which can be created per customer is limited. When a
 basket is created it is said to be open. It remains open until either an order is created from it
 using a POST to resource /orders or it is deleted using a DELETE to resource
 /baskets/{basket_id}. The number of open baskets allowed depends on the authentication
 method used:

 When using JWT each customer can have just one open basket
 When using OAuth each customer can have up to 4 open baskets (this is a quota setting which can be
 updated by support)

*/
func (a *Client) PostBaskets(params *PostBasketsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBaskets",
		Method:             "POST",
		PathPattern:        "/baskets",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBasketsByIDCoupons Adds a coupon to an existing basket.
*/
func (a *Client) PostBasketsByIDCoupons(params *PostBasketsByIDCouponsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsByIDCouponsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBasketsByIDCoupons",
		Method:             "POST",
		PathPattern:        "/baskets/{basket_id}/coupons",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsByIDCouponsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBasketsByIDGiftCertificateItems Adds a gift certificate item to an existing basket.
*/
func (a *Client) PostBasketsByIDGiftCertificateItems(params *PostBasketsByIDGiftCertificateItemsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsByIDGiftCertificateItemsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBasketsByIDGiftCertificateItems",
		Method:             "POST",
		PathPattern:        "/baskets/{basket_id}/gift_certificate_items",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsByIDGiftCertificateItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBasketsByIDItems Adds new items to a basket.  The added items are associated with the
 specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
  Considered values from the request body, for each item are:

 product_id: a valid product id. This is the id of the product to be added to the basket. If the
 product is already in the basket, the API either increments the quantity of the existing product line item or
 creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
 product bundles containing variation masters, the API creates a new product line item regardless of the site
 preference.
 shipment_id: a valid shipment id (optional). This is the id of the shipment in which the product item
 is created.
 quantity: a number between 0.01 and 999. This is the quantity of the product to order.
 inventory_id: a valid inventory id (optional). This is the id of the inventory from which the item is
 allocated.
 bonus_discount_line_item_id: a valid bonus discount line item id (optional). This is the id of the
 bonus discount line item for which the added product is a selected bonus product.
 option_items/option_value_id: a valid option value id. This is an option value for an option item of
 an option product.  This is only possible if the product item is an option
 product. To set option values, you must specify a collection of option items in the option_items
 property. These option items must contain option_id and option_value_id. Also,
 the values you specify must be valid for the option product that this product item represents. Otherwise, the
 server throws an InvalidProductOptionItemException or an
 InvalidProductOptionValueItemException.
 custom properties in the form c_<CUSTOM_NAME>: the custom property must correspond to a custom
 attribute (<CUSTOM_NAME>) defined for ProductLineItem. The value of this property must be valid for the
 type of custom attribute defined for ProductLineItem.

*/
func (a *Client) PostBasketsByIDItems(params *PostBasketsByIDItemsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsByIDItemsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBasketsByIDItems",
		Method:             "POST",
		PathPattern:        "/baskets/{basket_id}/items",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsByIDItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBasketsByIDNotes Adds a note to an existing basket.
*/
func (a *Client) PostBasketsByIDNotes(params *PostBasketsByIDNotesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsByIDNotesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBasketsByIDNotes",
		Method:             "POST",
		PathPattern:        "/baskets/{basket_id}/notes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsByIDNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBasketsByIDPaymentInstruments Adds a payment instrument to a basket.

 Payment instruments are usually authorized after order creation, for example in a custom hook. The default
 payment authorization process executes an authorization when a payment instrument is added to an order or
 updated. See POST /orders/{order_no}/payment_instruments and PATCH
 /orders/{order_no}/payment_instruments/{payment_instrument_id}.
 NOTE: If CREDIT_CARD is selected as the payment_method_id, it is mandatory to provide the property card_type.

*/
func (a *Client) PostBasketsByIDPaymentInstruments(params *PostBasketsByIDPaymentInstrumentsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsByIDPaymentInstrumentsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBasketsByIDPaymentInstruments",
		Method:             "POST",
		PathPattern:        "/baskets/{basket_id}/payment_instruments",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsByIDPaymentInstrumentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBasketsByIDPriceAdjustments Adds a custom manual price adjustment to the basket.
*/
func (a *Client) PostBasketsByIDPriceAdjustments(params *PostBasketsByIDPriceAdjustmentsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsByIDPriceAdjustmentsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBasketsByIDPriceAdjustments",
		Method:             "POST",
		PathPattern:        "/baskets/{basket_id}/price_adjustments",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsByIDPriceAdjustmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBasketsByIDShipments Creates a new shipment for a basket.

 The created shipment is initialized with values provided in the body
 document and can be updated with further data API calls. Considered from
 the body are the following properties if specified:

 the id
 the shipping address
 the shipping method
 gift boolean flag
 gift message
 custom properties

*/
func (a *Client) PostBasketsByIDShipments(params *PostBasketsByIDShipmentsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsByIDShipmentsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBasketsByIDShipments",
		Method:             "POST",
		PathPattern:        "/baskets/{basket_id}/shipments",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsByIDShipmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostBasketsReference Creates a new basket based on a basket reference.

 The returned basket will be a copy of the basket in the reference. The basket in the reference must be a basket
 of an anonymous customer and the provided customer_id in the reference must match the anonymous customer in the
 basket. In case customer_id not matching a BasketNotFoundException will be returned as fault. All personal data
 like payment instruments and coupons will not be copied over to the new basket.

*/
func (a *Client) PostBasketsReference(params *PostBasketsReferenceParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBasketsReferenceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postBasketsReference",
		Method:             "POST",
		PathPattern:        "/baskets/reference",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBasketsReferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutBasketsByIDAgent Marks a basket as an agent basket.
*/
func (a *Client) PutBasketsByIDAgent(params *PutBasketsByIDAgentParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBasketsByIDAgentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putBasketsByIDAgent",
		Method:             "PUT",
		PathPattern:        "/baskets/{basket_id}/agent",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBasketsByIDAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutBasketsByIDBillingAddress Sets the billing address of a basket.
*/
func (a *Client) PutBasketsByIDBillingAddress(params *PutBasketsByIDBillingAddressParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBasketsByIDBillingAddressParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putBasketsByIDBillingAddress",
		Method:             "PUT",
		PathPattern:        "/baskets/{basket_id}/billing_address",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBasketsByIDBillingAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutBasketsByIDCustomer Sets customer information for an existing basket.
*/
func (a *Client) PutBasketsByIDCustomer(params *PutBasketsByIDCustomerParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBasketsByIDCustomerParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putBasketsByIDCustomer",
		Method:             "PUT",
		PathPattern:        "/baskets/{basket_id}/customer",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBasketsByIDCustomerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutBasketsByIDShipmentsByIDShippingAddress Sets a shipping address of a specific shipment of a basket.
*/
func (a *Client) PutBasketsByIDShipmentsByIDShippingAddress(params *PutBasketsByIDShipmentsByIDShippingAddressParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBasketsByIDShipmentsByIDShippingAddressParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putBasketsByIDShipmentsByIDShippingAddress",
		Method:             "PUT",
		PathPattern:        "/baskets/{basket_id}/shipments/{shipment_id}/shipping_address",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBasketsByIDShipmentsByIDShippingAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutBasketsByIDShipmentsByIDShippingMethod Sets a shipping method to a specific shipment of a basket.
*/
func (a *Client) PutBasketsByIDShipmentsByIDShippingMethod(params *PutBasketsByIDShipmentsByIDShippingMethodParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBasketsByIDShipmentsByIDShippingMethodParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putBasketsByIDShipmentsByIDShippingMethod",
		Method:             "PUT",
		PathPattern:        "/baskets/{basket_id}/shipments/{shipment_id}/shipping_method",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBasketsByIDShipmentsByIDShippingMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutBasketsByIDStorefront Marks a basket as storefront basket.
*/
func (a *Client) PutBasketsByIDStorefront(params *PutBasketsByIDStorefrontParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBasketsByIDStorefrontParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putBasketsByIDStorefront",
		Method:             "PUT",
		PathPattern:        "/baskets/{basket_id}/storefront",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBasketsByIDStorefrontReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
