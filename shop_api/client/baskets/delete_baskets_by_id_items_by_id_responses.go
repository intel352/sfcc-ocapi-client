// Code generated by go-swagger; DO NOT EDIT.

package baskets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// DeleteBasketsByIDItemsByIDReader is a Reader for the DeleteBasketsByIDItemsByID structure.
type DeleteBasketsByIDItemsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBasketsByIDItemsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewDeleteBasketsByIDItemsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteBasketsByIDItemsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteBasketsByIDItemsByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteBasketsByIDItemsByIDBadRequest creates a DeleteBasketsByIDItemsByIDBadRequest with default headers values
func NewDeleteBasketsByIDItemsByIDBadRequest() *DeleteBasketsByIDItemsByIDBadRequest {
	return &DeleteBasketsByIDItemsByIDBadRequest{}
}

/*DeleteBasketsByIDItemsByIDBadRequest handles this case with default header values.

Indicates that the customer assigned to the basket does not
             match the verified customer represented by the JWT token, not
             relevant when using OAuth.
*/
type DeleteBasketsByIDItemsByIDBadRequest struct {
}

func (o *DeleteBasketsByIDItemsByIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /baskets/{basket_id}/items/{item_id}][%d] deleteBasketsByIdItemsByIdBadRequest ", 400)
}

func (o *DeleteBasketsByIDItemsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteBasketsByIDItemsByIDNotFound creates a DeleteBasketsByIDItemsByIDNotFound with default headers values
func NewDeleteBasketsByIDItemsByIDNotFound() *DeleteBasketsByIDItemsByIDNotFound {
	return &DeleteBasketsByIDItemsByIDNotFound{}
}

/*DeleteBasketsByIDItemsByIDNotFound handles this case with default header values.

Indicates that the basket with the given basket id is
             unknown.
*/
type DeleteBasketsByIDItemsByIDNotFound struct {
}

func (o *DeleteBasketsByIDItemsByIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /baskets/{basket_id}/items/{item_id}][%d] deleteBasketsByIdItemsByIdNotFound ", 404)
}

func (o *DeleteBasketsByIDItemsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteBasketsByIDItemsByIDDefault creates a DeleteBasketsByIDItemsByIDDefault with default headers values
func NewDeleteBasketsByIDItemsByIDDefault(code int) *DeleteBasketsByIDItemsByIDDefault {
	return &DeleteBasketsByIDItemsByIDDefault{
		_statusCode: code,
	}
}

/*DeleteBasketsByIDItemsByIDDefault handles this case with default header values.

DeleteBasketsByIDItemsByIDDefault delete baskets by ID items by ID default
*/
type DeleteBasketsByIDItemsByIDDefault struct {
	_statusCode int

	Payload *models.Basket
}

// Code gets the status code for the delete baskets by ID items by ID default response
func (o *DeleteBasketsByIDItemsByIDDefault) Code() int {
	return o._statusCode
}

func (o *DeleteBasketsByIDItemsByIDDefault) Error() string {
	return fmt.Sprintf("[DELETE /baskets/{basket_id}/items/{item_id}][%d] deleteBasketsByIDItemsByID default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteBasketsByIDItemsByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Basket)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
