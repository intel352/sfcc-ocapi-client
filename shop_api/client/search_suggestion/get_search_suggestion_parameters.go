// Code generated by go-swagger; DO NOT EDIT.

package search_suggestion

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSearchSuggestionParams creates a new GetSearchSuggestionParams object
// with the default values initialized.
func NewGetSearchSuggestionParams() *GetSearchSuggestionParams {
	var ()
	return &GetSearchSuggestionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSearchSuggestionParamsWithTimeout creates a new GetSearchSuggestionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSearchSuggestionParamsWithTimeout(timeout time.Duration) *GetSearchSuggestionParams {
	var ()
	return &GetSearchSuggestionParams{

		timeout: timeout,
	}
}

// NewGetSearchSuggestionParamsWithContext creates a new GetSearchSuggestionParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSearchSuggestionParamsWithContext(ctx context.Context) *GetSearchSuggestionParams {
	var ()
	return &GetSearchSuggestionParams{

		Context: ctx,
	}
}

// NewGetSearchSuggestionParamsWithHTTPClient creates a new GetSearchSuggestionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSearchSuggestionParamsWithHTTPClient(client *http.Client) *GetSearchSuggestionParams {
	var ()
	return &GetSearchSuggestionParams{
		HTTPClient: client,
	}
}

/*GetSearchSuggestionParams contains all the parameters to send to the API endpoint
for the get search suggestion operation typically these are written to a http.Request
*/
type GetSearchSuggestionParams struct {

	/*Count
	  The maximum number of suggestions per request. Default value is 5. This affects all types of suggestions (category, product, content, brand, custom suggestions).

	*/
	Count *int32
	/*Currency
	  The currency mnemonic specified for price. This parameter is effective only for product suggestions.

	*/
	Currency *string
	/*Locale*/
	Locale *string
	/*Q
	  The query phrase to search for.

	*/
	Q string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get search suggestion params
func (o *GetSearchSuggestionParams) WithTimeout(timeout time.Duration) *GetSearchSuggestionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get search suggestion params
func (o *GetSearchSuggestionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get search suggestion params
func (o *GetSearchSuggestionParams) WithContext(ctx context.Context) *GetSearchSuggestionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get search suggestion params
func (o *GetSearchSuggestionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get search suggestion params
func (o *GetSearchSuggestionParams) WithHTTPClient(client *http.Client) *GetSearchSuggestionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get search suggestion params
func (o *GetSearchSuggestionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get search suggestion params
func (o *GetSearchSuggestionParams) WithCount(count *int32) *GetSearchSuggestionParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get search suggestion params
func (o *GetSearchSuggestionParams) SetCount(count *int32) {
	o.Count = count
}

// WithCurrency adds the currency to the get search suggestion params
func (o *GetSearchSuggestionParams) WithCurrency(currency *string) *GetSearchSuggestionParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the get search suggestion params
func (o *GetSearchSuggestionParams) SetCurrency(currency *string) {
	o.Currency = currency
}

// WithLocale adds the locale to the get search suggestion params
func (o *GetSearchSuggestionParams) WithLocale(locale *string) *GetSearchSuggestionParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the get search suggestion params
func (o *GetSearchSuggestionParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithQ adds the q to the get search suggestion params
func (o *GetSearchSuggestionParams) WithQ(q string) *GetSearchSuggestionParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get search suggestion params
func (o *GetSearchSuggestionParams) SetQ(q string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchSuggestionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Currency != nil {

		// query param currency
		var qrCurrency string
		if o.Currency != nil {
			qrCurrency = *o.Currency
		}
		qCurrency := qrCurrency
		if qCurrency != "" {
			if err := r.SetQueryParam("currency", qCurrency); err != nil {
				return err
			}
		}

	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string
		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {
			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}

	}

	// query param q
	qrQ := o.Q
	qQ := qrQ
	if qQ != "" {
		if err := r.SetQueryParam("q", qQ); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
