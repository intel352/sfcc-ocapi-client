// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PostOrdersReader is a Reader for the PostOrders structure.
type PostOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPostOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostOrdersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostOrdersBadRequest creates a PostOrdersBadRequest with default headers values
func NewPostOrdersBadRequest() *PostOrdersBadRequest {
	return &PostOrdersBadRequest{}
}

/*PostOrdersBadRequest handles this case with default header values.

Thrown if a failure during the creation of a gift certificate
             for a gift certificate item. or Indicates that the basket id in the request body is null or
             empty. or Indicates an invalid product item. or Indicates that an option with the specified option id is
             unknown. or Indicates that an option with the specified option value id
             is unknown. or Thrown if a product item is not available. or Indicates that the customer assigned to the basket does not
             match the verified customer represented by the JWT token, not
             relevant when using OAuth. or Indicates that the basket contains flashes.
*/
type PostOrdersBadRequest struct {
}

func (o *PostOrdersBadRequest) Error() string {
	return fmt.Sprintf("[POST /orders][%d] postOrdersBadRequest ", 400)
}

func (o *PostOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrdersNotFound creates a PostOrdersNotFound with default headers values
func NewPostOrdersNotFound() *PostOrdersNotFound {
	return &PostOrdersNotFound{}
}

/*PostOrdersNotFound handles this case with default header values.

Indicates that the basket with the given basket id is
             unknown.
*/
type PostOrdersNotFound struct {
}

func (o *PostOrdersNotFound) Error() string {
	return fmt.Sprintf("[POST /orders][%d] postOrdersNotFound ", 404)
}

func (o *PostOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOrdersDefault creates a PostOrdersDefault with default headers values
func NewPostOrdersDefault(code int) *PostOrdersDefault {
	return &PostOrdersDefault{
		_statusCode: code,
	}
}

/*PostOrdersDefault handles this case with default header values.

PostOrdersDefault post orders default
*/
type PostOrdersDefault struct {
	_statusCode int

	Payload *models.Order
}

// Code gets the status code for the post orders default response
func (o *PostOrdersDefault) Code() int {
	return o._statusCode
}

func (o *PostOrdersDefault) Error() string {
	return fmt.Sprintf("[POST /orders][%d] postOrders default  %+v", o._statusCode, o.Payload)
}

func (o *PostOrdersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Order)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
