// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PutOrdersByIDReader is a Reader for the PutOrdersByID structure.
type PutOrdersByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutOrdersByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPutOrdersByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutOrdersByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPutOrdersByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPutOrdersByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPutOrdersByIDBadRequest creates a PutOrdersByIDBadRequest with default headers values
func NewPutOrdersByIDBadRequest() *PutOrdersByIDBadRequest {
	return &PutOrdersByIDBadRequest{}
}

/*PutOrdersByIDBadRequest handles this case with default header values.

Thrown if a failure during the creation of a gift certificate for a gift
             certificate item. or Indicates that the basket id in the request body is null or empty. or Indicates an invalid product item. or Indicates that an option with the specified option id is unknown. or Indicates that an option with the specified option value id is
             unknown. or Thrown if a product item is not available. or Indicates that the customer assigned to the basket does not match the verified
             customer represented by the JWT token, not relevant when using OAuth. or Indicates that the basket contains flashes.
*/
type PutOrdersByIDBadRequest struct {
}

func (o *PutOrdersByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /orders/{order_no}][%d] putOrdersByIdBadRequest ", 400)
}

func (o *PutOrdersByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutOrdersByIDNotFound creates a PutOrdersByIDNotFound with default headers values
func NewPutOrdersByIDNotFound() *PutOrdersByIDNotFound {
	return &PutOrdersByIDNotFound{}
}

/*PutOrdersByIDNotFound handles this case with default header values.

Indicates that the basket with the given basket id is unknown.
*/
type PutOrdersByIDNotFound struct {
}

func (o *PutOrdersByIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /orders/{order_no}][%d] putOrdersByIdNotFound ", 404)
}

func (o *PutOrdersByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutOrdersByIDConflict creates a PutOrdersByIDConflict with default headers values
func NewPutOrdersByIDConflict() *PutOrdersByIDConflict {
	return &PutOrdersByIDConflict{}
}

/*PutOrdersByIDConflict handles this case with default header values.

409 CONFLICT Indicates that the requested order number is already allocated
             to an existing order.
*/
type PutOrdersByIDConflict struct {
}

func (o *PutOrdersByIDConflict) Error() string {
	return fmt.Sprintf("[PUT /orders/{order_no}][%d] putOrdersByIdConflict ", 409)
}

func (o *PutOrdersByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutOrdersByIDDefault creates a PutOrdersByIDDefault with default headers values
func NewPutOrdersByIDDefault(code int) *PutOrdersByIDDefault {
	return &PutOrdersByIDDefault{
		_statusCode: code,
	}
}

/*PutOrdersByIDDefault handles this case with default header values.

PutOrdersByIDDefault put orders by ID default
*/
type PutOrdersByIDDefault struct {
	_statusCode int

	Payload *models.Order
}

// Code gets the status code for the put orders by ID default response
func (o *PutOrdersByIDDefault) Code() int {
	return o._statusCode
}

func (o *PutOrdersByIDDefault) Error() string {
	return fmt.Sprintf("[PUT /orders/{order_no}][%d] putOrdersByID default  %+v", o._statusCode, o.Payload)
}

func (o *PutOrdersByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Order)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
