// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// NewPostOrdersByIDPaymentInstrumentsParams creates a new PostOrdersByIDPaymentInstrumentsParams object
// with the default values initialized.
func NewPostOrdersByIDPaymentInstrumentsParams() *PostOrdersByIDPaymentInstrumentsParams {
	var ()
	return &PostOrdersByIDPaymentInstrumentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostOrdersByIDPaymentInstrumentsParamsWithTimeout creates a new PostOrdersByIDPaymentInstrumentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostOrdersByIDPaymentInstrumentsParamsWithTimeout(timeout time.Duration) *PostOrdersByIDPaymentInstrumentsParams {
	var ()
	return &PostOrdersByIDPaymentInstrumentsParams{

		timeout: timeout,
	}
}

// NewPostOrdersByIDPaymentInstrumentsParamsWithContext creates a new PostOrdersByIDPaymentInstrumentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostOrdersByIDPaymentInstrumentsParamsWithContext(ctx context.Context) *PostOrdersByIDPaymentInstrumentsParams {
	var ()
	return &PostOrdersByIDPaymentInstrumentsParams{

		Context: ctx,
	}
}

// NewPostOrdersByIDPaymentInstrumentsParamsWithHTTPClient creates a new PostOrdersByIDPaymentInstrumentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostOrdersByIDPaymentInstrumentsParamsWithHTTPClient(client *http.Client) *PostOrdersByIDPaymentInstrumentsParams {
	var ()
	return &PostOrdersByIDPaymentInstrumentsParams{
		HTTPClient: client,
	}
}

/*PostOrdersByIDPaymentInstrumentsParams contains all the parameters to send to the API endpoint
for the post orders by ID payment instruments operation typically these are written to a http.Request
*/
type PostOrdersByIDPaymentInstrumentsParams struct {

	/*Body*/
	Body *models.OrderPaymentInstrumentRequest
	/*OrderNo
	  the order number

	*/
	OrderNo string
	/*SkipAuthorization*/
	SkipAuthorization *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) WithTimeout(timeout time.Duration) *PostOrdersByIDPaymentInstrumentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) WithContext(ctx context.Context) *PostOrdersByIDPaymentInstrumentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) WithHTTPClient(client *http.Client) *PostOrdersByIDPaymentInstrumentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) WithBody(body *models.OrderPaymentInstrumentRequest) *PostOrdersByIDPaymentInstrumentsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) SetBody(body *models.OrderPaymentInstrumentRequest) {
	o.Body = body
}

// WithOrderNo adds the orderNo to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) WithOrderNo(orderNo string) *PostOrdersByIDPaymentInstrumentsParams {
	o.SetOrderNo(orderNo)
	return o
}

// SetOrderNo adds the orderNo to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) SetOrderNo(orderNo string) {
	o.OrderNo = orderNo
}

// WithSkipAuthorization adds the skipAuthorization to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) WithSkipAuthorization(skipAuthorization *bool) *PostOrdersByIDPaymentInstrumentsParams {
	o.SetSkipAuthorization(skipAuthorization)
	return o
}

// SetSkipAuthorization adds the skipAuthorization to the post orders by ID payment instruments params
func (o *PostOrdersByIDPaymentInstrumentsParams) SetSkipAuthorization(skipAuthorization *bool) {
	o.SkipAuthorization = skipAuthorization
}

// WriteToRequest writes these params to a swagger request
func (o *PostOrdersByIDPaymentInstrumentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param order_no
	if err := r.SetPathParam("order_no", o.OrderNo); err != nil {
		return err
	}

	if o.SkipAuthorization != nil {

		// query param skip_authorization
		var qrSkipAuthorization bool
		if o.SkipAuthorization != nil {
			qrSkipAuthorization = *o.SkipAuthorization
		}
		qSkipAuthorization := swag.FormatBool(qrSkipAuthorization)
		if qSkipAuthorization != "" {
			if err := r.SetQueryParam("skip_authorization", qSkipAuthorization); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
