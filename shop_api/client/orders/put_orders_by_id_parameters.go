// Code generated by go-swagger; DO NOT EDIT.

package orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// NewPutOrdersByIDParams creates a new PutOrdersByIDParams object
// with the default values initialized.
func NewPutOrdersByIDParams() *PutOrdersByIDParams {
	var ()
	return &PutOrdersByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutOrdersByIDParamsWithTimeout creates a new PutOrdersByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutOrdersByIDParamsWithTimeout(timeout time.Duration) *PutOrdersByIDParams {
	var ()
	return &PutOrdersByIDParams{

		timeout: timeout,
	}
}

// NewPutOrdersByIDParamsWithContext creates a new PutOrdersByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutOrdersByIDParamsWithContext(ctx context.Context) *PutOrdersByIDParams {
	var ()
	return &PutOrdersByIDParams{

		Context: ctx,
	}
}

// NewPutOrdersByIDParamsWithHTTPClient creates a new PutOrdersByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutOrdersByIDParamsWithHTTPClient(client *http.Client) *PutOrdersByIDParams {
	var ()
	return &PutOrdersByIDParams{
		HTTPClient: client,
	}
}

/*PutOrdersByIDParams contains all the parameters to send to the API endpoint
for the put orders by ID operation typically these are written to a http.Request
*/
type PutOrdersByIDParams struct {

	/*Body*/
	Body *models.Basket
	/*OrderNo
	  The order number to assign to the new order.

	*/
	OrderNo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put orders by ID params
func (o *PutOrdersByIDParams) WithTimeout(timeout time.Duration) *PutOrdersByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put orders by ID params
func (o *PutOrdersByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put orders by ID params
func (o *PutOrdersByIDParams) WithContext(ctx context.Context) *PutOrdersByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put orders by ID params
func (o *PutOrdersByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put orders by ID params
func (o *PutOrdersByIDParams) WithHTTPClient(client *http.Client) *PutOrdersByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put orders by ID params
func (o *PutOrdersByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the put orders by ID params
func (o *PutOrdersByIDParams) WithBody(body *models.Basket) *PutOrdersByIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the put orders by ID params
func (o *PutOrdersByIDParams) SetBody(body *models.Basket) {
	o.Body = body
}

// WithOrderNo adds the orderNo to the put orders by ID params
func (o *PutOrdersByIDParams) WithOrderNo(orderNo string) *PutOrdersByIDParams {
	o.SetOrderNo(orderNo)
	return o
}

// SetOrderNo adds the orderNo to the put orders by ID params
func (o *PutOrdersByIDParams) SetOrderNo(orderNo string) {
	o.OrderNo = orderNo
}

// WriteToRequest writes these params to a swagger request
func (o *PutOrdersByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param order_no
	if err := r.SetPathParam("order_no", o.OrderNo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
