// Code generated by go-swagger; DO NOT EDIT.

package product_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new product search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for product search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetProductSearch Provides keyword and refinement search functionality for products. Only returns the product id, link and name in
 the product search hit. Other search hit properties can be added by using the expand parameter. The search result
 contains only products that are online and assigned to site catalog.
*/
func (a *Client) GetProductSearch(params *GetProductSearchParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductSearchParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductSearch",
		Method:             "GET",
		PathPattern:        "/product_search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductSearchAvailability Provides keyword and refinement search functionality for products. Only returns the product id, link, name and
 availability information in the product search hit.
*/
func (a *Client) GetProductSearchAvailability(params *GetProductSearchAvailabilityParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductSearchAvailabilityParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductSearchAvailability",
		Method:             "GET",
		PathPattern:        "/product_search/availability",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductSearchAvailabilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductSearchImages Provides keyword and refinement search functionality for products. Only returns the product id, link, name and
 image information in the product search hit.
*/
func (a *Client) GetProductSearchImages(params *GetProductSearchImagesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductSearchImagesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductSearchImages",
		Method:             "GET",
		PathPattern:        "/product_search/images",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductSearchImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductSearchPrices Provides keyword and refinement search functionality for products. Only returns the product id, link, name and
 price information in the product search hit.
*/
func (a *Client) GetProductSearchPrices(params *GetProductSearchPricesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductSearchPricesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductSearchPrices",
		Method:             "GET",
		PathPattern:        "/product_search/prices",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductSearchPricesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductSearchRepresentedProducts Provides keyword and refinement search functionality for products. Only returns the product id, link, name and
 represented product information in the product search hit.
*/
func (a *Client) GetProductSearchRepresentedProducts(params *GetProductSearchRepresentedProductsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductSearchRepresentedProductsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductSearchRepresentedProducts",
		Method:             "GET",
		PathPattern:        "/product_search/represented_products",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductSearchRepresentedProductsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProductSearchVariations Provides keyword and refinement search functionality for products. Only returns the product id, name and
 variation information in the product search hit.
*/
func (a *Client) GetProductSearchVariations(params *GetProductSearchVariationsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductSearchVariationsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProductSearchVariations",
		Method:             "GET",
		PathPattern:        "/product_search/variations",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductSearchVariationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
