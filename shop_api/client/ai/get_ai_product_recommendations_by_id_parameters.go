// Code generated by go-swagger; DO NOT EDIT.

package ai

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAiProductRecommendationsByIDParams creates a new GetAiProductRecommendationsByIDParams object
// with the default values initialized.
func NewGetAiProductRecommendationsByIDParams() *GetAiProductRecommendationsByIDParams {
	var ()
	return &GetAiProductRecommendationsByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAiProductRecommendationsByIDParamsWithTimeout creates a new GetAiProductRecommendationsByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAiProductRecommendationsByIDParamsWithTimeout(timeout time.Duration) *GetAiProductRecommendationsByIDParams {
	var ()
	return &GetAiProductRecommendationsByIDParams{

		timeout: timeout,
	}
}

// NewGetAiProductRecommendationsByIDParamsWithContext creates a new GetAiProductRecommendationsByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAiProductRecommendationsByIDParamsWithContext(ctx context.Context) *GetAiProductRecommendationsByIDParams {
	var ()
	return &GetAiProductRecommendationsByIDParams{

		Context: ctx,
	}
}

// NewGetAiProductRecommendationsByIDParamsWithHTTPClient creates a new GetAiProductRecommendationsByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAiProductRecommendationsByIDParamsWithHTTPClient(client *http.Client) *GetAiProductRecommendationsByIDParams {
	var ()
	return &GetAiProductRecommendationsByIDParams{
		HTTPClient: client,
	}
}

/*GetAiProductRecommendationsByIDParams contains all the parameters to send to the API endpoint
for the get ai product recommendations by ID operation typically these are written to a http.Request
*/
type GetAiProductRecommendationsByIDParams struct {

	/*AllImages*/
	AllImages *bool
	/*Categories*/
	Categories []string
	/*Currency*/
	Currency *string
	/*Expand*/
	Expand []string
	/*InventoryIds*/
	InventoryIds []string
	/*Products*/
	Products []string
	/*RecommenderName
	  The recommender name

	*/
	RecommenderName string
	/*UUID*/
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithTimeout(timeout time.Duration) *GetAiProductRecommendationsByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithContext(ctx context.Context) *GetAiProductRecommendationsByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithHTTPClient(client *http.Client) *GetAiProductRecommendationsByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllImages adds the allImages to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithAllImages(allImages *bool) *GetAiProductRecommendationsByIDParams {
	o.SetAllImages(allImages)
	return o
}

// SetAllImages adds the allImages to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetAllImages(allImages *bool) {
	o.AllImages = allImages
}

// WithCategories adds the categories to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithCategories(categories []string) *GetAiProductRecommendationsByIDParams {
	o.SetCategories(categories)
	return o
}

// SetCategories adds the categories to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetCategories(categories []string) {
	o.Categories = categories
}

// WithCurrency adds the currency to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithCurrency(currency *string) *GetAiProductRecommendationsByIDParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetCurrency(currency *string) {
	o.Currency = currency
}

// WithExpand adds the expand to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithExpand(expand []string) *GetAiProductRecommendationsByIDParams {
	o.SetExpand(expand)
	return o
}

// SetExpand adds the expand to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetExpand(expand []string) {
	o.Expand = expand
}

// WithInventoryIds adds the inventoryIds to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithInventoryIds(inventoryIds []string) *GetAiProductRecommendationsByIDParams {
	o.SetInventoryIds(inventoryIds)
	return o
}

// SetInventoryIds adds the inventoryIds to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetInventoryIds(inventoryIds []string) {
	o.InventoryIds = inventoryIds
}

// WithProducts adds the products to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithProducts(products []string) *GetAiProductRecommendationsByIDParams {
	o.SetProducts(products)
	return o
}

// SetProducts adds the products to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetProducts(products []string) {
	o.Products = products
}

// WithRecommenderName adds the recommenderName to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithRecommenderName(recommenderName string) *GetAiProductRecommendationsByIDParams {
	o.SetRecommenderName(recommenderName)
	return o
}

// SetRecommenderName adds the recommenderName to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetRecommenderName(recommenderName string) {
	o.RecommenderName = recommenderName
}

// WithUUID adds the uuid to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) WithUUID(uuid *string) *GetAiProductRecommendationsByIDParams {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get ai product recommendations by ID params
func (o *GetAiProductRecommendationsByIDParams) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetAiProductRecommendationsByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllImages != nil {

		// query param all_images
		var qrAllImages bool
		if o.AllImages != nil {
			qrAllImages = *o.AllImages
		}
		qAllImages := swag.FormatBool(qrAllImages)
		if qAllImages != "" {
			if err := r.SetQueryParam("all_images", qAllImages); err != nil {
				return err
			}
		}

	}

	valuesCategories := o.Categories

	joinedCategories := swag.JoinByFormat(valuesCategories, "")
	// query array param categories
	if err := r.SetQueryParam("categories", joinedCategories...); err != nil {
		return err
	}

	if o.Currency != nil {

		// query param currency
		var qrCurrency string
		if o.Currency != nil {
			qrCurrency = *o.Currency
		}
		qCurrency := qrCurrency
		if qCurrency != "" {
			if err := r.SetQueryParam("currency", qCurrency); err != nil {
				return err
			}
		}

	}

	valuesExpand := o.Expand

	joinedExpand := swag.JoinByFormat(valuesExpand, "")
	// query array param expand
	if err := r.SetQueryParam("expand", joinedExpand...); err != nil {
		return err
	}

	valuesInventoryIds := o.InventoryIds

	joinedInventoryIds := swag.JoinByFormat(valuesInventoryIds, "")
	// query array param inventory_ids
	if err := r.SetQueryParam("inventory_ids", joinedInventoryIds...); err != nil {
		return err
	}

	valuesProducts := o.Products

	joinedProducts := swag.JoinByFormat(valuesProducts, "")
	// query array param products
	if err := r.SetQueryParam("products", joinedProducts...); err != nil {
		return err
	}

	// path param recommender_name
	if err := r.SetPathParam("recommender_name", o.RecommenderName); err != nil {
		return err
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string
		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {
			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
