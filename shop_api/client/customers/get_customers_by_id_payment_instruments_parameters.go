// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCustomersByIDPaymentInstrumentsParams creates a new GetCustomersByIDPaymentInstrumentsParams object
// with the default values initialized.
func NewGetCustomersByIDPaymentInstrumentsParams() *GetCustomersByIDPaymentInstrumentsParams {
	var ()
	return &GetCustomersByIDPaymentInstrumentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCustomersByIDPaymentInstrumentsParamsWithTimeout creates a new GetCustomersByIDPaymentInstrumentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCustomersByIDPaymentInstrumentsParamsWithTimeout(timeout time.Duration) *GetCustomersByIDPaymentInstrumentsParams {
	var ()
	return &GetCustomersByIDPaymentInstrumentsParams{

		timeout: timeout,
	}
}

// NewGetCustomersByIDPaymentInstrumentsParamsWithContext creates a new GetCustomersByIDPaymentInstrumentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCustomersByIDPaymentInstrumentsParamsWithContext(ctx context.Context) *GetCustomersByIDPaymentInstrumentsParams {
	var ()
	return &GetCustomersByIDPaymentInstrumentsParams{

		Context: ctx,
	}
}

// NewGetCustomersByIDPaymentInstrumentsParamsWithHTTPClient creates a new GetCustomersByIDPaymentInstrumentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCustomersByIDPaymentInstrumentsParamsWithHTTPClient(client *http.Client) *GetCustomersByIDPaymentInstrumentsParams {
	var ()
	return &GetCustomersByIDPaymentInstrumentsParams{
		HTTPClient: client,
	}
}

/*GetCustomersByIDPaymentInstrumentsParams contains all the parameters to send to the API endpoint
for the get customers by ID payment instruments operation typically these are written to a http.Request
*/
type GetCustomersByIDPaymentInstrumentsParams struct {

	/*CustomerID
	  the id of the customer to retrieve the payment instruments for

	*/
	CustomerID string
	/*PaymentMethodID*/
	PaymentMethodID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) WithTimeout(timeout time.Duration) *GetCustomersByIDPaymentInstrumentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) WithContext(ctx context.Context) *GetCustomersByIDPaymentInstrumentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) WithHTTPClient(client *http.Client) *GetCustomersByIDPaymentInstrumentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerID adds the customerID to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) WithCustomerID(customerID string) *GetCustomersByIDPaymentInstrumentsParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) SetCustomerID(customerID string) {
	o.CustomerID = customerID
}

// WithPaymentMethodID adds the paymentMethodID to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) WithPaymentMethodID(paymentMethodID *string) *GetCustomersByIDPaymentInstrumentsParams {
	o.SetPaymentMethodID(paymentMethodID)
	return o
}

// SetPaymentMethodID adds the paymentMethodId to the get customers by ID payment instruments params
func (o *GetCustomersByIDPaymentInstrumentsParams) SetPaymentMethodID(paymentMethodID *string) {
	o.PaymentMethodID = paymentMethodID
}

// WriteToRequest writes these params to a swagger request
func (o *GetCustomersByIDPaymentInstrumentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param customer_id
	if err := r.SetPathParam("customer_id", o.CustomerID); err != nil {
		return err
	}

	if o.PaymentMethodID != nil {

		// query param payment_method_id
		var qrPaymentMethodID string
		if o.PaymentMethodID != nil {
			qrPaymentMethodID = *o.PaymentMethodID
		}
		qPaymentMethodID := qrPaymentMethodID
		if qPaymentMethodID != "" {
			if err := r.SetQueryParam("payment_method_id", qPaymentMethodID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
