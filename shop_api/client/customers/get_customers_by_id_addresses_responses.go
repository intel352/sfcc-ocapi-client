// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// GetCustomersByIDAddressesReader is a Reader for the GetCustomersByIDAddresses structure.
type GetCustomersByIDAddressesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCustomersByIDAddressesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewGetCustomersByIDAddressesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCustomersByIDAddressesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetCustomersByIDAddressesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCustomersByIDAddressesBadRequest creates a GetCustomersByIDAddressesBadRequest with default headers values
func NewGetCustomersByIDAddressesBadRequest() *GetCustomersByIDAddressesBadRequest {
	return &GetCustomersByIDAddressesBadRequest{}
}

/*GetCustomersByIDAddressesBadRequest handles this case with default header values.

If customerId URL parameter does not match the verified customer represented by
             the JWT token, not relevant when using OAuth.
*/
type GetCustomersByIDAddressesBadRequest struct {
}

func (o *GetCustomersByIDAddressesBadRequest) Error() string {
	return fmt.Sprintf("[GET /customers/{customer_id}/addresses][%d] getCustomersByIdAddressesBadRequest ", 400)
}

func (o *GetCustomersByIDAddressesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCustomersByIDAddressesNotFound creates a GetCustomersByIDAddressesNotFound with default headers values
func NewGetCustomersByIDAddressesNotFound() *GetCustomersByIDAddressesNotFound {
	return &GetCustomersByIDAddressesNotFound{}
}

/*GetCustomersByIDAddressesNotFound handles this case with default header values.

Indicates that the customer with the given customer id is
             unknown for the site.
*/
type GetCustomersByIDAddressesNotFound struct {
}

func (o *GetCustomersByIDAddressesNotFound) Error() string {
	return fmt.Sprintf("[GET /customers/{customer_id}/addresses][%d] getCustomersByIdAddressesNotFound ", 404)
}

func (o *GetCustomersByIDAddressesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCustomersByIDAddressesDefault creates a GetCustomersByIDAddressesDefault with default headers values
func NewGetCustomersByIDAddressesDefault(code int) *GetCustomersByIDAddressesDefault {
	return &GetCustomersByIDAddressesDefault{
		_statusCode: code,
	}
}

/*GetCustomersByIDAddressesDefault handles this case with default header values.

GetCustomersByIDAddressesDefault get customers by ID addresses default
*/
type GetCustomersByIDAddressesDefault struct {
	_statusCode int

	Payload *models.CustomerAddressResult
}

// Code gets the status code for the get customers by ID addresses default response
func (o *GetCustomersByIDAddressesDefault) Code() int {
	return o._statusCode
}

func (o *GetCustomersByIDAddressesDefault) Error() string {
	return fmt.Sprintf("[GET /customers/{customer_id}/addresses][%d] getCustomersByIDAddresses default  %+v", o._statusCode, o.Payload)
}

func (o *GetCustomersByIDAddressesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomerAddressResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
