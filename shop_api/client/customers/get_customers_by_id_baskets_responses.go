// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// GetCustomersByIDBasketsReader is a Reader for the GetCustomersByIDBaskets structure.
type GetCustomersByIDBasketsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCustomersByIDBasketsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewGetCustomersByIDBasketsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetCustomersByIDBasketsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetCustomersByIDBasketsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCustomersByIDBasketsBadRequest creates a GetCustomersByIDBasketsBadRequest with default headers values
func NewGetCustomersByIDBasketsBadRequest() *GetCustomersByIDBasketsBadRequest {
	return &GetCustomersByIDBasketsBadRequest{}
}

/*GetCustomersByIDBasketsBadRequest handles this case with default header values.

if customerId URL parameter does not match the verified
             customer represented by the JWT token, not relevant when
             using OAuth.
*/
type GetCustomersByIDBasketsBadRequest struct {
}

func (o *GetCustomersByIDBasketsBadRequest) Error() string {
	return fmt.Sprintf("[GET /customers/{customer_id}/baskets][%d] getCustomersByIdBasketsBadRequest ", 400)
}

func (o *GetCustomersByIDBasketsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCustomersByIDBasketsNotFound creates a GetCustomersByIDBasketsNotFound with default headers values
func NewGetCustomersByIDBasketsNotFound() *GetCustomersByIDBasketsNotFound {
	return &GetCustomersByIDBasketsNotFound{}
}

/*GetCustomersByIDBasketsNotFound handles this case with default header values.

Indicates that the customer with the given customer id is
             unknown for the site.
*/
type GetCustomersByIDBasketsNotFound struct {
}

func (o *GetCustomersByIDBasketsNotFound) Error() string {
	return fmt.Sprintf("[GET /customers/{customer_id}/baskets][%d] getCustomersByIdBasketsNotFound ", 404)
}

func (o *GetCustomersByIDBasketsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCustomersByIDBasketsDefault creates a GetCustomersByIDBasketsDefault with default headers values
func NewGetCustomersByIDBasketsDefault(code int) *GetCustomersByIDBasketsDefault {
	return &GetCustomersByIDBasketsDefault{
		_statusCode: code,
	}
}

/*GetCustomersByIDBasketsDefault handles this case with default header values.

GetCustomersByIDBasketsDefault get customers by ID baskets default
*/
type GetCustomersByIDBasketsDefault struct {
	_statusCode int

	Payload *models.BasketsResult
}

// Code gets the status code for the get customers by ID baskets default response
func (o *GetCustomersByIDBasketsDefault) Code() int {
	return o._statusCode
}

func (o *GetCustomersByIDBasketsDefault) Error() string {
	return fmt.Sprintf("[GET /customers/{customer_id}/baskets][%d] getCustomersByIDBaskets default  %+v", o._statusCode, o.Payload)
}

func (o *GetCustomersByIDBasketsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BasketsResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
