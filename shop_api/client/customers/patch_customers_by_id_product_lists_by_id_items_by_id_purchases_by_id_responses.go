// Code generated by go-swagger; DO NOT EDIT.

package customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/intel352/sfcc-ocapi-client/shop_api/models"
)

// PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDReader is a Reader for the PatchCustomersByIDProductListsByIDItemsByIDPurchasesByID structure.
type PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 400:
		result := NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest creates a PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest with default headers values
func NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest() *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest {
	return &PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest{}
}

/*PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest handles this case with default header values.

Indicates that the customerId URL parameter does not match the verified customer
             represented by the JWT token, not relevant when using OAuth.
*/
type PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest struct {
}

func (o *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /customers/{customer_id}/product_lists/{list_id}/items/{item_id}/purchases/{purchase_id}][%d] patchCustomersByIdProductListsByIdItemsByIdPurchasesByIdBadRequest ", 400)
}

func (o *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound creates a PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound with default headers values
func NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound() *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound {
	return &PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound{}
}

/*PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound handles this case with default header values.

Indicates that the customer with the given customer id is unknown for the site. or Indicates that the product list with the given list id is unknown for the
             site and the customer. or Indicates that the product list item with the given item id is unknown
             for the site, the customer and the product list. or Indicates that the product list item purchase with the given purchase
 			   id is unknown for the site, customer, product list, and item.
*/
type PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound struct {
}

func (o *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /customers/{customer_id}/product_lists/{list_id}/items/{item_id}/purchases/{purchase_id}][%d] patchCustomersByIdProductListsByIdItemsByIdPurchasesByIdNotFound ", 404)
}

func (o *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault creates a PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault with default headers values
func NewPatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault(code int) *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault {
	return &PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault{
		_statusCode: code,
	}
}

/*PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault handles this case with default header values.

PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault patch customers by ID product lists by ID items by ID purchases by ID default
*/
type PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault struct {
	_statusCode int

	Payload *models.CustomerProductListItemPurchase
}

// Code gets the status code for the patch customers by ID product lists by ID items by ID purchases by ID default response
func (o *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault) Code() int {
	return o._statusCode
}

func (o *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /customers/{customer_id}/product_lists/{list_id}/items/{item_id}/purchases/{purchase_id}][%d] patchCustomersByIDProductListsByIDItemsByIDPurchasesByID default  %+v", o._statusCode, o.Payload)
}

func (o *PatchCustomersByIDProductListsByIDItemsByIDPurchasesByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CustomerProductListItemPurchase)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
