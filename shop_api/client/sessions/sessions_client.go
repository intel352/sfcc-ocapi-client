// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sessions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sessions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostSessions Exchanges a JWT token into a new session. If the given token is valid, creates a new session, which is associated
 with the authenticated or anonymous customer. All Set-Cookie headers for handling the session are applied
 on the response.

 Once you created a session from a JWT token you can use this session and stateless OCAPI calls using the JWT in
 parallel. There is no additional need to call the bridging resources again.

 When a session ID is sent in with the request, the specified session is ignored. Only the incoming JWT token is
 used to create a new session.
*/
func (a *Client) PostSessions(params *PostSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSessionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postSessions",
		Method:             "POST",
		PathPattern:        "/sessions",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml", "text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSessionsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
