// Code generated by go-swagger; DO NOT EDIT.

package stores

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStoresParams creates a new GetStoresParams object
// with the default values initialized.
func NewGetStoresParams() *GetStoresParams {
	var ()
	return &GetStoresParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStoresParamsWithTimeout creates a new GetStoresParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStoresParamsWithTimeout(timeout time.Duration) *GetStoresParams {
	var ()
	return &GetStoresParams{

		timeout: timeout,
	}
}

// NewGetStoresParamsWithContext creates a new GetStoresParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetStoresParamsWithContext(ctx context.Context) *GetStoresParams {
	var ()
	return &GetStoresParams{

		Context: ctx,
	}
}

// NewGetStoresParamsWithHTTPClient creates a new GetStoresParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetStoresParamsWithHTTPClient(client *http.Client) *GetStoresParams {
	var ()
	return &GetStoresParams{
		HTTPClient: client,
	}
}

/*GetStoresParams contains all the parameters to send to the API endpoint
for the get stores operation typically these are written to a http.Request
*/
type GetStoresParams struct {

	/*Count
	  The maximum number of instances per request. Default value is 25.

	*/
	Count *int32
	/*CountryCode
	  The two letter ISO country code e.g. \"US\".

	*/
	CountryCode *string
	/*DistanceUnit
	  The distance unit. Supported values are \"mi\" and \"km\"  (for miles and kilometers respectively, default is \"km\").

	*/
	DistanceUnit *string
	/*Latitude
	  The geo coordinate latitude to search for stores  (value range -90.00 .. 90.00).

	*/
	Latitude *float64
	/*Longitude
	  The geo coordinate longitude to search for stores  (value range -180.00 .. 180.00).

	*/
	Longitude *float64
	/*MaxDistance
	  The area (radius) in distancUnit where stores will be  searched for (default is half of the earth's perimeter).

	*/
	MaxDistance *float64
	/*PostalCode
	  The postal code e.g. \"01801\".

	*/
	PostalCode *string
	/*Start
	  The result set index to return the first instance for. Default value is 0.

	*/
	Start *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get stores params
func (o *GetStoresParams) WithTimeout(timeout time.Duration) *GetStoresParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get stores params
func (o *GetStoresParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get stores params
func (o *GetStoresParams) WithContext(ctx context.Context) *GetStoresParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get stores params
func (o *GetStoresParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get stores params
func (o *GetStoresParams) WithHTTPClient(client *http.Client) *GetStoresParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get stores params
func (o *GetStoresParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get stores params
func (o *GetStoresParams) WithCount(count *int32) *GetStoresParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get stores params
func (o *GetStoresParams) SetCount(count *int32) {
	o.Count = count
}

// WithCountryCode adds the countryCode to the get stores params
func (o *GetStoresParams) WithCountryCode(countryCode *string) *GetStoresParams {
	o.SetCountryCode(countryCode)
	return o
}

// SetCountryCode adds the countryCode to the get stores params
func (o *GetStoresParams) SetCountryCode(countryCode *string) {
	o.CountryCode = countryCode
}

// WithDistanceUnit adds the distanceUnit to the get stores params
func (o *GetStoresParams) WithDistanceUnit(distanceUnit *string) *GetStoresParams {
	o.SetDistanceUnit(distanceUnit)
	return o
}

// SetDistanceUnit adds the distanceUnit to the get stores params
func (o *GetStoresParams) SetDistanceUnit(distanceUnit *string) {
	o.DistanceUnit = distanceUnit
}

// WithLatitude adds the latitude to the get stores params
func (o *GetStoresParams) WithLatitude(latitude *float64) *GetStoresParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the get stores params
func (o *GetStoresParams) SetLatitude(latitude *float64) {
	o.Latitude = latitude
}

// WithLongitude adds the longitude to the get stores params
func (o *GetStoresParams) WithLongitude(longitude *float64) *GetStoresParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the get stores params
func (o *GetStoresParams) SetLongitude(longitude *float64) {
	o.Longitude = longitude
}

// WithMaxDistance adds the maxDistance to the get stores params
func (o *GetStoresParams) WithMaxDistance(maxDistance *float64) *GetStoresParams {
	o.SetMaxDistance(maxDistance)
	return o
}

// SetMaxDistance adds the maxDistance to the get stores params
func (o *GetStoresParams) SetMaxDistance(maxDistance *float64) {
	o.MaxDistance = maxDistance
}

// WithPostalCode adds the postalCode to the get stores params
func (o *GetStoresParams) WithPostalCode(postalCode *string) *GetStoresParams {
	o.SetPostalCode(postalCode)
	return o
}

// SetPostalCode adds the postalCode to the get stores params
func (o *GetStoresParams) SetPostalCode(postalCode *string) {
	o.PostalCode = postalCode
}

// WithStart adds the start to the get stores params
func (o *GetStoresParams) WithStart(start *int32) *GetStoresParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get stores params
func (o *GetStoresParams) SetStart(start *int32) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetStoresParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.CountryCode != nil {

		// query param country_code
		var qrCountryCode string
		if o.CountryCode != nil {
			qrCountryCode = *o.CountryCode
		}
		qCountryCode := qrCountryCode
		if qCountryCode != "" {
			if err := r.SetQueryParam("country_code", qCountryCode); err != nil {
				return err
			}
		}

	}

	if o.DistanceUnit != nil {

		// query param distance_unit
		var qrDistanceUnit string
		if o.DistanceUnit != nil {
			qrDistanceUnit = *o.DistanceUnit
		}
		qDistanceUnit := qrDistanceUnit
		if qDistanceUnit != "" {
			if err := r.SetQueryParam("distance_unit", qDistanceUnit); err != nil {
				return err
			}
		}

	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude float64
		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := swag.FormatFloat64(qrLatitude)
		if qLatitude != "" {
			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}

	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude float64
		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := swag.FormatFloat64(qrLongitude)
		if qLongitude != "" {
			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}

	}

	if o.MaxDistance != nil {

		// query param max_distance
		var qrMaxDistance float64
		if o.MaxDistance != nil {
			qrMaxDistance = *o.MaxDistance
		}
		qMaxDistance := swag.FormatFloat64(qrMaxDistance)
		if qMaxDistance != "" {
			if err := r.SetQueryParam("max_distance", qMaxDistance); err != nil {
				return err
			}
		}

	}

	if o.PostalCode != nil {

		// query param postal_code
		var qrPostalCode string
		if o.PostalCode != nil {
			qrPostalCode = *o.PostalCode
		}
		qPostalCode := qrPostalCode
		if qPostalCode != "" {
			if err := r.SetQueryParam("postal_code", qPostalCode); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart int32
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt32(qrStart)
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
