// Code generated by go-swagger; DO NOT EDIT.

package stores

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStoresByIdsParams creates a new GetStoresByIdsParams object
// with the default values initialized.
func NewGetStoresByIdsParams() *GetStoresByIdsParams {
	var ()
	return &GetStoresByIdsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStoresByIdsParamsWithTimeout creates a new GetStoresByIdsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStoresByIdsParamsWithTimeout(timeout time.Duration) *GetStoresByIdsParams {
	var ()
	return &GetStoresByIdsParams{

		timeout: timeout,
	}
}

// NewGetStoresByIdsParamsWithContext creates a new GetStoresByIdsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetStoresByIdsParamsWithContext(ctx context.Context) *GetStoresByIdsParams {
	var ()
	return &GetStoresByIdsParams{

		Context: ctx,
	}
}

// NewGetStoresByIdsParamsWithHTTPClient creates a new GetStoresByIdsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetStoresByIdsParamsWithHTTPClient(client *http.Client) *GetStoresByIdsParams {
	var ()
	return &GetStoresByIdsParams{
		HTTPClient: client,
	}
}

/*GetStoresByIdsParams contains all the parameters to send to the API endpoint
for the get stores by ids operation typically these are written to a http.Request
*/
type GetStoresByIdsParams struct {

	/*Ids*/
	Ids []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get stores by ids params
func (o *GetStoresByIdsParams) WithTimeout(timeout time.Duration) *GetStoresByIdsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get stores by ids params
func (o *GetStoresByIdsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get stores by ids params
func (o *GetStoresByIdsParams) WithContext(ctx context.Context) *GetStoresByIdsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get stores by ids params
func (o *GetStoresByIdsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get stores by ids params
func (o *GetStoresByIdsParams) WithHTTPClient(client *http.Client) *GetStoresByIdsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get stores by ids params
func (o *GetStoresByIdsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIds adds the ids to the get stores by ids params
func (o *GetStoresByIdsParams) WithIds(ids []string) *GetStoresByIdsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the get stores by ids params
func (o *GetStoresByIdsParams) SetIds(ids []string) {
	o.Ids = ids
}

// WriteToRequest writes these params to a swagger request
func (o *GetStoresByIdsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesIds := o.Ids

	joinedIds := swag.JoinByFormat(valuesIds, "")
	// path array param ids
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedIds) > 0 {
		if err := r.SetPathParam("ids", joinedIds[0]); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
